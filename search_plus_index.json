{"./":{"url":"./","title":"本书简介","keywords":"","body":"本书简介 "},"page/1010.html":{"url":"page/1010.html","title":"简介","keywords":"","body":"简介 "},"page/1011.html":{"url":"page/1011.html","title":"概述","keywords":"","body":"概述 计算机网络是由多台计算机组成的系统,与传统的单机系统、多机系统相比有很大的区别。 计算机网络的结构、功能、组成以及实现技术更复杂,维护起来难度更大。 "},"page/1012.html":{"url":"page/1012.html","title":"定义","keywords":"","body":"定义 关于计算机网络最简单的定义是指一些相互连接的、以共享资源为目的的、自治的计算机集合。从目前计算机网络的发展与现状特征来看：计算机网络是指将不同地理位置的具有独立功能的多台计算机及相关设备，通过通信线路连接起来，在网络操作系统、应用软件和网络协议的支持下，实现资源共享和数据通信的计算机系统。 计算机网络是计算机技术与通信技术相结合的产物,它实现了远程通信、远程信息处理和资源共享。经过几十年的发展,计算机网络已由早期的“终端-计算机网”“计算机-计算机网”成为现代具有统一网络体系结构的计算机网络。 对计算机网络的理解： （1）不同地理位置，范围：几十米，几百米，几千米，几百千米，… （2）具有独立功能的计算机系统（硬件、软件、应用程序）。 （3）通信线路连接：有线方式、无线方式。 （4）协议的控制。（驱动程序） 协议：通信双方所必须遵守的规则和约定。 （5）以实现资源共享和数据通信为目的。 "},"page/1013.html":{"url":"page/1013.html","title":"发展","keywords":"","body":"发展 计算机网络的发展 计算机网络是计算机技术与通信技术日益发展和密切结合的产物,从现代网络技术的发展来看，计算机网络的发展主要分为四个阶段： 以数据通信为主的第一代计算机网络 以资源共享为主的第二代计算机网络 体系标准化的第三代计算机网络 以Internet为核心的第四代计算机网络 1) 具有通信功能的单机系统 该系统又称终端-计算算机网络,是早期计算机网络的主要形式。它将一台计算机经通信线路与若干终端直接相连。美国于20世纪50年代建立的半自动地面防空系统SAGE就属于这一类网络。它把远距离的雷达和其他测量控制设备的信息通过通信线路送到一台旋风型计算机上进行处理和控制,首次实现了计算机技术与通信技术的结合。 2) 具有通信功能的多机系统 对终端-计算机网络进行改进:在主计算机的外围增加了一台计算机,专门用于处理终端的通信信息及控制通信线路并能对用户的作业进行某些预处理操作这合计算机称为“前端-处理机”或“通信控制处理机”。在终端设备较集中的地方设置一台集中器,终端通过低速线路先汇集到集中器上,然后再用高速线路将集中器连到主机上,这就形成了多机系统。 3) 以共享资源为目的的计算机网络 具有通信功能的多机系统是计算机-计算机网络,它是由若干台计算机互连的系统,即利用通信线路将多台计算机连接起来,在计算机之间进行通信。该网络有两种结构形式:一种形式是主计算机通过通信线路直接互连的结构,其中主计算机同时承担数据处理和通信工作;另一种形式是通过通信控制处理机间接地把各主计算机连接的结构,其中通信处理机和主计算机分工不同,前者负责网络上各主计算机间的通信处理和控制,后者是网络资源的拥有者,负责数据处理,它们共同组成资源共享的计算机网络。20世纪70年代,美国国防部高级研究计划局所研制的ARPANET是计算机-计算机网络的典型代表。最初该网络仅由4台计算机连接而成,到1975年,已连接100多台不同型号的大型计算机。ARPANET成为第一个完善地实现分布式资源共享的网络,为计算机网络的发展奠定了基础。 在这期间,国际标准化组织(ISO)提出了开放系统互连参考模型OSI/RM (Open System Interconnection Reference Model)0该模型定义了异种机连网所应遵循的框架结构。OSI/RM很快得到了国际上的认可,并被许多厂商接受。由此使计算机网络的发展进入了新的阶段。 4)以局域网及因特网为支撑环境的分布式计算机系统 局域网是继远程网之后发展起来的,它继承了远程网的分组交换技术和计算机的I/O总线结构技术。局域网的发展也促使计算机网络的模式发生了变革,即由早期的以大型机为中心的集中式模式转变为由微机构成的分布式计算机模式。 计算机网络的定义随网络技术的更新可从不同的角度给予描述。目前,人们已公认的有关计算机网络的定义是利用通信设备和线路将地理位置分散的、功能独立的自主计算机系统或由计算机控制的外部设备连接起来,在网络操作系统的控制下,按照约定的通信协议进行信息交换,实现资源共享的系统。 该定义中涉及的“资源”应该包括硬件资源(CPU、大容量的磁盘、光盘以及打印机等)和软件资源(语言编译器、文本编辑器、各种软件工具和应用程序等)。 因特网概述 因特网发展的三个阶段 从ARPANET向互联网发展（internet与Internet）（1969年，1983年） 三级结构的因特网（主干网、地区网、校园网）（1985年起，NSFnet） 多层次ISP结构的因特网（1993年起） 用户通过 ISP 上网 根据提供服务的覆盖面积大小以及所拥有的IP 地址数目的不同，ISP 也分成为不同的层次。 "},"page/1034.html":{"url":"page/1034.html","title":"功能应用","keywords":"","body":"功能应用 计算机网络提供的主要功能有如下。 资源共享 数据通信 集中管理和远程控制 分布式信息处理 提高计算机系统的可靠性 娱乐和电子商务 (1) 数据通信。 通信或数据传输是计算机网络的主要功能之一,用于在计算机系统之间传送各种信息。利用该功能,地理位置分散的生产单位和业务部门可通过计算机网络连接在一起进行集中控制和管理,也可以通过计算机网络传送电子邮件,发布新闻消息及进行电子数据交换,极大地方便了用户,提高了工作效率。 (2) 资源共享。 资源共享是计算机网络最有吸引力的功能。通过资源共享,可使网络中分散在异地的各种资源互通有无,分工协作,从而大大提高系统资源的利用率。资源共享包括软件资源共享和硬件资源共享。 (3) 负载均衡。 在计算机网络中可进行数据的集中处理或分布式处理,一方面可以通过计算机网络将不同地点的主机或外设釆集到的数据信息送往一台指定的计算机,在此计算机上对数据进行集中和综合处理,通过网络在各计算机之间传送原始数据和计算结果;另一方面,当网络中的某台计算机任务过重时,可将任务分派给其他空闲的多台计算机,使多台计算机相互协作,均衡负载,共同完成任务。 (4)高可靠性。 高可靠性指在计算机网络中的各台计算机可以通过网络彼此互为后备机,一旦某台计算机出现故障,故障机的任务就可由其他计算机代为处理,从而提高系统的可靠性。并且避免了单机无后备使用的情况下,计算机出现故障而导致系统瘫痪的现象,从而大大提高了系统的可靠性。 借助于计算机网络,在各种功能软件的支持下,人们可以进行高速的异地电子信息交换,并获得了多种服务,如新闻浏览和信息检索、传送电子邮件、多媒体电信服务、远程教育、网上营销、网上娱乐和远程医疗诊断等。 "},"page/1014.html":{"url":"page/1014.html","title":"组织标准","keywords":"","body":"组织标准 有关的网络标准组织与管理机构 有关的标准组织 随着计算机技术、通信技术和信息处理技术的发展，计算机进入了网络化时代。为了支持异种机间的互连及通信，需要有统一的开放系统网络协议或通过网络技术进行协议转换，为了支持多种通信媒体，不仅计算机网络结构要适应通信技术的发展，而且要制定相应的通信控制规程。为了支持多种处理业务，要制定表示信息的约定和访问控制资源的标准。 有关的国际标准化组织机构做了大量而卓有成效的工作 国际标准化组织2.国际电信联盟3.美国电子工业协会4. 电气和电子工程师协会 Internet管理机构 1992年成立因特网（Internet Society）协会，\u000b下属组织因特网体系结构研究委员会IAB (Internet Architecture Board)负责管理因特网有关协议的开发。IAB下设两个工程部：\u000b因特网工程部IETF (Internet Engineering Task Force)，因特网研究部IRTF(Internet Reserch Task Force)。 因特网标准的管理机构示意图 Internet协会 Internet协会( ISOC)是一个专业性的会员组织，由来自1 0 0多个国家的1 5 0个组织以及6 000名个人成员组成，这些组织和个人展望影响Internet现在和未来的技术。ISOC由几个负责Internet结构标准的组织组成，包括Internet体系结构组( IAB )和Internet工程任务组( IETF)。ISOC的站点是HTTP:/ /www.isoc.org/。 Internet体系结构组 Internet体系结构组( IAB )以前称为Internet行动组，是Internet协会技术顾问，这个小组定期会晤、考查由Internet工程任务组和Internet工程指导组提出的新思想和建议，并给IETF带来一些新的想法和建议。IAB的We b站点是http://www.IAB.org/。 Internet工程任务组 Internet工程任务组( IETF)是由网络设计者、制造商和致力于网络发展的研究人员组成的一个开放性组织。IETF一年会晤三次，主要的工作通过电子邮件组来完成，IETF被分成多个工作组，每个组有特定的主题。IESG工作组包括超文本传输协议( HTTP )和Internet打印协议(IPP)工作组。 I E T F对任何人都是开放的，其站点是http://www.IETF.org。 Internet工程指导组 Internet工程指导组( I E S G )负责I E T F活动和Internet标准化过程的技术性管理， I E S G也保证I S O C的规定和规程能顺序进行。I E S G给出关于Internet标准规范采纳前的最后建议。 Internet编号管理局 Internet编号管理局( IANA)负责分配I P地址和管理域名空间， IANA还控制I P协议端口号和其他参数，IANA在I C A N N下运作。IANA的站点是http://www.IANA.org/ Internet名字和编号分配组织(ICANN) ICANN是为国际化管理名字和编号而形成的组织。其目标是帮助Internet域名和I P地址管理从政府向民间机构转换。当前，I C A N N参与共享式注册系统(Shared Registry System，S R S )，通过S R S，Internet域的注册过程是开放式公平竞争的。 Internet网络信息中心和其他注册组织 InterNIC(Internet Network Information Center Internet)从1 9 9 3年起由Network Solutions公司运作，负责最高级域名的注册(.com, .org, .net, .edu)，InterNIC由美国国家电信和信息管理机构( N T I A )监督，这是商业部的一个分组。InterNIC把一些责任委派给其他官方组织(如国防部N I C和亚太地区N I C )。 RFC文档与Internet标准 所有的因特网标准都是以 RFC的形式在因特网上发表。RFC (Request For Comments的意思就是“请求评论”。所有的RFC文档都可从因特网上免费下载。但应注意，并非所有的RFC文档都是因特网标准，只有一小部分RFC文档最后才能变成因特网标准。 RFC按收到时间的先后顺序从小到大编上序号（即RFC xxxx，这里的xxxx是阿拉伯数字）。一个RFC文档更新后就使用一个新的编号，并在文档中指出原来老编号的RFC文档已成为陈旧的。 因特网标准形成阶段示意图（RFCxxxx） 因特网标准形成阶段 (1)因特网草案(Internet Draft) (2)建议标准(Proposed Standard) (3)草案标准(Draft Standard) (4)因特网标准(Internet Standard)\u000b还有三种RFC，即历史的、实验的和提供信息的。 "},"page/1015.html":{"url":"page/1015.html","title":"组成","keywords":"","body":"组成 一个完整的计算机网络系统是由网络硬件和网络软件所组成的。 网络硬件：一般指网络的计算机、传输介质和网络连接设备等。 网络软件：一般指网络操作系统、网络通信协议等。 "},"page/1016.html":{"url":"page/1016.html","title":"硬件","keywords":"","body":"硬件 网络硬件的组成 主机 网络工作站 网络终端 通信处理机 通信线路 信息变换设备 网络连接设备 中继器 由于局域网通信介质的长度都有一定限制，当主机之间的距离大于一定数值时，就需要中继器延长通信介质的距离。 集线器 集线器具有两个功能，第一，实现中继功能（它实质上是一个多端口的中继器）；第二，汇接多台主机，被形象地称为Hub。 分为8口Hub、16口Hub、24口Hub和48口Hub四种。 按照总线带宽的大小，分为10Mbit/s、100Mbit/s和10M／100M自适应Hub三种。 网桥 网桥的作用是互联两个局域网。 网桥的工作原理 交换机 交换机是由网桥发展而来的，它相当于一个多端口的网桥。交换机的最初用途是连接局域网，使局域网的网络规模得以扩展。交换机还具有提高局域网性能的作用。 局域网交换机 路由器 路由器是比局域网交换机功能更丰富的互联设备。当要互联的局域网之间需要对信息交换施加比较严格的控制时，或者把局域网通过广域网（Wide Area Network，WAN）与远程的局域网互联时，一般采用路由器作为互联设备。 调制解调器（Modem） 调制解调器（Modem，俗称“猫”）的功能就是将电脑中表示数据的数字信号在模拟电话线上/不同线路传输，从而达到数据通信的目的，主要由两部分功能构成：调制和解调。调制是将数字信号转换成适合于在电话线上传输的模拟信号进行传输，解调则是将电话线上的模拟信号转换成数字信号，由电脑接收并处理。 网卡（网络适配器NIC） 网卡是连接计算机与网络的基本硬件设备。网卡插在计算机或服务器扩展槽中， 通过网络线（如双绞线、同轴电缆或光纤）与网络交换数据、共享资源。 网卡虽然有多种，但每块网卡都拥有唯一的ID号，也叫做MAC地址（48位），MAC地址被烧录在网卡的ROM中，就像我们每个人的遗传基因DNA一样，即使在全世界也绝不会重复。 传输介质 传输介质就是通信中实际传送信息的载体，在网络中是连接收发双方的物理通路 常用的传输介质分为有线介质和无线介质 "},"page/1017.html":{"url":"page/1017.html","title":"软件","keywords":"","body":"软件 网络操作系统 网络协议软件 网络管理软件 网络通信软件 网络应用软件 "},"page/1030.html":{"url":"page/1030.html","title":"拓展","keywords":"","body":"拓展 1.因特网Internet是广域网中的一个实例，是一个专有名词，和Internet不一样，internet是互联网是统称 2.ISO/OSI只是提出一个模板（通用的网络模型结构），大家可以按照这个严格模板来，这个模板偏向理论，很严格，但是不太实用，TCP/IP也是一个模板，比ISO/OSI更加实用 3.局域网是根据ISO/OSI模板创建了一个适用于中小型局域网特性的规范，并不是完全套用 4.根据ISO/OSI创建的局域网规范是多种多样的，当然大家都用好的，优胜劣汰，以太网是一种出色的局域网规范，所以以太网是局域网的一种。 "},"page/1032.html":{"url":"page/1032.html","title":"因特网","keywords":"","body":"因特网的组成 "},"page/1031.html":{"url":"page/1031.html","title":"工作方式-边核","keywords":"","body":"工作分式 从因特网的工作方式上看，可以划分为以下的两大块： (1) 边缘部分 由所有连接在因特网上的主机组成。这部分是用户直接使用的，用来进行通信（传送数据、音频或视频）和资源共享。 (2) 核心部分 由大量网络和连接这些网络的路由器组成。这部分是为边缘部分提供服务的（提供连通性和交换）。 因特网的边缘部分与核心部分 一、因特网的边缘部分 1.客户/服务器（C/S）方式（即Client/Server方式） 2.对等连接（P2P）方式（ 即 Peer-to-Peer方式 ） "},"page/1025.html":{"url":"page/1025.html","title":"层次","keywords":"","body":"层次 计算机网络按照数据通信和数据处理的功能可分为两层:内层通信子网和外层资源子网, 通信子网(图中虚线内)的结点计算机和高速通信线路组成独立的数据系统,承担全网的数据传输、交换、加工和变换等通信处理工作,即将一台计算机的输出信息传送给另一台计算机。 资源子网(图中点划线内虚线外)包括计算机、终端、通信子网接口设备、外部设备(如打印机、磁带机和绘图机等)及各种软件资源等,它负责全网的数据处理和向网络用户提供网络资源及网络服务。 H-主计算机；T-终端；TIP-集线器 通信子网和资源子网关系图 通信子网和资源子网的划分,完全符合国际标准化组织所制定的开放式系统互连参考模型( OSI ) 的思想。其中,通信子网对应于OSI中的低三层(物理层、数据链路层、网络层),而资源子网对应于OSI中的高三层(会话层、表示层、应用层)。 这种划分将通信子网的任务从主机中抽取出来,由通信子网中的设备专门解决数据传输和通信控制问题。而资源子网中的计算机可集中精力处理数据,从而提髙主机效率和网络的整体性能。 "},"page/1026.html":{"url":"page/1026.html","title":"资源子网","keywords":"","body":"资源子网 资源子网包含若干台主机（Host），它们是各种类型的计算机（或服务器），向用户提供服务。 资源子网是由处于网络外围的主机构成，其任务是负责信息处理，向网络提供可用的资源。 用户通过资源子网不仅共享通信子网的资源，而且还可以共享资源子网的硬件资源和软件资源。 "},"page/1027.html":{"url":"page/1027.html","title":"通讯子网","keywords":"","body":"通讯子网 由网络中的通信链路和用于信息交换的交换机结点构成。通信子网处于网络的内层。 通信子网的主要任务是负责全网网络互连和数据通信。 通信子网采用的数据交换技术主要有电路交换、报文交换和分组交换三种。 "},"page/1018.html":{"url":"page/1018.html","title":"分类","keywords":"","body":"分类 计算机网络的分类方式很多,按照不同的分类原则,可以得到各种不同类型的计算机网络。 例如, 按通信距离(作用范围)可分为广域网、局域网和城域网; 按使用范围（使用者）可分为公用网和专用网; 按通信传播方式可分为广播式和点到点式。 按网络拓扑结构可分为星型网、树型网、环型网和总线网; 按信息交换方式可分为电路交换网、分组交换网和综合交换网; 按通信介质可分为双绞线网、同轴电缆网、光纤网和卫星网等; 按传输带宽可分为基带网和宽带网; 按速率可分为高速网、中速网和低速网; "},"page/1019.html":{"url":"page/1019.html","title":"通信距离-局广城","keywords":"","body":"局广城 根据计算机网络的覆盖范围和通信终端之间相隔的距离不同将其分为局域网、城域网和广域网三类的情况,各类网络的特征参数如下表所示。 各类网络的特征参数 局域网(LAN,Local Area Network) 局域网(Local Area Network, LAN)是指传输距离有限、传输速度较高、以共享网络资源为目的的网络系统。由于局域网投资规模较小,网络实现简单,故新技术易于推广。局域网技术与广域网相比发展迅速。局域网的特点如下: (1) 分布范围有限。加入局域网中的计算机通常处在几千米的距离之内。通常,它分布在—个学校、一个企业单位,为本单位使用。一般称为“园区网”或“校园网”。 (2) 有较高的通信带宽,数据传输率高。一般为1Mbps以上,最高已达1000Mbps。 (3) 数据传输可靠,误码率低。误码率一般为10−410^{-4}10−4~10−610^{-6}10−6 (4) 通常采用同轴电缆或双绞线作为传输介质,跨楼寓时使用光纤。 (5) 拓扑结构简单、简洁,大多釆用总线、星型和环型等,系统容易配置和管理。网上的计算机一般采用多路控制访问技术或令牌技术访问信道。 (6) 网络的控制一般趋向于分布式,从而减少了对某个结点的依赖,避免并减小了一个结点故障对整个网络的影响。 (7)通常,网络归单一组织所拥有和使用,不受任何公共网络管理机构的规定约束,容易进行设备的更新和新技术的应用,以不断增强网络功能。 城域网(MAN,Metropolitan Area Network) 城域网 ( Metropolitan Area Network,MAN)是规模介于局域网和广域网之间的一种较大范围的高速网络,一般覆盖临近的多个单位和城市,从而为接入网络的企业、机关、公司及社会单位提供文字、声音和图像的集成服务。城域网规范由IEEE 802.6协议定义。 广域网(WAN,Wide Area Network) 广域网 ( Wide Area Network, WAN)又称远程网,它是指覆盖范围广、传输速率相对较低、以数据通信为主要目的的数据通信网。广域网最根本的特点如下。 (1) 分布范围广。加入广域网中的计算机通常处在从数千米到数千千米的地方。因此,网络所涉及的范围可为市、地区、省、国家乃至世界。 (2) 数据传输率低。一般为几十兆位每秒以下。 (3) 数据传输的可靠性随着传输介质的不同而不同,若用光纤,误码率一般在10−610^{-6}10−6~10−1110^{-11}10−11之间。 (4) 广域网常常借用传统的公共传输网来实现,因为单独建造一个广域网极其昂贵。 (5) 拓扑结构较为复杂,大多采用“分布式网络”,即所有计算机都与交换结点相连,从而实现网络中的任何两台计算机都可以进行通信。 广域网的布局不规则,使得网络的通信控制比较复杂。尤其是使用公共传输网,要求连接到网上的任何用户都必须严格遵守各种标准和规程。设备的更新和新技术的引用难度较大。广域网可将一个集团公司、团体或一个行业的各处部门和子公司连接起来。这种网络一般要求兼容多种网络系统(异构网络)。 "},"page/1020.html":{"url":"page/1020.html","title":"使用范围-公专","keywords":"","body":"公专 按网络的使用者进行分类 （1）公用网 又称为公众网。我国的公用网一般由政府电信部门组建、管理和控制。网络内的传输和交换装置可提供给任何部门或单位以及公众使用。 （2）专用网 由部门或企事业单位自行组建，不允许其它部门或单位使用。专用网可以租用电信部门的传输线路。如部门网络、企业网络和校园网络等。 "},"page/1021.html":{"url":"page/1021.html","title":"通信传播方式-点广","keywords":"","body":"点广 按通信方式分类 （1）点到点 网络网络中的两台主机、两台结点交换机之间或主机与结点交换机之间都存在一条物理信道，机器（包括主机和结点交换机）沿某信道发送的数据确定无疑的只有信道另一端的唯一一台机器能收到。 （2）广播式 网络广播式网络结构中，所有主机共享一条信道，某主机发出的数据，其他主机都能收到。在广播信道中，由于信道共享而引起信道访问冲突，因此信道访问控制是要解决的关键问题。 "},"page/1028.html":{"url":"page/1028.html","title":"拓扑结构","keywords":"","body":"拓扑结构 拓扑结构拓扑的概念来源于几何学，主要描述几何图形中点和线的关系。一般是指由点和线排列成的几何图形。 计算机网络的拓扑结构(Computer Network Topology)是指计算机或设备与传输媒介形成的结点与线的物理构成模式，即一个网络的通信链路和计算机结点相互连接构成的几何图形。链路是网络中相邻两个结点之间的物理通路，结点指计算机和有关的网络设备，甚至指一个网络。网络的结点有两类：一类是转换和交换信息的转接结点，包括结点交换机、集线器和终端控制器等；另一类是访问结点，包括计算机主机和终端等。线则代表各种传输媒介，包括有形的和无形方式。 网络拓扑结构是指网络中通信线路和结点的几何排序,用于表示整个网络的结构处貌,反映各结点之间的结构关系。它影响着整个网络的设计、功能、可靠性和通信费用等重要方面,是计算机网络十分重要的要素，常用的网络拓扑结构有总线型、星型、环型、树型和分布式(网状)结构等。 拓扑结构的选择往往与传输媒体的选择及媒体访问控制方法的确定紧密相关。在选择网络拓扑结构时，应该考虑下列几点因素：(1)可靠性。 (2)费用。(3)灵活性。 (4)响应时间和吞吐量。 几何图形：计算机：结点；通信线路：连线 总线型结构 总线型拓扑结构如图 (a)所示,其特点为只有一条双向通路,便于进行广播式传送信息;总线型拓扑结构属于分布式控制,无须中央处理器,故结构比较简单;结点的增、删和位置的变动较容易,变动中不影响网络的正常运行,系统扩充性能好;结点的接口通常釆用无源线路,系统可靠性高;设备少、价格低、安装使用方便;由于电气信号通路多,干扰较大,因此对信号的质量要求高;负载重时,线路的利用率较低;网上的信息延迟时间不确定,故障隔离和检测困难。 星型结构 在星型结构中,使用中央交换单元以放射状连接到网中的各个结点,如图(b)所示。 中央单元釆用电路交换方式以建立所希望通信的两结点间专用的路径。通常用双绞线将结点与中央单元进行连接。其特点为维护管理容易,重新配置灵活;故障隔离和检测容易;网络延迟时间短;各结点与中央交换单元直接连通,各结点之间通信必须经过中央单元转换;网络共享能力差;线路利用率低,中央单元负荷重。 环型结构 环型结构的信息传输线路构成一个封闭的环型,各结点通过中继器连入网内,各中继器间首尾相接,信息单向沿环路逐点传送,如图 (c)所示。其特点为信息的流动方向是固定的,两个结点仅有一条通路,路径控制简单;有旁路设备,结点一旦发生故障,系统自动旁路,可靠性高;信息要串行穿过多个结点,在网中结点过多时传输效率低,系统响应速度慢;由于环路封闭,扩充较难。 树型结构 树型结构是总线型结构的扩充形式,传输介质是不封闭的分支电缆,如图 (d)所示。 它主要用于多个网络组成的分级结构中,其特点同总线型网。 分布式结构 分布式结构无严格的布点规定和形状,各结点之间有多条线路相连,如图(e)所示。 其特点为有较高的可靠性,当一条线路有故障时,不会影响整个系统工作;资源共享方便,网络响应时间短;由于结点与多个结点连接,故结点的路由选择和流量控制难度大,管理软件复杂;硬件成本高。 常用的网络拓扑结构 广域网与局域网所使用的网络拓扑结构有所不同,广域网多用分布式或树型结构,而局域网常使用总线型、环型、星型或树型结构。 某大学校园网结构示意图 某大学主干网 中国教育科研计算机网络拓扑图 "},"page/1055.html":{"url":"page/1055.html","title":"信息交换方式-路组报","keywords":"","body":"信息交换方式-路分报 1.电路交换 必须经过“建立连接 通信 释放连接”三个步骤的连网方式为面向连接的。 电路交换举例 A 和 B 通话经过四个交换机 通话在 A 到 B 的连接上进行 C 和 D 通话只经过一个本地交换机通话在 C 到 D 的连接上进行 缺点：电路交换传送计算机数据效率低 计算机数据具有突发性。 这导致通信线路的利用率很低。 2.分组交换 分组交换采用存储转发技术。\u000b 报文（ message）：要发送的整块数据\u000b 分组或包（package）:将报文划分成的等长的数据段，每个数据段前加上必要的控制信息组成的首部（header） 。\u000b分组的首部也称为包头。 可以看出分组交换包含“多余”的三个首部信息 分组交换网基本原理： 分组交换的优点： \u000b高效：分组过程中动态分配传输带宽，对通信电路逐段占用\u000b 灵活：每个节点均为智能，为每一个分组独立地选择转发路由。 迅速：以分组作为传送单位，可以不先建立连接就向其它主机发送分组；网络使用高速链路。 可靠：完善的网络协议；分布式多路由的分组交换网，使用网络有很好的生存性。 分组交换存在的问题： 有一定的时延 各分组所携带的控制信息会造成一定的开销（overhead） 需要专门的管理和控制机制。 特点 需要进行报文的拆分和重组,需要额外开销,为每个数据包额外加上头部 报文交换和分组交换均用存储-转发的交换方式 3.报文交换（message switching）(综合交换网) \u000b报文交换（英语：Message switching），又称存储转发交换，是数据交换的三种方式之一，报文整个地发送，一次一跳。报文交换是分组交换的前身，是由由莱昂纳多·克莱洛克于1961年提出的。 每一个结点接收整个报文，检查目标结点地址，然后根据网络中的交通情况在适当的时候转发到下一个结点。经过多次的存储——转发，最后到达目标，因而这样的网络叫存储——转发网络。其中的交换结点要有足够大的存储空间（一般是磁盘），用以缓冲收到的长报文。 交换结点对各个方向上收到的报文排队，对照下一个转结点，然后再转发出去，这些都带来了排队等待延迟。报文交换的优点是不建立专用链路，但是线路利用率较高，这是由通信中的等待时延换来的。 电子邮件系统（E-mail）适合采用报文交换方式。 特点 报文交换基于存储转发原理\u000b 在报文交换中心，以每份报文为单位，根据报文的目的站地址，在进行相应的转发。 存储接受到的报文，判断其目标地址以选择路由，最后，在下一跳路由空闲时，将数据转发给下一跳路由。报文交换系统现今都由分组交换或电路交换网络所承载。 每一条报文都作为互不相干的实体进行处理。每一条报文都包含地址信息, 一次交换后,报文中的信息会被读取并且下一次交换的传输路径将被确定。 根据网络状况,通信选择的传输路径也会不同。 每一条报文都会在下一次交换前被存储(在硬盘上存储时,会受到RAM的限制)。 优点 报文交换不需要为通信双方预先建立一条专用的通信线路，不存在连接建立时延，用户可随时发送报文。 由于采用存储转发的传输方式，使之具有下列优点：a.在报文交换中便于设置代码检验和数据重发设施，加之交换结点还具有路径选择，就可以做到某条传输路径发生故障时，重新选择另一条路径传输数据，提高了传输的可靠性；b.在存储转发中容易实现代码转换和速率匹配，甚至收发双方可以不同时处于可用状态。这样就便于类型、规格和速度不同的计算机之间进行通信；c.提供多目标服务，即一个报文可以同时发送到多个目的地址，这在电路交换中是很难实现的；d.允许建立数据传输的优先级，使优先级高的报文优先转换。 通信双方不是固定占有一条通信线路，而是在不同的时间一段一段地部分占有这条物理通路，因而大大提高了通信线路的利用率。 缺点： 延迟时间较长，几分钟到几小时不等。由于数据进入交换结点后要经历存储、转发这一过程，从而引起转发时延（包括接收报文、检验正确性、排队、发送时间等），而且网络的通信量愈大，造成的时延就愈大，因此报文交换的实时性差，不适合传送实时或交互式业务的数据。 报文交换只适用于数字信号。 由于报文长度没有限制，而每个中间结点都要完整地接收传来的整个报文，当输出线路不空闲时，还可能要存储几个完整报文等待转发，要求网络中每个结点有较大的缓冲区。为了降低成本，减少结点的缓冲存储器的容量，有时要把等待转发的报文存在磁盘上，进一步增加了传送时延。 4.比较 电路交换、分组交换、报文交换之间的比较 A 和D分别表示源结点和目的结点B和C是在A和D之间的中间结点 电路交换：约定好一个通路，这边发，那边接受，类似于A蓝牙面对面传文件给C 报文交换：一次一个结点，每次传整个文件，类似于A要传电影给C，可是A上午有空，C下午有空，恰巧B上下午都有空，于是A上午将整个文件电影传给B，B下午将整个电影传给C，注意B要接受整个文件，且B要知道传给谁 分组交换：由报文交换发展而来，打包成一个个小包分别转发，类似于A要传4个G的电影给C，可是A上午有空，C下午有空，恰巧B1和B2上下午都有空，但是B1和B2都只有3个G的空间，且他俩不住在一起，于是A将4个G的电影压缩成两个2个G压缩包文件，上午将两个文件压缩包文件分别传给B1和B2，B1和B2下午将各自电影压缩文件传给C，注意B1和B2只要接受压缩文件一部分，且B1和B2都要知道传给谁，如果B1和B2中有一个文件损坏，这个电影C就看不了了，除非这个人负责的部分重新传 分组交换与电路交换相比： 优点： 线路利用率高。电路交换占用过多网络资源，属于独占型交换方式，即使拥有线路复用技术，也无法提高网络的利用率，无法同时为太多（相对概念）用户提供服务。而分组交换则采用统计多路复用技术，根据实际需求动态共享线路。这样可在一定程度上提高了同一线路上用户的数量。 无需事先建立连接。电路交换需事先建立连接，然后进行交换。而分组交换则不需要，直接进行传输即可。 以较快速度满足突发性服务的需求。电路交换应对突发性的服务较为缓慢，需事先建立连接等操作，而分组交换无需等待，直接发起相应请求即可。 缺点: 对于需要持续提供服务的应用，电路交换要优于分组交换。 分组交换可能出现丢包、差错等现象。而电路交换由于一开始就建立连接，源源不断地从源点发往终点，传输持续性包出现差错的概率要小很多。 分组交换与报文交换相比： 优点： 减小了传输时延。由于报文交换需将以报文为单位进行传输，而分组交换只需以分组为单位进行传输，同时，在传输前面分组时，可并行传输其他分组，这样提高了效率。 占用传输线路中较少资源。由于报文交换需要将整个报文在路由器或交换机上存储下来再找转发的端口，所以路由器或交换机的缓存必须大于或等于整个报文的大小，而分组交换则以分组的形式转发，所以路由器或交换机的缓存大于等于分组的大小即可。 出错几率减小。因为分组较短，其出错机率必然减少，每次重发的数据量也就大大减少，这样不仅提高了可靠性，也减少了传输时延。 分组交换和报文交换一样都采用存储转发原理，但由于交换结点上使用了电子计算机且分组为定长，其长度不大，完全可以放在结点交换机的存储器中进行处理，这就使分组转发非常迅速。 缺点: 相比报文交换，从传输总量上来说，分组交换需要传输更多的控制信息作为分组的头。 报文交换不会出现顺序错乱的问题，而分组交换可能会出现分组顺序乱和丢失分组等情况。 参考： https://segmentfault.com/a/1190000016067655 https://zh.wikipedia.org/wiki/%E6%8A%A5%E6%96%87%E4%BA%A4%E6%8D%A2 https://baike.baidu.com/item/%E6%8A%A5%E6%96%87%E4%BA%A4%E6%8D%A2 "},"page/1024.html":{"url":"page/1024.html","title":"通信介质","keywords":"","body":"通信介质 按通信介质可分为双绞线网、同轴电缆网、光纤网和卫星网等 传输介质就是通信中实际传送信息的载体，在网络中是连接收发双方的物理通路；常用的传输介质分为有线介质和无线介质 "},"page/1053.html":{"url":"page/1053.html","title":"传输带宽","keywords":"","body":"传输带宽 "},"page/1054.html":{"url":"page/1054.html","title":"速率","keywords":"","body":"速率 "},"page/1033.html":{"url":"page/1033.html","title":"拓展","keywords":"","body":"拓展 "},"page/1035.html":{"url":"page/1035.html","title":"衡量标准","keywords":"","body":"衡量标准 计算机网络的性能指标 1.速率 比特（bit）是计算机中数据量的单位，也是信息论中使用的信息量的单位。 Bit 来源于 binary digit，意思是一个“二进制数字”，因此一个比特就是二进制数字中的一个 1 或 0。 速率即数据率(data rate)或比特率(bit rate)是计算机网络中最重要的一个性能指标。 速率的单位是 b/s，或kb/s, Mb/s, Gb/s 等速率往往是指额定速率或标称速率。 2.带宽 原义指某个信号具有的频带宽度。 （1）模拟信号 带宽－－表示允许信号占用的频率范围。 单位：HZ、KHZ、MHZ 如：话音的带宽为3.1 KHZ(300 HZ ～3.4 KHZ ) （2）数字信号 带宽－－表示数字信道发送数字信号的速率，即比特率或数据率或传输速率，也称为吞吐量 。 单位：比特/秒，bit/s，bps 更常用的带宽单位是 千比每秒，即 kb/s （103 b/s） 兆比每秒，即 Mb/s（106 b/s） 吉比每秒，即 Gb/s（109 b/s） 太比每秒，即 Tb/s（1012 b/s） 请注意：在计算机上表示数据大小和容量时，K = 210 = 1024， M = 220, G = 230, T = 240。 3.吞吐量 吞吐量(throughput)表示在单位时间内通过某个网络（或信道、接口）的数据量。 吞吐量更经常地用于对现实世界中的网络的一种测量，以便知道实际上到底有多少数据量能够通过网络。 吞吐量受网络的带宽或网络的额定速率的限制。 4.时延 时延：指数据（报文或分组，比特）从网络（或一条链路）的一端传送到另一端所需的时间。 时延有以下几个组成部分：发送时延、传播时延、处理时延和排队时延。 总时延 = 发送时延+传播时延+处理时延+排队时延 （1）.传播时延 指电磁波在信道中传播一定距离所需的时间。 传播时延PD(propagation delay) 信道长度CL (Channel length) 电磁波在信道中的传播速率PV(Propagation rate of electromagnetic waves in the channel) Propagation_Delay=Channel_Length(m)Propagation_rate_of_electromagnetic_waves_in_the_channel(m/s) Propagation\\_Delay = \\frac{ Channel\\_Length(m)}{Propagation\\_ rate\\_ of \\_electromagnetic\\_ waves\\_ in\\_ the\\_ channel(m/s)} Propagation_Delay=Propagation_rate_of_electromagnetic_waves_in_the_channel(m/s)Channel_Length(m)​ 电磁波在信道中的传播速率： 太空：3.0x105km/s(30万km/s) 电缆：2.3x105km/s(23万km/s) 光纤：2.0x105km/s(20万km/s) 如：1000km长的光纤，其传播时延＝5×10−35×10^{-3}5×10−3 s =5ms ​ （2）.发送时延（传输时延 ） 发送数据时，数据块从结点进入到传输媒体所需要的时间。也就是从发送数据帧的第一个比特算起，到该帧的最后一个比特发送完毕所需的时间。 发送时延 Send Delay 数据块长度 Block Length 信道带宽 Channel Bandwidth Send_Delay=Block_Length(bit)Channel_Bandwidth(bit/s∣bps) Send\\_ Delay= \\frac{Block\\_ Length(bit)}{Channel \\_Bandwidth(bit/s|bps)} Send_Delay=Channel_Bandwidth(bit/s∣bps)Block_Length(bit)​ 注意：信号的传输速率与电磁波在信道上传播速率的区别 （3）处理时延 交换结点为存储转发而进行一些必要的处理所花费的时间。 （4）排队时延 结点缓存队列中分组排队所经历的时延。排队时延的长短往往取决于网络中当时的通信量。有时可用排队时延作为处理时延。指数据在交换节点等候发送时在缓存队列中排队所经历的时间。 容易产生的错误概念 对于高速网络链路，我们提高的仅仅是数据的发送速率而不是比特在链路上的传播速率。 提高链路带宽减小了数据的发送时延。 5.时延带宽积(表示链路能够容纳的比特数) 链路的时延带宽积又称为以比特为单位的链路长度。 时延带宽积（以比特为单位的的链路长度） =传播时延×带宽=链路的体积 表示链路能够容纳的比特数。 时延带宽积：正在路上的有多少信号 6.往返时延RTT ​ 数据从发送端开始发送，到发送端收到来自接收端的确认信息所经历的时间。 ​ 往返时延宽带积：在收到确认信息前，已经发送的比特数。 7. 利用率 信道利用率指出信道有百分之几的时间是被利用的（有数据通过）。完全空闲的信道的利用率为零。 网络利用率则是全网络的信道利用率的加权平均值。 信道利用率并非越高越好。 8.时延与网络利用率的关系 根据排队论的理论，当某信道的利用率增大时，该信道引起的时延也就迅速增加。 若令 D0D_0D0​ 表示网络空闲时的时延，D 表示网络当前的时延，则在适当的假定条件下，可以用下面的简单公式表示 D 和 D0D_0D0​之间的关系： D=D01−U D= \\frac{D_0}{1-U} D=1−UD0​​ U 是网络的利用率，数值在 0 到 1 之间 "},"page/1037.html":{"url":"page/1037.html","title":"体系结构","keywords":"","body":"计算机网络体系结构 1.计算机网络体系结构的定义 计算机网络的体系结构(architecture)是计算机网络的各层及其协议的集合。 体系结构就是这个计算机网络及其部件所应完成的功能的精确定义。 实现(implementation)是遵循这种体系结构的前提下用何种硬件或软件完成这些功能的问题。 体系结构是抽象的，而实现则是具体的。一个计算机网络是遵循某种网络体系结构的具体的实现，是具体的计算机和通信硬件以及应用软件和协议的实际运行的实例。 2.计算机网络体系结构中的术语 （1）实体 表示进行信息交换时任何可发送或接收信息的硬件或软件进程。在具体实现时，可以是一个特定的软件模块或软、硬件结合的设备。可理解为信息的发送者和接收者。 （2）服务 描述为体系结构中下一层为其上一层提供支持。也就是说下一层为上一层提供需要的服务，上一层利用下一层提供的服务实现自己的功能，并同时再向更上一层提供所需要的服务。 （3）接口 指同一系统上下层之间提供服务与被服务的一种接口。任何上下层之间都存在接口。 （4）服务访问点（SAP） 是上下层实体在接口上交换信息的地方，即上下层实体间的逻辑接口。上下层实体之间通过服务访问点利用服务原语进行信息交换。 （5）网络协议（network protocol） 即网络中的结点为进行数据交换和通信而建立的规则、标准或约定的集合，简称协议。即两个对等实体之间进行通信的规则的集合。 网络协议主要有以下3个要素组成： 语法：定义通信双方交换信息时的数据与控制信息的结构或格式。 语义：即语法定义的结构或格式中具体的含义，表示要发出何种控制信息、完成何种动作以及做出何种响应等。 时序：即事件实现顺序的详细说明，也称为定时或同步。 3.计算机网络体系结构中的协议与服务的关系 （1）在协议的控制下，两个对等实体之间的通信可以使本层能够向上一层提供服务。协议的实现保证了下一层能够向上一层提供服务。要想实现本层的协议，还需要使用其下一层所提供的服务。 （2）使用本层的服务实体，即服务接受者只能看见下层的服务而无法看见协议。下面的协议对上面的实体用户是透明的。 （3）协议是控制对等实体之间的通信规则，是在“水平方向”的。而服务是由下层向上层通过层与层之间的接口提供的，是“垂直方向的”。 协议很复杂 协议必须将各种不利的条件事先都估计到，而不能假定一切情况都是很理想和很顺利的。 必须非常仔细地检查所设计协议能否应付所有的不利情况。 应当注意：事实上难免有极个别的不利情况在设计协议时并没有预计到。在出现这种情况时，协议就会失败。因此实际上协议往往只能应付绝大多数的不利情况。 "},"page/1036.html":{"url":"page/1036.html","title":"分层模型","keywords":"","body":"计算机网络的分层模型 层次划分的必要性 计算机网络是由许多硬件、软件和协议交织起来的复杂系统。由于网络设计十分复杂，如何设计、组织和实现计算机网络是一个挑战，必须要采用科学有效的方法。 计算机网络是相当复杂的系统,相互通信的两个计算机系统必须高度协调才能正常工作。 为了设计这样复杂的计算机网络,人们提出了将网络分层的方法。分层可将庞大而复杂的问题转化为若干较小的局部问题进行处理,从而使问题简单化。 层次划分的方法 计算机网络应当具有相对独立的功能。 梳理功能之间的关系，使一个功能可以为实现另一个功能提供必要的服务，从而形成系统的层次结构。 为提高系统的工作效率，相同或相近的功能仅在一个层次中实现，而且尽可能在较高的层次中实现。 层次划分举例（邮政系统模型） 在网络的层次模型中需要解决的问题 （1）一个网络到底应该具有哪些层次？网络中每一层的功能是什么？（功能分类与层次划分） （2）网络中各层之间的关系是如何设计与处理的？它们之间如何进行交互？（服务与接口） （3）通信双方的数据传输需要遵循哪些规则和约定？（协议） 计算机网络层次结构模型 层次划分的优点 （1）各层之间相互独立，每一层只实现一种相对独立的功能。使问题复杂程度降低。 （2）灵活性好。各层内部的操作不会影响其他层。 （3）结构上可分割开。各层之间都可以采用最合适的技术来实现。 （4）易于实现和维护。因为整个系统已被分解成相对独立的子系统。 （5）能促进标准化工作。因为每一层的功能及其提供的服务都有了精确的说明 。 通常每一层实现的是以下一种或多种功能。 （1）差错控制：使得和网络两端的相应层次的通信更加可靠。 （2）流量控制：使得发送端的发送速率不要太快，要使接收端来得及接收。 （3）分段和重装：发送端要发送的数据块划分成更小的单位，在接收端将其还原。 （4）复用和分用：发送端几个高层会话复用一条低层连接，在接收端再将其会话分用。 （5）连接建立与释放：在交换数据之前，先交换一些控制信息，以建立一条逻辑连接，当数据传送结束时，将连接释放。 "},"page/1039.html":{"url":"page/1039.html","title":"OSI模型和TCP／IP模型的比较","keywords":"","body":"OSI模型和TCP／IP模型的比较 层次 TCP/IP名称 OSI名称 主要功能 主要设备 主要协议 7 应用层 应用层 实现具体的应用功能 POP3、FTP、HTTP、Telnet、SMTP、DHCP、TFTP、SNMP、DNS 资源子网层 6 应用层 表示层 数据的格式与表达、加密、压缩 POP3、FTP、HTTP、Telnet、SMTP、DHCP、TFTP、SNMP、DNS 资源子网层 5 应用层 会话层 建立、管理和终止会话 POP3、FTP、HTTP、Telnet、SMTP、DHCP、TFTP、SNMP、DNS 资源子网层 4 传输层 传输层 端到端的连接 TCP、UDP 3 网际层 网络层 分组传输和路由选择 三层交换机、路由器 ARP、RARP、ICMP、IGMP 通信子网层 2 网络接口层 数据链路层 传输以帧为单位的信息 网桥、交换机、网卡 PPTP、L2TP、SLIP、PPP 通信子网层 1 硬件层 物理层 二进制传输 中继器、集线器 通信子网层 0 传输介质 传输介质 物理媒体 双绞线、同轴电缆等 1．相同之处 （1）层次结构划分思想相同 两种体系结构都是以协议栈，即不同协议形成的层次结构，为基础进行层次结构的划分，而且协议栈中的协议相互彼此独立。这样做的好处是，可以大大简化各种网络协议的设计，只需要为不同协议提供关联接口即可。 （2）总体层次结构相似 这两个体系结构虽然总的层数和对应层次名称都有所不同，但总体层次结构极其相似。TCP/IP协议体系结构中的网络接口层对应了OSI/RM最低的数据链路层和和物理层。TCP/IP协议体系结构的应用层对应OSI/RM中的应用层、表示层和会话层。OSI/RM中的网络层虽然与TCP/IP的网际层名称上不同，但功能却完全一样，至于传输层两种结构都是完全一样的。在这两种结构中，传输层以下都属于通信子网部分，传输层及以上各层都提供了端到端、与网络无关的服务，属于资源子网部分。 （3）核心组成一样 两种体系结构中都定义了服务、接口和协议三个重要核心概念。服务定义了各层应该做些什么，要提供哪些功能。接口，也就是SAP（服务访问点），为对应的上层提供了获取本层服务的逻辑接口，规定了有哪些参数可以使用，以及使用这些参数的结果是什么。协议就是标准中所说的“通信规程”，它是各层服务功能的具体实现者。当然同一服务在不同网络中可以用不同的协议来实现。各层中的协议各自实现自己的功能，并不影响其他层，任何的一层都只为相邻的上一层提供服务。 2．不同之处 （1）适用范围不同 OSI/RM是先有理论模型，后面才开发标准化协议，所以OSI/RM不偏重于任何特定的网络类型，具有最广泛的理论参考性，是一个理想化的模型。 而TCP/IP协议体系结构则相反，它是在TCP/IP协议族的基础上，专门针对这些协议进行的功能描述和层次划分，与协议的关系非常紧密，仅适用于TCP/IP网络，最具实践性。 （2）层次结构不同 TCP/IP协议体系结构中没有会话层和表示层，事实已证明这两层没有多大用途，即使在OSI/RM中也一样，所以最后取消了，它们的功能合并在应用层之中。另外，OSI/RM中的物理层和数据链路层的功能在TCP/IP协议体系结构中合并到网络接口层，尽管实际上在TCP/IP协议体系结构中对这个层中的具体功能并没有明确规定，实际上这层功能就是OSI/RM物理层和数据链路层的功能。这也是TCP/IP协议体系结构层次划分中不科学的一个重要方面。 （3）支持的网络通信模式不同 OSI/RM的网络层同时支持无连接和面向连接的网络通信，TCP/IP模型的网络层只提供无连接的服务。 （4）所包括的通信协议不同 OSI/RM是一种开放型的适用于所有类型计算机网络的理想化体系结构模型，所以它的通信协议不仅非常多而且类型复杂，适用于各类网络。但是，由于现在网络系统设计者通常不是参考OSI/RM，而是以目前占据了绝大部分市场的TCP/IP体系结构作为设计参考，所以现在OSI/RM中的许多通信协议都已过时。尽管TCP/IP网络也在OSI/RM的设计范围内，但TCP/IP网络中的通信协议是专门针对具体的TCP/IP协议体系结构而开发，更具有TCP/IP协议体系结构的特点，而且这些协议在不断改进，非常适用于目前广泛应用的TCP/IP网络。 "},"page/1040.html":{"url":"page/1040.html","title":"TCP/IP参考模型","keywords":"","body":"TCP/IP参考模型 TCP/IP 协议族 TCP/IP 作为 Internet 的核心协议,通过近20多年的发展已日渐成熟,并被广泛应用于局域网和广域网中,目前已成为事实上的国际标准。作为一个最早的、也是迄今为止发展最为成熟的互连网络协议系统, TCP/IP 包含许多重要的基本特性,这些特性主要表现在5个方面:逻辑编址、路由选择、域名解析、错误检测和流量控制以及对应用程序的支持等。 (1) 逻辑编址。 每一块网卡在出厂时就由厂家分配了一个独一无二的永久性的物理地址。在 Internet 中,为每台连入因特网的计算机分配一个逻辑地址,这个逻辑地址被称为 IP 地址。一个 IP 地址可以包括一个网络 ID 号,用来标识网络;一个子网络 ID 号,用来标识网络上的一个子网;另外,还有一个主机 ID 号,用来标识子网络上的一台计算机。这样,通过这个分配给某台计算机的 IP 地址,就可以很快地找到相应的计算机。 (2) 路由选择。 在 TCP/IP 中包含了专门用于定义路由器如何选择网络路径的协议,即 IP数据包的路由选择。 (3) 域名解析。 虽然 TCP/IP 采用的是32位的 IP 地址,但考虑到用户记忆方便,专门设计了一种方便的字母式地址结构,称为域名或 DNS (域名服务)名字。将域名映射为 IP 地址的操作称为域名解析。域名具有较稳定的特点,而 IP 地址较易发生变化。 (4) 错误检测和流量控制。 TCP/IP 具有分组交换确保数据信息在网络上可靠传递的特性,这些特性包括检测数据信息的传输错误(保证到达目的地的数据信息没有发生变化),确认已传递的数据信息已被成功地接收,监测网络系统中的信息流量,防止出现网络拥塞。 TCP/IP 分层模型 协议是对数据在计算机或设备之间传输时的表示方法进行定义和描述的标准。协议规定了进行传输、检测错误以及传送确认信息等内容。 TCP / IP 是个协议族,它包含了多种协议。 ISO/OSI模型、 TCP / IP 的分层模型及协议的对比如图所示。 TCP / IP 模型与 OSI 模型的对比 TCP / IP 分层模型由4个层次构成,即应用层、传输层、网际层和网络接口层,对各层的功能简述如下。 (1) 应用层。 应用层处在分层模型的最高层,用户调用应用程序来访问 TCP / IP 互连网络,以享受网络上提供的各种服务。应用程序负责发送和接收数据。每个应用程序可以选择所需要的传输服务类型,并把数据按照传输层的要求组织好,再向下层传送,包括独立的报文序列和连续字节流两种类型。 DNS：域名系统或域名服务器 HTTP：超文本传输协议 FTP：文件传输协议 TELNET：远程登录（终端）仿真协议 NNTP：网络新闻传输服务协议 SMTP：简单邮件管理协议 SNMP：简单网络管理协议 (2) 传输层。 传输层的基本任务是提供应用程序之间的通信服务,这种通信又称端到端的通信。传输层既要系统地管理数据信息的流动,还要提供可靠的传输服务,以确保数据准确而有序地到达目的地。为了这个目的，传输层协议软件需要进行协商，让接收方回送确认信息及让发送方重发丢失的分组。在传输层与网际层之间传递两对象是传输层分组。 TCP:传输控制协议，提供可靠的面向连接服务 UDP:用户数据报协议，提供无连接服务 (3) 网际层。 网际层又称 IP 层,主要处理机器之间的通信问题。它接收传输层请求,传送某个具有目的地址信息的分组。该层主要完成以下功能。 1把分组封装到 IP 数据报 (IP Datagram )中,填入数据报的首部(也称为报头),使用路由算法选择把数据报直接送到目标机或把数据报发送给路由器,然后再把数据报交给下面的网络接口层中对应的网络接口模块。 2 处理接收到的数据报,检验其正确性。使用路由算法来决定是在本地进行处理,还是继续向前发送。如果数据报的目标机处于本机所在的网络,该层软件就把数据报的报头剥去,再选择适当的传输层协议软件来处理这个分组。 3 适时发出 ICMP 的差错和控制报文,并处理收到的 ICMP 报文。 IP：Internet协议 IGMP： Internet组管理协议 ICMP： Internet控制消息协议 ARP：地址解析协议 RARP：反向地址解析协议 (4)网络接口层。 网络接口层又称数据链路层,处于 TCP / IP 协议层之下,负责接收 IP 数据报,并把数据报通过选定的网络发送出去。该层包含设备驱动程序,也可能是一个复杂的、使用自己的数据链路协议的子系统。 无网络协议 支持各种接口类型的网络 TCP / IP 协议不包含具体的物理层和数据链路层,只定义了网络接口层作为物理层与网络层的接口规范。这个物理层可以是广域网,例如 X .25公用数据网,也可以是局域网,例如 Ethernet ,Token - Ring 和 FDDI 等。任何物理网络只要按照这个接口规范开发网络接口驱绅程序,就能够与 TCP / IP 协议集成起来。网络接口层处在 TCP / IP 协议的最底层,主要负责管理为物理网络准备数据所需的全部服务程序和功能。 TCP/IP模型中的各层主要协议 "},"page/1041.html":{"url":"page/1041.html","title":"应用层","keywords":"","body":"应用层 ​ 应用层是TCP/IP模型的最高层，它通过使用传输层所提供的服务，直接向用户提供服务。它是TCP/IP网络与用户之间的界面或接口。该层由若干面向用户提供服务的应用协议和支持这些应用的支撑协议组成，基于这些协议，应用层向用户提供了众多的网络应用。 ​ 本章主要讨论域名系统DNS，万维网的工作原理及其主要协议，因特网电子邮件，文件传送协议FTP，远程终端协议TELNET、动态主机配置协议DHCP等。最后，介绍有关网络编程接口的概念。 TCP/IP的应用层 ​ TCP/IP应用层上的典型应用包括Web浏览、电子邮件、文件传输和远程终端等 ​ 与这些应用相关的协议包括超文本传输协议（HTTP）、简单邮件传输协议（SMTP）、文件传输协议（FTP）、简单文件传输协议（TFTP）和虚拟终端协议（Telnet）。 HTTP 用来在浏览器和WWW服务器之间传送超文本协议。 SMTP 用于实现电子邮件传输的应用协议。 FTP 用于实现文件传输服务的协议。通过FTP用户可以方便地连接到远程服务器，可以进行查看、删除、移动、复制、更改远程服务器上的文件内容，并能进行上传文件和下载文件等操作。 TFTP 用于提供小而简单的文件传输服务。TFTP是对FTP的一种补充，特别是在文件较小并且只有传输需求时该协议显得更加有效率。 Telnet 实现虚拟或仿真终端的服务，允许用户把自己的计算机当作远程主机上的一个终端连接到远程计算机，并使用基于文本界面的命令控制和管理远程主机上的文件及其他资源。 DNS 用于实现域名和IP地址之间的相互转换。 SNMP 由于Internet结构复杂，拥有众多的操作者，因此需要好的工具进行网络管理，以确保网络运行的可靠性和可管理性。而SNMP提供了一种监控和管理计算机网络的有效方法，它已成为计算机网络管理的事实标准。 自己编程获取路由器交换机流量数据，获取网络拓扑结构。用语言管理路由器和交互机用。 TCP/IP的应用层 DNS服务 域名和域名系统 域名服务器 域名解析 WWW服务 WWW的基本概念 统一资源定位器 超文本传输协议 超文本标记语言 E-mail服务 电子邮件概述 电子邮件系统的组成 电子邮件的发送和接收过程 电子邮件的组成 简单邮件传输协议 邮件读取协议POP3和IMAP 通用Internet电子邮件扩充协议 FTP服务 远程终端服务 DHCP服务 引导程序协议 动态主机配置协议 网络应用编程接口 应用编程接口与socket编程 无连接循环服务与面向连接并发服务 "},"page/1122.html":{"url":"page/1122.html","title":"DNS服务","keywords":"","body":"DNS服务 域名和域名系统 1.域名系统的概念 因特网编址有三种形式的地址管理机制：域名-IP地址-MAC地址 域名地址转换到IP地址由域名服务系统（Domain Name System，DNS）实现，这个转换过程又称为域名解析（Name Resolution）。 DNS（RFC 1035）也是TCP/IP的应用层协议之一。它利用了UDP传输层协议，端口为53。 域名系统（Domain Name System，DNS）主要是解决Internet上机器或设备命名的一种系统。它是Internet的一项服务，作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问Internet。 CS不需要用户域名解析服务不会因为DNS错误而无法访问 2.Internet的域名结构 Internet采用了层次（树状）结构的命名方法。 任何一个连接在Internet上的主机或路由器都有一个唯一的具有层次结构的名字，即域名。 域名的结构由若干个分量组成，各分量之间用点隔开，各分量分别代表不同级别的域名。 域名的格式为：四级域名．三级域名.二级域名.顶级域名。 通常对应为：机器名称．组织名称．组织类别．国家简称。 www.nuist.edu.cn Internet的域名层次结构 顶级域名 TLD(Top Level Domain) (1) 国家顶级域名 nTLD：如: .cn 表示中国，.us 表示美国，.uk 表示英国，等等。 (2) 通用顶级域名 gTLD：最早的顶级域名是： .com （公司和企业） .net （网络服务机构） .org （非赢利性组织） .edu （美国专用的教育机构） .gov （美国专用的政府部门） .mil （美国专用的军事部门） .int （国际组织） (3) 基础结构域名(infrastructure domain)：这种顶级域名只有一个，即 arpa，用于反向域名解析，因此又称为反向域名。 (4) 新增加了下列的通用顶级域名 .aero （航空运输企业） .biz （公司和企业） .cat （加泰隆人的语言和文化团体） .coop （合作团体） .info （各种情况） .jobs （人力资源管理者） .mobi （移动产品与服务的用户和提供者） .museum （博物馆） .name （个人） .pro （有证书的专业人员） .travel （旅游业） 域名服务器 Internet允许各个单位根据具体情况将本单位的域名划分为若干个域名服务器管辖区( zone)，并在各管辖区中设置相应的授权域名服务器。 域名需要授权注册登记。 Internet划分为多个区域，每个区域中设一个授权域名服务器。 域名服务器有四种类型：根域名服务器\\顶级域名服务器\\权限域名服务器\\本地域名服务器 树状结构的 DNS 域名服务器 域名解析 主机向本地域名服务器的查询一般都是采用递归查询。如果本地域名服务器不知道主机所询问的域名的 IP 地址，那么本地域名服务器就以 DNS 客户的身份，向其他根域名服务器继续发出查询请求报文。 本地域名服务器向根域名服务器的查询通常是采用迭代查询。当根域名服务器收到本地域名服务器的迭代查询请求报文时，要么给出所要查询的 IP 地址，要么告诉本地域名服务器：“你下一步应当向哪一个域名服务器进行查询”。然后让本地域名服务器进行后续的查询。 域名的高速缓存 每个域名服务器都维护一个高速缓存，存放最近用过的名字以及从何处获得名字映射信息的记录。 可大大减轻根域名服务器的负荷，使因特网上的 DNS 查询请求和回答报文的数量大为减少。 为保持高速缓存中的内容正确，域名服务器应为每项内容设置计时器，并处理超过合理时间的项（例如，每个项目只存放两天）。 当权限域名服务器回答一个查询请求时，在响应中都指明绑定有效存在的时间值。增加此时间值可减少网络开销，而减少此时间值可提高域名转换的准确性。 本地域名服务器采用递归查询 本地域名服务器采用迭代查询 "},"page/1123.html":{"url":"page/1123.html","title":"WWW服务","keywords":"","body":"WWW服务 WWW的基本概念 WWW WWW（World Wide Web）也称为万维网、环球信息网、3W或WEB，是一个大规模的、联机式的信息储藏所。 万维网用链接的方法非常方便地从因特网上的一个站点访问另一个站点，从而主动地按需获取丰富的信息。这种访问方式称为“链接”。 万维网是分布式超媒体（hypermedia）系统，是超文本（hypertext）系统的扩充。 万维网的分布式超媒体系统 万维网设计目标 分布式信息系统； 对多重协议提供一个统一通用的接口； 对超媒体支持； 可扩充性，能够支持所有的数据格式 万维网必须解决的问题 （1）怎样标志分布在整个因特网上的万维网文档？ 使用统一资源定位符 URL (Uniform Resource Locator)来标志万维网上的各种文档。使每一个文档在整个因特网的范围内具有唯一的标识符 URL。 （2）用什么协议实现万维网上各种超链接？ 在万维网客户程序与万维网服务器程序之间进行交互所使用的协议，是超文本传送协议 HTTP (Hyper Text Transfer Protocol)。HTTP 是一个应用层协议，它使用 TCP 连接进行可靠的传送。 （3）怎样使各种万维网文档都能在因特网上的各种计算机上显示出来，同时使用户清楚地知道在什么地方存在着超链接？ 超文本标记语言 HTML (Hyper Text Markup Language)使得万维网页面的设计者可以很方便地用一个超链接从本页面的某处链接到因特网上的任何一个万维网页面，并且能够在自己的计算机屏幕上将这些页面显示出来。 （4）怎样使用户能够很方便地找到所需的信息？ 为了在万维网上方便地查找信息，用户可使用各种的搜索工具（即搜索引擎）。 统一资源定位器 定义 统一资源定位器，又叫URL（Uniform Resource Locator），是专为标识Internet网上资源位置而设的一种编址方式。现在已成为因特网标准RFC1738。 URL一般由四个部分组成 ​ 传输协议：//主机名或IP地址或域名/资源所在路径/文件名 ​ http://www.gov.cn/xinwen/2016-03/25/content_5058199.htm URL 的一般形式 ​ 由以冒号隔开的两大部分组成，并且在 URL 中的字符对大写或小写没有要求。 ​ URL 的一般形式是： 统一资源定位符是对可以从互联网上得到的资源的位置和访问方法的一种简洁的表示，是互联网上标准资源的地址。 互联网上的每个文件都有一个唯一的URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。 超文本传输协议 HTTP概述 HTTP的全称是Hypertext Transfer Protocol，即超文本传输协议。作为一种应用层协议，HTTP在可靠的网络层协议基础上提供了在Web服务器和客户之间传输 信息的一种机制，并规定了客户与服务器之间交互的各种消息。HTTP是一个应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。 HTTP实现Web上的文件传输，通过使用HTTP协议，客户可从Web服务器上下载几乎所有类型的文件，包括HTML文件，图像，视频／音频等多媒体文件，Java Applet等对象。客户也可以向Web服务器上传几乎所有类型的文件。HTTP还可以将用户在客户端输入 的各种信息提交给Web服务 器，从而实现基于Web的动态、交互式应用。 HTTP协议的主要特点： （1）支持客户/服务器模式。 （2）简单快速：客户向服务器请求服务时，只需传送请求方法和路径。 （3）灵活：HTTP允许传输任意类型的数据对象。 （4）无连接： （5）无状态：HTTP协议是无状态协议。 HTTP 有两类报文 请求报文——从客户向服务器发送请求报文。 响应报文——从服务器到客户的回答。 由于 HTTP 是面向正文的(text-oriented)，因此在报文中的每一个字段都是一些 ASCII 码串，因而每个字段的长度都是不确定的。 请求报文结构 HTTP 请求报文的一些方法 HTTP请求报文的例子 响应报文——从服务器到客户的回答。 响应报文结构 状态码都是三位数字 1xx 表示通知信息的，如请求收到了或正在进行处理。 2xx 表示成功，如接受或知道了。 3xx 表示重定向，表示要完成请求还必须采取进一步的行动。 4xx 表示客户的差错，如请求中有错误的语法或不能完成。 5xx 表示服务器的差错，如服务器失效无法完成请求。 HTTP响应报文的例子 HTTP 的操作过程 具体的操作过程如下： （1）用户点击鼠标后，浏览器分析超链指向页面的 URL。 （2）浏览器向 DNS 请求解析 www.163.com的 IP 地址。 （3）域名系统 DNS 解析出网易网站服务器的 IP 地址。 （4）浏览器与服务器建立 TCP 连接。 （5）浏览器发出取文件命令：GET / index.htm。 （6）服务器给出响应，把文件 index.htm 发给浏览器。 （7）TCP 连接释放。 （8）浏览器显示“访问网易”网站的主页文件 index.htm 中的所有文本。 超文本标记语言 超文本标记语言（HTML，Hypertext Markup Language）是加入了许多被称为标记（tag）的特殊字符串的普通文本文件。 HTML1.0在1993年6月作为互联网工程工作小组（IETF）工作草案发布（并非标准）。 HTML 2.0于1995年11月作为RFC 1866发布，在RFC 2854于2000年6月发布之后被宣布已经过时。 HTML 3.2在1997年1月14日发布，W3C推荐标准。 HTML 4.0——1997年12月18日，W3C推荐标准。HTML 4.01（微小改进）：1999年12月24日，W3C推荐标准。 HTML 5：2014年10月28日发布，W3C推荐标准。 HTML语言由标记、容器和属性组成 HTML Describing the appearance and contents of a page roses sunflowers daffodils "},"page/1124.html":{"url":"page/1124.html","title":"E-mail服务","keywords":"","body":"E-mail服务 电子邮件概述 电子邮件（e-mail）是因特网上最典型的服务之一，在因特网中出现最早，应用最普遍、最广泛。 因特网用户中90％以上都使用过电子邮件。电子邮件把邮件发送到收件人使用的邮件服务器，并放在其中的收件人邮箱中，收件人可随时上网到自己使用的邮件服务器进行读取。 这相当于因特网为用户设立了存放邮件的信箱，因此e-mail有时也称为“电子信箱”。 电子邮件方便、快捷、廉价的优点。 1982年，简单邮件传送协议（Simple Mail Transfer Protocol，SMTP）和Internet文本报文格式成为Internet的正式标准。 1993年，通用Internet邮件扩充（Multipurpose Internet Mail Extensions，MIME）协议在邮件首部中说明了邮件的数据类型（如文本、声音、图像、视频等），使得在MIME邮件可同时传送多种类型的数据。 电子邮件系统的组成 电子邮件系统有3个主要组成部分，即用户代理（User Agent，UA）、邮件服务器和简单件传输协议（SMTP）和邮件读取协议（如POP3）。 用户代理 UA (User Agent) 用户代理 UA 就是用户与电子邮件系统的接口，是电子邮件客户端软件。 用户代理的功能：撰写、显示、处理和通信。 邮件服务器的功能是发送和接收邮件，同时还要向发信人报告邮件传送的情况（已交付、被拒绝、丢失等）。 邮件服务器按照客户服务器方式工作。邮件服务器需要使用发送和读取两个不同的协议。 电子邮件的发送和接收过程 （1）发信人调用用户代理来编辑要发送的邮件。用户代理用SMTP把邮件传送给发送端邮件服务器。 （2）发送端邮件服务器将邮件放入邮件缓存队列中，等待发送。因为邮件过多，所以需要等待。如果想要避免缓冲溢出导致邮件丢失，发信人可以避开邮件收发高峰期后再发送邮件。 （3）运行在发送端邮件服务器的SMTP客户进程发现在邮件缓存中有待发送的邮件，就向运行在接收端邮件服务器的SMTP服务器进程发STCP连接的建立。 （4）TCP连接建立后，SMTP客户进程开始向远程的SMTP服务器进程发送邮件。当所有的待发送邮件发完了，SMTP就关闭所建立的TCP连接。 （5）运行在接收端邮件服务器中的SMTP服务器进程收到邮件后，将邮件放入收信人的用户邮箱中，等待收信人在方便时进行读取。 （6）收信人在打算收信时，调用用户代理，使用POP3（或IMAP）协议将自己的邮件从接收端邮件服务器的用户邮箱中取回（如果邮箱中有来信的话）。 电子邮件的组成 标准的电子邮件信息由两部分组成：邮件头（header）邮件体（body） 邮件头相当于“信封”，主要包括收件人地址、投递日期、邮件主题、发件人地址。 邮件体就是邮件正文、内容，相当于装在信封内的信。 邮件头中的一些主要关键词 RFC 822只规定了邮件内容中的首部（header）格式，而对邮件的主体（body）部分则让用户自由撰写。 Received：接收邮件的路径、日期、时间以及邮件代理程序的版本号。 From：表示邮件发送者，包括邮件地址和发送方的“真实姓名”。 Date：发信时间。 Message-ID：由传输代理分配给该邮件的唯一标识。 To：收件人的电子邮件地址。 Subject：邮件主题，是发件人写的，告诉收件人该邮件的目的。 Content-type：邮件正文的类型，是文本还是MIME格式。 Cc：表示抄送，它是“Carbon copy”的缩写，意为“复写副本”，它用来指定那些将收到该邮件副本的人的邮件地址。 电子邮件地址的格式 TCP/IP 体系的电子邮件系统规定电子邮件地址的格式如下： 收件人邮箱名@邮箱所在主机的域名 符号“@”读作“at”，表示“在”的意思。 例如，电子邮件地址 abc@163.com, abc这个用户名在该域名的范围内是唯一的。 163.com邮箱所在的主机的域名在全世界必须是唯一的 电子邮件相关协议 简单邮件传输协议 SMTP是因特网上通用的电子邮件传输协议。它的特点是简单明了，容易实现。SMTP定义了邮件格式及如何通过TCP连接传输邮件。SMTP使用25号端口在两个邮件服务器之间建立TCP连接。 SMTP协议由两个文档进行描述： RFC821：描述了邮件服务器之间如何转发邮件； RFC822：定义邮件信息的格式。 SMTP规定邮件的全部内容（包括附件），无论是什么类型的数据都必须转换成7位ASCII码进行传输。 SMTP所规定的就是在两个相互通信的SMTP进程之间应如何交换信息。由于SMTP使用客户/服务器方式，因此负责发送邮件的SMTP进程就是SIVITP客户，而负责接收邮件的SMTP进程就是SMTP服务器。 SMTP规定了1 4条命令和2 1种应答信息。每一条命令由4个字母组成。每一种应答 信息SMTP有一行信息，由一个3位数字的代码开始，后面可以附上很简单的文字说明。 SMTP定义了几个非常简单的命令用来进行邮件的发送，其中包括：HELO、MAIL FROM、RCPT TO、DATA、QUIT。 SMTP通信的3个阶段如下： （1）连接建立。连接是在发送主机的SMTP客户和接收主机的SMTP服务器之间建立的。SMTP不使用中间的邮件服务器。 （2）邮件传送。 （3）连接释放。邮件发送完毕后，SMTP应释放TCP连接。 一个用Telnet进行SMTP协议对话的例子 邮件读取协议POP3和IMAP 邮局协议 POP 是一个非常简单、但功能有限的邮件读取协议，现在使用的是它的第三个版本 POP3。 POP 也使用客户服务器的工作方式。 在接收邮件的用户 PC 机中必须运行 POP 客户程序，而在用户所连接的 ISP 的邮件服务器中则运行 POP 服务器程序。 互联网信息获取协议(Internet Message Access Protocol，IMAP)也按客户/服务器方式工作，现在较新的版本是IMAP4。 用户在自己的 PC 机上就可以操纵 ISP 的邮件服务器的邮箱，就像在本地操纵一样。 因此 IMAP 是一个联机协议。当用户 PC 机上的 IMAP 客户程序打开 IMAP 服务器的邮箱时，用户就可看到邮件的首部。若用户需要打开某个邮件，则该邮件才传到用户的计算机上。 IMAP 的特点 IMAP最大的好处就是用户可以在不同的地方使用不同的计算机随时上网阅读和处理自己的邮件。 IMAP 还允许收件人只读取邮件中的某一个部分。例如，收到了一个带有视像附件（此文件可能很大）的邮件。为了节省时间，可以先下载邮件的正文部分，待以后有时间再读取或下载这个很长的附件。 IMAP 的缺点是如果用户没有将邮件复制到自己的 PC 机上，则邮件一直是存放在 IMAP 服务器上。因此用户需要经常与 IMAP 服务器建立连接。 通用Internet电子邮件扩充协议 通用Internet电子邮件扩充协议（MIME）也称为多用途互联网邮件扩展类型（RFC 2045 ～2049 设定某种扩展名的文件用一种应用程序来打开，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。 MIME多用于指定一些客户端白定义的文件以及一些媒体文件的打开方式。 MIME概述 由于SMTP有以下缺点 （1）SMTP不能传送可执行文件或其他二进制对象。 （2）SMTP限于传送7位的ASCII码。许多其他非英语国冢的文字（如中文或俄文，甚至带重音符号的法文或德文）就无法传送。 （3）SMTP服务器会拒绝超过一定长度的邮件。 （4）某些SMTP的实现并没有完全按照RFC 821的SMTP标准。 MIME并没有改动或取代SMTP。 MIME的意图是继续使用目前的RFC 822格式，但增加了邮件主体的结构，并定义了传送非ASCII码的编码规则。 MIME很好地兼容并扩展了SMTP。 MIME 和 SMTP 的关系 MIME主要包括3个部分 （1）5个新的邮件首部字段，它们可包含在RFC 822首部中。这些字段提供了有关邮件主体的信息。 MIME增加5个新的邮件首部 （1）MIIVIE-Version：标志MIME的版本。现在的版本号是1.0。若无此行，则为英文文本。 （2）Content-Description：是可读字符串，说明此邮件是什么，和邮件的主题差不多。 （3）Content-Id：邮件的唯一标识符。 （4）Content-Transfer-Encoding：说明在传送时邮件的主体是如何编码的。 （5）Content-Type:说明邮件的性质。 （2）定义了许多邮件内容的格式，对多媒体电子邮件的表示方法进行了标准化。 （3）定义了传送编码，可对任何内容格式进行转换，而不会被邮件系统改变。 MIME内容类型 MIME中标准规定Content-Type说明必须含有两个标识符，即内容类型(type)和子类型( subtype)，中间用“／”分开。 MIME 标准定义了 7 个基本内容类型和 15 种子类型。 Content-Type有下面几种常见的类型： Text：用于标准化地表示的文本信息，文本消息可以是多种字符集和或者多种格式的； Multipart：用于连接消息体的多个部分构成一个消息，这些部分可以是不同类型的数据； Application：用于传输应用程序数据或者二进制数据； Message：用于包装一个E-mail消息； Image：用于传输静态图片数据； Audio：用于传输音频或者音声数据； Video：用于传输动态影像数据，可以是与音频编辑在一起的视频数据格式。 subtype用于指定type的详细形式。 content-type/subtype配对的集合和与此相关的参数，将随着时间而增长。 MIME内容传送编码 最简单的编码就是 7 位 ASCII 码，而每行不能超过 1000 个字符。MIME 对这种由 ASCII 码构成的邮件主体不进行任何转换。 另一种编码称为 quoted-printable，这种编码方法适用于当所传送的数据中只有少量的非 ASCII 码。 对于任意的二进制文件，可用 base64 编码。 "},"page/1125.html":{"url":"page/1125.html","title":"FTP服务","keywords":"","body":"FTP服务 文件传输协议概述 文件传输协议(File Transfer Protocol，FTP)是用于在网络上进行文件传输的一套标准协议。 文件传送协议能把多种类型的文件或文档从不同厂家生产的计算机、手机等智能终端通过有线或无线的计算机网络发送（复制）到远程的另一台计算机、手机等智能设备中。 文件传送并非很简单的问题 FTP是网络环境中的一项基本应用。 初看起来，在两个主机之间传送文件似乎是很简单的事情。 其实不然，原因是众多的 计算机厂商研制出的文件系统种类繁多，且差别非常大。 网络环境下复制文件的复杂性 （1）计算机存储数据的格式不同。 （2）文件的目录结构和文件命名的规定不同。 （3）对于相同的文件存取功能，操作系统使用的命令不同。 （4）访问控制方法不同。 FTP协议的特点 （1） FTP只提供文件传送的一些基本的服务，它使用TCP可靠的传输服务。 （2）FTP的主要功能是减少或消除在不同操作系统下处理文件的不兼容性。 （3）FTP使用客户／服务器方式。一个FTP服务器进程可同时为多个客户进程提供服务。FTP的服务器进程由两大部分组成：主进程负责接受新的请求，其他的若干个从属进程负责处理单个请求。 主进程的工作步骤 （1）打开熟知端口（端口号为21），使客户进程能够连接上。 （2）等待客户进程发出连接请求。 （3）启动从属进程来处理客户进程发来的请求。从属进程对客户进程的请求处理完毕后即终止，但从属进程在运行期间根据需要还可能创建其他一些子进程。 （4）回到等待状态，继续接受其他客户进程发来的请求。主进程与从属进程的处理是并发地进行的。 FTP 使用的两个 TCP 连接 两个不同的端口号 当客户进程向服务器进程发出建立连接请求时，要寻找连接服务器进程的熟知端口(21)，同时还要告诉服务器进程自己的另一个端口号码，用于建立数据传送连接。 接着，服务器进程用自己传送数据的熟知端口(20)与客户进程所提供的端口号码建立数据传送连接。 由于 FTP 使用了两个不同的端口号，所以数据连接与控制连接不会发生混乱。 使用两个不同端口号的好处 使协议更加简单和更容易实现。 在传输文件时还可以利用控制连接（例如，客户发送请求终止传输）。 FTP的文件传输过程 先建立控制连接（客户端发起）； 接下来建立数据连接； 最后是文件传输。 当数据传输完成后，先断开数据连接； FTP会话结束后，断开控制连接。 图示 "},"page/1126.html":{"url":"page/1126.html","title":"远程终端服务","keywords":"","body":"远程终端服务 Telnet概述 Telnet是一个简单的远程终端协议，也是Internet的正式标准。 用户使用Telnet可在本地通过TCP连接注册（即登录）到远程的另一台主机上（使用主机名或IP地址）。 Telnet能将用户的击键传到远地主机，同时也能将远地主机的输出通过TCP连接返 回到用户屏幕。这种服务是透明的，因为用户感觉到好像键盘和显示器是直接连在远程主机上。 Telnet也使用客户/服务器模式。在本地系统运行Telnet客户进程，而在远程主机则运行Telnet服务器进程。和FTP的情况相似，服务器中的主进程等待新的请求，并产生从属进程来处理每一个连接。 Telnet的NVT格式 Telnet定义的一些控制命令 Help：联机求助。 open：远程登录。 Close：正常结束远程会话，回到命令方式。 Display：显示工作参数。 Mode：进入行命令或字符方式。 Send：向远程主机传送特殊字符（输入send ?可显示详细字符）。 Set：设置工作参数（输入set ?可显示详细参数） Status：显示状态信息。 Toggle：改变工作参数（输入toggle?可显示详细参数）。 Quit：退出Telnet，返回本地机。 "},"page/1127.html":{"url":"page/1127.html","title":"DHCP服务","keywords":"","body":"DHCP服务 引导程序协议 引导程序协议（BOOT strap Protocol，BOOTP)也称为自举协议。BOOTP使用客户/服务器工作方式。 协议软件广播BOOTP请求报文，此报文作为用户数据报的数据，户数据报再作为IP数据报的数据。 收到请求报文的BOOTP服务器查找发出请求的计算机的各项配置信息，把配置信息放入BOOTP回答报文中，并把回答报文返回给提出请求的计算机。 由于计算机发送BOOTP请求报文时自己还没有IP地址，因此它使用全1广播地址（只在本网络上广播）作为目的地址，而用全0地址作为源地址。 BOOTP服务器可使用广播方式将回答报文返回给该计算机，或使用收到的广播帧上的硬件地址进行单播。只需发送一个BOOTP广播报文就可获取所需的全部配置信息。 动态主机配置协议 动态主机配置协议 DHCP 提供了即插即用连网(plug-and-play networking)的机制。这种机制允许一台计算机加入新的网络和获取IP地址而不用手工参与。DHCP是对BOOTP的扩展。 DHCP 使用客户服务器方式。需要 IP 地址的主机在启动时就向 DHCP 服务器广播发送发现报文（DHCPDISCOVER），这时该主机就成为 DHCP 客户。本地网络上所有主机都能收到此广播报文，但只有 DHCP 服务器才回答此广播报文。 DHCP 服务器先在其数据库中查找该计算机的配置信息。若找到，则返回找到的信息。若找不到，则从服务器的 IP 地址池(address pool)中取一个地址分配给该计算机。DHCP 服务器的回答报文叫做提供报文（DHCPOFFER）。 DHCP 中继代理 以单播方式转发发现报文 租用期(lease period) DHCP 服务器分配给 DHCP 客户的 IP 地址的临时的，因此 DHCP 客户只能在一段有限的时间内使用这个分配到的 IP 地址。DHCP 协议称这段时间为租用期。 租用期的数值应由 DHCP 服务器自己决定。 DHCP 客户也可在自己发送的报文中（例如，发现报文）提出对租用期的要求。 DHCP 协议的工作过程 "},"page/1128.html":{"url":"page/1128.html","title":"网络应用编程接口","keywords":"","body":"网络应用编程接口 应用编程接口与socket编程 当某个应用进程启动系统调用时，控制权就从应用进程传递给了系统调用接口。此接口再将控制权传递给计算机的操作系统。操作系统将此调用转给某个内部过程，并执行所请求的操作。内部过程一旦执行完毕，控制权就又通过系统调用接口返回给应用进程。系统调用接口实际上就是应用进程的控制权和操作系统的控制权进行转换的一个接口，即应用编程接口（API）。 应用进程通过插口接入到网络 Berkeley UNIX操作系统定义了一种API，它又称为插口接口(socket interface)。 微软公司在其操作系统中采用了插口接口API，形成了一个稍有不同的API，并称之为Winclows Socket。 AT&T为其UNIX系统V定义了一种API，简写为TLI(Transport Layer Interface，传输层接口)。 插口的作用 （1）当应用进程需要使用网络进行通信时就发出系统调用，请求操作系统为其创建 插口，以便把网络通信所需要的系统资源分配给该应用进程。 （2）操作系统用一个号码来表示这些资源的总和，并把此号码返回给应用进程。应用进程所进行的网络操作都必须使用这个号码。 （3）通信完毕后，应用进程通过一个关闭插口的系统调用通知操作系统回收与该号 码相关的所有资源。 插口和API是性质不同的接口 插口是应用进程和网络之间的接口，因为插口既包含有传输层与应用层之间的端口 号，又包含机器的IP地址。 在插口以上的进程是受应用程序控制的，而在插口以下的TCP协议软件以及TCP使用的缓存和一些必要的变量等则受计算机操作系统的控制。只要应用程序使用TCP/IP协议进行通信，它就必须通过插口与操作系统交互并请求其服务。应用程序的开发者对插口以上的应用进程具有完全的控制，但对插口以下的传输层却只有少量的控制。 API是从程序设计的角度定义的许多标准的系统调用函数。应用进程只要使用标准的系统调用函数就可得到操作系统的服务。在这个意义上讲，API是应用程序和操作系统之间的接口。 无连接循环服务与面向连接并发服务 服务器都可工作在两种不同的方式。 循环方式（iterative mode），在计算机中一次只运行一个服务器进程。当有多个客户进程请求服务时，服务器进程就按请求的先后顺序依次做出响应。 并发方式（concurrent mode），在计算机中同时运行多个服务器进程，而每一个服务器进程都对某个特定的客户进程做出响应。 无连接循环服务器 无连接循环服务器客户进程编程通信框架 面向连接并发服务器 面向连接并发服务器客户进程编程通信框架 "},"page/1042.html":{"url":"page/1042.html","title":"传输层","keywords":"","body":"传输层 TCP／IP的传输层 TCP与UDP TCP/IP 的传输层有两个不同的协议 （1）用户数据报协议 UDP（User Datagram Protocol） （2）传输控制协议 TCP（Transmission Control Protocol） 两个对等运输实体在通信时传送的数据单位叫作运输协议数据单元 TPDU (Transport Protocol Data Unit)。 往上都是协议加pdu 传输数据单位 TCP 传送的数据单位协议是 TCP 报文段(segment) UDP 传送的数据单位协议是 UDP 报文或用户数据报。 是否建立连接 UDP 在传送数据之前不需要先建立连接。对方的运输层在收到 UDP 报文后，不需要给出任何确认。虽然 UDP 不提供可靠交付，但在某些情况下 UDP 是一种最有效的工作方式。 是否发出只能依赖应用层，而不是下面层 网络通畅情况下，效率较高 TCP 则提供面向连接的服务。TCP 不提供广播或多播服务。由于 TCP 要提供可靠的、面向连接的运输服务，因此不可避免地增加了许多的开销。这不仅使TCP报文的首部增大很多，还要占用许多的处理机资源。 运输层的 UDP 用户数据报与网际层的IP数据报有很大区别。IP 数据报要经过互连网中许多路由器的存储转发，但 UDP 用户数据报是在运输层的端到端抽象的逻辑信道中传送的。 不论是tcp还是udp数据报，最终下一步还是要封装为ip数据报 TCP 报文段是在运输层抽象的端到端逻辑信道中传送，这种信道是可靠的全双工信道。但这样的信道却不知道究竟经过了哪些路由器（分层屏蔽了下层功能），而这些路由器也根本不知道上面的运输层是否建立了 TCP 连接。 传输层的端口 概述 从操作系统的角度来看，运行在计算机中的应用进程是用进程标识符来标识的。但传输层的实体却无法使用进程标识符来标识应用进程。 为了使运行不同操作系统的计算机的应用进程能够互相通信，必须用统一的方法对 TCP/IP 体系的应用进程进行标识。解决方法就是在传输层使用协议端口号(protocol port number)，或通常简称为端口(port) 比如mysql端口是3306 端口就是运输层服务访问点 TSAP。 端口的作用就是让应用层的各种应用进程都能将其数据通过端口向下交付给运输层，以及让运输层知道应当将其报文段中的数据向上通过端口交付给应用层相应的进程。 端口被占用，要求更换端口 不是真的端口，数据报中的一个数据体现 从这个意义上讲，端口是用来标志应用层的进程。 端口在进程之间的通信中所起的作用 安装不需要端口号，默认或者系统分配 端口用一个 16 bit 端口号进行标志。 端口号只具有本地意义，即端口号只是为了标志本计算机应用层中的各进程。在因特网中不同计算机的相同端口号是没有联系的。 到达运输层才有端口作用 三类端口 熟知端口 (well-known port)。其数值一般为 0~1023。这一类端口由ICANN负责分配给一些常用的应用层程序固定使用。 早期的，如http，80,20,21 记端口。数值一般为 1024~49151，由ICANN负责登记，防止重复。 3306mysql 动态端口。49152-65535，临时端口。 每次使用都是变化的 TCP/IP应用层的一些通用服务协议使用的端口 服务 端口 协议 文件传输服务 21 FTP 远程登录服务 23 TELNET 传输邮件服务 25 SMTP（邮件客户端） 用于万维网(WWW)的文本传输服务 80 HTTP 访问远程服务器上的邮件服务 110 POP3 互联网消息存取服务 143 IMAP4 安全的超文本传输服务 443 HTTPS 安全的远程登录服务 992 TELNETS 安全的消息存取服务 993 IMAPS 可以自定义，上面是默认 端口是用报文队列来实现 TCP 把连接作为最基本的抽象。 每一条 TCP 连接有两个端点。 TCP 连接的端点叫做套接字(socket)或插口。 端口号拼接到(contatenated with) IP 地址即构成了套接字。 每一条 TCP 连接唯一地被通信两端的两个端点（即两个套接字）所确定。 TCP 连接 ::= {socket1, socket2} = {(IP1: port1), (IP2: port2)} "},"page/1096.html":{"url":"page/1096.html","title":"TCP","keywords":"","body":"传输控制协议TCP TCP协议概述 TCP 是面向连接的运输层协议。采用面向报文段的通信机制 存储转发 TCP的主要特点 TCP 是面向连接的运输层协议。 每一条 TCP 连接只能有两个端点(endpoint)，每一条 TCP 连接只能是点对点的（一对一）。 TCP 提供可靠交付的服务。 TCP 提供全双工通信。 面向字节流。 TCP 面向字节流的概念： TCP 连接是一条虚连接而不是一条真正的物理连接。 TCP 对应用进程一次把多长的报文发送到TCP 的缓存中是不关心的。 TCP 根据对方给出的窗口值和当前网络拥塞的程度来决定一个报文段应包含多少个字节（UDP 发送的报文长度是应用进程给出的）。 TCP 可把太长的数据块划分短一些再传送。TCP 也可等待积累有足够多的字节后再构成报文段发送出去。 "},"page/1107.html":{"url":"page/1107.html","title":"TCP报文格式","keywords":"","body":"TCP报文格式 在指定进程间进行通信 源端口和目的端口字段 各占 2 字节 端口是运输层与应用层的服务接口 运输层的复用和分用功能都要通过端口才能实现 序号字段 占 4 字节 TCP 连接中传送的数据流中的每一个字节都编上一个序号 序号字段的值则指的是本报文段所发送的数据的第一个字节的序号。 确认号字段 占 4 字节 是期望收到对方的下一个报文段的数据的第一个字节的序号 数据偏移（即首部长度） 占 4 位，它指出 TCP 报文段的数据起始处距离 TCP 报文段的起始处有多远 “数据偏移”的单位是 32 位字（以 4 字节为计算单位） 保留字段 占 6 位 保留为今后使用，但目前应置为 0。 紧急 URG 当 URG = 1 时，表明紧急指针字段有效 它告诉系统此报文段中有紧急数据，应尽快传送(相当于高优先级的数据)。 推送 PSH (PuSH) 接收 TCP 收到 PSH = 1 的报文段 就尽快地交付接收应用进程，而不再等到整个缓存都填满了后再向上交付。 复位 RST (ReSeT) 当 RST = 1 时 表明 TCP 连接中出现严重差错（如由于主机崩溃或其他原因） 必须释放连接，然后再重新建立运输连接。 同步 SYN 同步 SYN = 1 表示这是一个连接请求或连接接受报文。 终止 FIN (FINis) 用来释放一个连接 FIN = 1 表明此报文段的发送端的数据已发送完毕，并要求释放运输连接。 窗口字段 占 2 字节 用来让对方设置发送窗口的依据，单位为字节。 检验和 占 2 字节 检验和字段检验的范围包括首部和数据这两部分 在计算检验和时，要在 TCP 报文段的前面加上 12 字节的伪首部 紧急指针字段 占 16 位 指出在本报文段中紧急数据共有多少个字节（紧急数据放在本报文段数据的最前面） 选项字段 长度可变。 TCP 最初只规定了一种选项，即最大报文段长度 MSS。 MSS是 TCP 报文段中的数据字段的最大长度 数据字段加上 TCP 首部，才等于整个的 TCP 报文段。 MSS 告诉对方 TCP：“我的缓存所能接收的报文段的数据字段的最大长度是 MSS 个字节。” 其他选项 窗口扩大选项 占 3 字节，其中有一个字节表示移位值 S 新的窗口值等于TCP 首部中的窗口位数增大到(16 + S)，相当于把窗口值向左移动 S 位后获得实际的窗口大小 时间戳选项 占10 字节 其中最主要的字段时间戳值字段（4 字节）和时间戳回送回答字段（4 字节） 填充字段 这是为了使整个首部长度是 4 字节的整数倍。 "},"page/1108.html":{"url":"page/1108.html","title":"TCP连接的建立与释放","keywords":"","body":"TCP连接的建立与释放 TCP连接的建立与释放 TCP的连接有三个阶段，即：连接建立、数据传送和连接释放。 TCP连接的建立 TCP连接建立过程中要解决以下三个问题 （1）要使每一方能够确知对方的存在。 （2）要允许双方协商一些参数（如最大报文段长度、最大窗口大小、服务质量等）。 （3）能够对实体资源（如缓存大小、连接表中的项目等）进行分配。 客户服务器方式 TCP 连接的建立都是采用客户服务器方式。 主动发起连接建立的应用进程叫做客户(client)。 被动等待连接建立的应用进程叫做服务器(server)。 用三次握手建立 TCP 连接 用三次握手建立 TCP 连接的各状态 TCP连接的释放 图示 四次握手释放连接 A 必须等待 2MSL 的时间 第一，为了保证 A 发送的最后一个 ACK 报文段能够到达 B。 第二，防止 “已失效的连接请求报文段”出现在本连接中。A 在发送完最后一个 ACK 报文段后，再经过时间 2MSL，就可以使本连接持续的时间内所产生的所有报文段，都从网络中消失。这样就可以使下一个新的连接中不会出现这种旧的连接请求报文段。 "},"page/1109.html":{"url":"page/1109.html","title":"TCP可靠传输的实现","keywords":"","body":"TCP可靠传输的实现 1.理想条件下的可靠传输 理想条件下的可靠传输必须满足两个假定： ①传输信道无差错，所传输的数据既不出错，也不丢失。 ②接收方缓存容量无限大。不管发送方以多快的速度发送数据，接收方总是来得及接收和处理收到的数据。 理想条件下的可靠传输 2.简单的停止等待协议 通过使用上述的确认和重传机制，我们就可以在不可靠的传输网络上实现可靠的通信。这种可靠传输协议常称为自动重传请求ARQ (Automatic Repeat reQuest)。 ARQ 表明重传的请求是自动进行的。接收方不需要请求发送方重传某个出错的分组 。 停止等待协议的优点是简单，但缺点是信道利用率太低 信道的利用率 U （6-1） 3.流水线传输 为了提高传输效率，发送方可以采用流水线传输 发送方可连续发送多个分组，不必每发完一个分组就停顿下来等待对方的确认。 由于信道上一直有数据不间断地传送，这种传输方式可获得很高的信道利用率。 累积确认 在流水线传输过程中，接收方采用一种累积确认的方式。即不必对收到的每个报文都发送确认，而是对按序到达的最后一个报文发送一次确认，这样表示到当前报文为止的所有报文都已经正确收到了。 累积确认的优点是：容易实现，即使确认报文丢失也不必重传。 后面的还要确认，相当于连前面一起确认了 缺点是：不能向发送方反映出接收方已经正确收到的所有报文的信息。 实际上流水线传输也是在理想条件下实现的可靠传输，实际的网络要考虑各种复杂情况，就要使用连续ARQ协议和滑动窗口协议 4.基于滑动窗口的连续ARQ协议 （1）滑动窗口的概念 TCP采用大小可变（根据流量和网络状况判断）的滑动窗口进行流量控制。窗口大小的单位是字节。 在TCP报文段首部的窗口字段写入的数值就是当前给对方设置的发送窗口数值的上限。 发送窗口在连接建立时由双方商定。但在通信的过程中，接收端可根据自己的资源情况随时动态地调整对方的发送窗口上限值（可增大或减小）。 TCP滑动窗口用来暂存两台计算机间要传送的数据分组。 每台运行TCP协议的计算机有两个滑动窗口：一个用于数据发送，另一个用于数据接收。 发送端待发数据分组在缓冲区排队等待送出。被滑动窗口框入的分组，是可以在未收到接收确认的情况下最多送出的部分。 滑动窗口左端的分组，是已经被接收端确认收到的分组。随着新的确认到来，窗口不断向右滑动。 滑动窗口的运行机制 ①发送方和接收方都具有一定容量的缓冲区（即窗口），允许发送方连续发送多个报文而不需要等待应答。 ②发送窗口就是发送端允许连续发送的TCP报文的序号表，用来对发送端进行流量控制。发送窗口的大小 WS 代表在还没有收到对方确认信息的情况下发送端最多可以连续发送的TCP报文数。 已发送未确认 ③接收窗口是接收方允许接收的报文的序号表，凡落在接收窗口内的TCP报文，接收方都必须处理。接收方每次允许接收的TCP报文数称为接收窗口的大小。 滑动窗口的关键 发送窗口的大小受接收窗口的控制，即WS≤WRW_S≤W_RWS​≤WR​ （2）基于滑动窗口的可靠传输的实现 TCP连接的每一端都必须设有两个窗口：一个发送窗口和一个接收窗口。 TCP 的可靠传输机制用字节的序号进行控制。 TCP 所有的确认都是基于序号而不是基于报文段。 TCP 两端的四个窗口经常处于动态变化之中。 根据 B 给出的窗口值A 构造出自己的发送窗口 TCP 标准强烈不赞成发送窗口前沿向后收缩 已发送数据被后缩，确认时信息是确认哪一个 发送缓存与接收缓存的作用 发送缓存用来暂时存放： 发送应用程序传送给发送方 TCP 准备发送的数据； TCP 已发送出但尚未收到确认的数据。 接收缓存用来暂时存放： 按序到达的、但尚未被接收应用程序读取的数据； 不按序到达的数据。 需要强调三点 A 的发送窗口并不总是和 B 的接收窗口一样大（因为有一定的时间滞后）。 TCP 标准没有规定对不按序到达的数据应如何处理。通常是先临时存放在接收窗口中，等到字节流中所缺少的字节收到后，再按序交付上层的应用进程。 TCP 要求接收方必须有累积确认的功能，这样可以减小传输开销。 （3）超时重传时间的选择 重传机制是 TCP 中最重要和最复杂的问题之一。 TCP 每发送一个报文段，就对这个报文段设置一次计时器。只要计时器设置的重传时间到但还没有收到确认，就要重传这一报文段。 由于 TCP 的下层是一个因特网环境，IP 数据报所选择的路由变化很大，因而传输层的往返时延的方差也很大。 往返时延的方差很大 加权平均往返时间 超时重传时间 RTO (RetransmissionTime-Out) 往返时延的测量相当复杂 修正的 Karn 算法 "},"page/1120.html":{"url":"page/1120.html","title":"TCP流量控制的实现","keywords":"","body":"TCP流量控制的实现 TCP流量控制就是控制发送方的发送数据量，让发送方的发送速率不要太快，不能超过接收方的接收能力，使得接收方来得及接收，也不要使网络发生拥塞。 接收方使用反馈机制，向发送方应答，报告自己当前的接收情况和能力。 接收能力由接收设备的处理速度、接收缓冲的容量等确定。 利用滑动窗口机制可以很方便地在 TCP 连接上实现流量控制。 流量控制举例 持续计时器(防止死锁) (persistence timer) TCP 为每一个连接设有一个持续计时器。 只要 TCP 连接的一方收到对方的零窗口通知，就启动持续计时器。 若持续计时器设置的时间到期，就发送一个零窗口探测报文段（仅携带 1 字节的数据），而对方就在确认这个探测报文段时给出了现在的窗口值。 若窗口仍然是零，则收到这个报文段的一方就重新设置持续计时器。 若窗口不是零，则死锁的僵局就可以打破了。 "},"page/1121.html":{"url":"page/1121.html","title":"TCP拥塞控制的实现","keywords":"","body":"TCP拥塞控制的实现 拥塞控制的概念 在某段时间，若对网络中某资源的需求超过了该资源所能提供的可用部分，网络的性能就要变坏——产生拥塞(congestion)。 出现资源拥塞的条件： 对资源需求的总和 > 可用资源 若网络中有许多资源同时产生拥塞，网络的性能就要明显变坏，整个网络的吞吐量将随输入负荷的增大而下降。 发送端的主机在确定发送报文段的速率时，既要考虑接收端的接收能力，又要从全局出发考虑不要使网络发生拥塞。 （1）接收端窗口WRW_RWR​(receiver window)，又称为通知窗口（advertised window），是接收端根据其目前的接收缓存大小所许诺的最新的窗口值，是来自接收端的流量控制。接收端将此窗口值放在TCP报文首部中的窗口字段，传送给发送端。 （2）拥塞窗口WCW_CWC​(congestion window)，是发送端根据自己估计的网络拥塞程度而设置的窗口值，是来自发送端的拥塞控制。 发送端的发送窗口的上限值应当取为接收端窗口rwnd和拥塞窗口cwnd这两个变量中较小的一个，即： 发送窗口的上限值=Min(WRW_RWR​，WCW_CWC​) （6-6） 当WRW_RWR​ WCW_CWC​时，是接收端的接收能力限制发送窗口的上限值。当WCW_CWC​WRW_RWR​时，则是网络的拥塞限制发送窗口的上限值。 拥塞控制所起的作用 慢开始和拥塞避免 慢开始 在主机刚刚开始发送报文段时，可先将拥塞窗口WC设置为一个最大报文段MSS的大小。在每收到一个对新的报文段的确认后，将拥塞窗口增加至两个MSS的数值。用这样的方法逐步增大发送端的拥塞窗口WC，可以使分组注入网络的速率更加合理。 慢开始和拥塞避免算法实现举例 乘法减小\u000b(multiplicative decrease) “乘法减小“是指不论在慢开始阶段还是拥塞避免阶段，只要出现一次超时（即出现一次网络拥塞），就把慢开始门限值 ssthresh 设置为当前的拥塞窗口值乘以 0.5。 当网络频繁出现拥塞时，ssthresh 值就下降得很快，以大大减少注入到网络中的分组数。 加法增大\u000b(additive increase) “加法增大”是指执行拥塞避免算法后，在收到对所有报文段的确认后（即经过一个往返时间），就把拥塞窗口 cwnd增加一个 MSS 大小，使拥塞窗口缓慢增大，以防止网络过早出现拥塞。 “拥塞避免”并非指完全能够避免了拥塞。利用以上的措施要完全避免网络拥塞还是不可能的。 “拥塞避免”是说在拥塞避免阶段把拥塞窗口控制为按线性规律增长，使网络比较不容易出现拥塞。 快重传和快恢复 快重传算法规定，发送端只要一连收到3个重复的ACK即可断定有分组丢失了，就应立即重传丢失的报文段，而不必继续等待为该报文段设置的重传计时器的超时 不难看出，快重传并非取消重传计时器，而是在某些情况下可更早地重传丢失的报文段。 快重传举例 快重传和快恢复算法 （1）当发送端收到连续3个重复的ACK时，就重新设置慢开始门限Sstresh。 （2）与慢开始不同之处是拥塞窗口WC不是设置为1，而是设置为慢开始门限Sstresh 减半后的数值，然后开始执行拥塞避免算法（“加法增大”），使拥塞窗口缓慢地线性增大。 （3）若发送窗口值还允许发送报文段，就按拥塞避免算法继续发送报文段。 快重传和快恢复算法的实现举例 "},"page/1076.html":{"url":"page/1076.html","title":"UDP","keywords":"","body":"用户数据报协议UDP UDP的特点 UDP 是无连接的，即发送数据之前不需要建立连接。 UDP 使用尽最大努力交付，即不保证可靠交付，同时也不使用拥塞控制。 UDP 是面向报文的。 UDP 没有拥塞控制，很适合多媒体通信的要求。 UDP 支持一对一、一对多、多对一和多对多的交互通信。 UDP 的首部开销小，只有 8 个字节。 基于报文队列的端口实现 发送方 UDP 对应用程序交下来的报文，在添加首部后就向下交付 IP 层。UDP 对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。 应用层交给 UDP 多长的报文，UDP 就照样发送，即一次发送一个报文。 接收方 UDP 对 IP 层交上来的 UDP 用户数据报，在去除首部后就原封不动地交付上层的应用进程，一次交付一个完整的报文。 应用程序必须选择合适大小的报文。 都由上下层处理，只是个中转站 UDP 是面向报文的 UDP数据报 用户数据报 UDP 有两个字段：数据字段和首部字段。 首部字段有 8 个字节，由 4 个字段组成，每个字段都是两个字节。 在计算检验和时，临时把“伪首部”和 UDP 用户数据报连接在一起。伪首部仅仅是为了计算检验和。 计算 UDP 检验和的例子 "},"page/1043.html":{"url":"page/1043.html","title":"网际层","keywords":"","body":"网际层 TCP/IP的网络层 网际协议 IP 及其配套协议 网际协议 IP 是 TCP/IP 体系中两个最主要的协议之一 。 与 IP 协议配套使用的还有四个协议： 地址解析协议 ARP(Address Resolution Protocol) 逆地址解析协议 RARP(Reverse Address Resolution Protocol) 因特网控制报文协议 ICMP(Internet Control Message Protocol) 因特网组管理协议 IGMP(Internet Group Management Protocol) "},"page/1072.html":{"url":"page/1072.html","title":"IP协议","keywords":"","body":"IP协议 "},"page/1073.html":{"url":"page/1073.html","title":"IP地址","keywords":"","body":"IP地址 IP地址概述 IP地址定义 IP 地址就是给每个连接在因特网上的主机（或路由器）分配一个在全世界范围内惟一的标识符。 IP 地址现在由因特网名字与号码分配机构（Internet Corporation for Assigned Names and Numbers ，ICANN）进行分配。 根据IP地址的长度不同，IP地址主要有两种版本：一是IPv4，长度为32bit；二是IPv6，长度为128bit。 IP 地址的编址方法 分类的IP地址 最基本的编址方法，在 1981 年通过了相应的标准协议。 子网地址 对最基本编址方法的改进，其标准[RFC 950]在 1985 年通过。 超网（CIDR地址） 比较新的无分类编址方法，1993 年提出后很快得到推广应用。 IPv6 128bit的地址。 IP地址编制方案的演变过程 IP地址的组成 IPv4 目前使用的IPv4是由32bit组成，每8位为一组，中间采用点”.”隔开，分别形成IP地址的网络地址和主机地址部分。为了便于记忆，一般采用点分十进制记法 。 点分十进制标记法：将32Bit的二进制数值转换成4个十进制数值，每个十进制数值小于等于255，4个十进制数值间用“.”隔开 例子 二进制IP地址 用点分十进制表示法表示成 202.93.120.44 IPv6 IPv6是由128bit组成，每16位为一组，中间采用点”：”隔开。为便于记忆，一般采用冒分十六进制记法表示。 如：68E6:8C64:FFFF:FFFF:0:1180:960A:FFF8 IPv6也有两部分组成：可变长度的类型前缀和其余部分。 IPv4 IP地址的分类 根据RFC1166的说明，IPv4的地址主要分为5类 A类地址1～126 用于主机数目非常多的大型或特大型网络。 B类地址128 ～ 191 用于中型到大型网络。 C类地址192 ～ 223 主要用于局域网。 D类地址224 ～ 239 用作多目广播，多址发送。 E类地址240 ～ 255 保留未用（作为实验地址）。 分类IP地址的特征 IP地址 ::= { , } 根据网络地址中第一字节的取值范围，可以确定IP地址所属的类别 A类 0 + NETid（7位）0-127 HOSTid（24位） B类 1 0 + NETid（14位）128-191 HOSTid（16位） C类 1 1 0 + NETid（21位）192-233 HOSTid(8位) D类 1 1 1 0 + 多目发送地址（28位）224 ～ 239 E类 1 1 1 1 0 240 ～ 255 保留未用 IPv4地址的使用范围 IP地址的定址准则 网络地址在INTERNET中必须是唯一的，在相同网络地址范围内，主机地址也必须是唯一的 网络地址不能是127，因为127地址用作本地回送地址 为每台主机本地所有，仅代表本地主机，不能用来分配。 一般使用127.0.0.1这个地址。 含有网络号127的数据报不可能出现在网络上。 网络地址部分和主机地址部分的每一位（Bit）不能全为0，也不能全为1 网络地址 全为0，该地址代表当前网络（this），不能传送 如：192.168.0.3为一台主机。而0.0.0.3代表当前网络（泛指）中主机地址为3的这台主机。 全为1( 255)，广播地址（all） 如：255.255.255.255用于本网广播，也叫有限广播。 主机地址 全为0 ，代表整个网络，即主机所连接的网络地址 如192.168.0.3对应的网络为192.168.0.0 全为1( 255) ，广播地址，代表网络上的所有主机 如192.168.0.255表示连接在网络192.168.0上的所有主机 可分配IP地址的分配方法 IP地址的分配方案 RFC1466（公共网IP地址分配） RFC1918（专用网IP地址分配） IP地址 全局（公共）IP地址―――公共主机 本地（专用）IP地址―――本地主机 RFC1918定义的专用IP地址如下： 10.0.0.0 －10.255.255.255 1个A类地址 172.16.0.0 －172.31.255.255 16个连续的B类地址 192.168.0.0－192.168.255.255 256个连续的C类地址 自动专用IP地址（APIPA） 169.254.0.1-169.254.255.254 单个子网自动配置 IP分配需注意的问题 小型网络使用C类地址，中型网络使用B类地址，大型网络使用A类地址 主机 连接到同一网络中所有主机的IP地址共享同一netid 路由器 路由器可以连接多个物理网络 每个连接都拥有自己的IP地址 每个IP地址的netid应与连接网络的netid相同 IP地址的规划 通常IP地址的规划可参照下面步骤进行： （1）分析网络规模，明确网络中所拥有的网段数量以及每个网段中可能拥有的最大主机数。 （2）根据网络规模确定所需要的网络类别和每类网络的数量。 （3）确定使用公用地址、私有地址还是两者混用。 （4）根据可用的地址资源为每台主机指定IP地址并在主机上进行相应的配置，在配置地址之前，还要考虑地址分配的方式。（静态分配、动态分配） 编址实例（3个C类地址，一个B类地址） IP地址 200.198.3.15 130.201.5.18 网络地址 200.198.3.0 130.201.0.0 该网络的直接广播地址 200.198.3.255 130.201.255.255 有限广播地址 255.255.255.255 255.255.255.255 回送地址 127.0.0.1 127.0.0.1 "},"page/1074.html":{"url":"page/1074.html","title":"IP协议","keywords":"","body":"IP协议 IP协议的作用与特点 IP协议提供的是无连接、不可靠的数据报传输服务 IP协议是一个支持异构网络互连的网络层协议 异构性和可扩展性 IP协议通过对IP数据报的有效定义，以统一的IP数据报传输提供了对异构网络互连的支持，将各种网络技术在物理层和数据链路层的差异统一在IP协议之下，向传输层屏蔽了通信子网的差异。 尤其是IP协议中所定义的IP寻址模式，有效实现了跨越不同LAN、MAN和WAN的主机寻址能力。 正是这种对异构网络互连的强大支持能力，IP协议才成为当今最为主流的网络互连协议 虚拟互联网络 因特网在IP层采用了标准化协议，参加互连的计算机都使用相同的网际协议IP。 因此可以将互连后的计算机网络看成一个虚拟互联网络。 ![img](https://img1.zlogs.net/20/20200115191427.png) ![img](https://img1.zlogs.net/20/20200115191428.png) 虚拟互连网络的意义 所谓虚拟互连网络也就是逻辑互连网络，它的意思就是互连起来的各种物理网络的异构性本来是客观存在的，但是我们利用 IP 协议就可以使这些性能各异的网络从用户看起来好像是一个统一的网络。 使用 IP 协议的虚拟互连网络可简称为 IP 网。 使用虚拟互连网络的好处是：当互联网上的主机进行通信时，就好像在一个网络上通信一样，而看不见互连的各具体的网络异构细节。 网络层的数字管道 如果我们只从网络层考虑问题，那么 IP 数据报就可以想象是在网络层的数字管道中传送。 ![img](https://img1.zlogs.net/20/20200115191429.png) IP协议是一个点到点的网络层协议。 "},"page/1075.html":{"url":"page/1075.html","title":"IP数据报","keywords":"","body":"IP数据报 版本 4bit 指 IP 协议的版本目前的 IP 协议版本号为 4 (即 IPv4) 首部长度 4 bit 可表示的最大数值是 15 个单位(一个单位为 4 字节) 因此 IP 的首部长度的最大值是 60 字节。 区分服务 8bir，用来获得更好的服务 在旧标准中叫做服务类型，但实际上一直未被使用过。 1998 年这个字段改名为区分服务。 只有在使用区分服务（DiffServ）时，这个字段才起作用。 在一般的情况下都不使用这个字段 总长度 16bit，指首部和数据之和的长度， 单位为字节，因此数据报的最大长度为 65535 字节。 总长度必须不超过最大传送单元 MTU。 标识 16bit 它是一个计数器，用来产生数据报的标识。 标志 3bit，但目前只有两个标志位有意义。 图示 MF (More Fragment) ： 1 表示后面“还有分片”， 0 表示最后一个分片。 DF (Don‘t Fragment) ： 0 允许分片，1不允许分片 片偏移 13bit 较长的分组在分片后，某片在原分组中的相对位置。 片偏移以 8 个字节为偏移单位。 【例5-1】 IP 数据报分片举例 假定一个IP数据报的总长度为3620字节，其数据部分长度为3600字节(使用固定长度首部)，需要分片为长度不超过1420字节的数据报片。因首部固定长度部分为20字节，因此每个数据报分片的数据部分长度不能超过1400字节。于是分为3个数据报片，其数据部分的长度分别为1400， 1400和800字节。初始数据报的首部被复制为各数据报分片的首部，但必须修改有关字段的值。 图示 生存时间 8bit，记为 TTL (Time To Live) 数据报在网络中可通过的路由器数的最大值。 协议 8bit 指出此数据报携带的数据使用何种协议 以便目的主机的 IP 层将数据部分上交给哪个处理过程 图示 首部检验和 16bit 只检验数据报的首部，不检验数据部分。 这里不采用 CRC 检验码而采用简单的计算方法 图示 源地址和目的地址 都各占 4bit 可变部分 可变部分就是一个选项字段 IP 首部的可变部分就是一个选项字段，用来支持排错、测量以及安全等措施，内容很丰富。 选项字段的长度可变，从 1 个字节到 40 个字节不等，取决于所选择的项目。 某些选项项目只需要1个字节，它只包括1个字节的选项代码。但还有些选项需要多个字节，这些选项一个个拼接起来，中间不需要有分隔符。 目前，这些任选项定义如下： ①安全和处理限制，用于军事领域； ②记录路径，让每个路由器都记下它的IP地址； ③时间戳（Time Stamp），让每个路由器都记下IP数据报经过每一个路由器的IP地址和当地时间； ④宽松的源站路由（Loose Source Route），为数据报指定一系列必须经过的IP地址； ⑤严格的源站路由（Strict Source Route），与宽松的源站路由类似，但是要求只能经过指定的这些地址，不能经过其他的地址。 填充 IP 数据报首部最后需用全0的填充字段补齐成为4字节的整数倍。 "},"page/1077.html":{"url":"page/1077.html","title":"子网划分","keywords":"","body":"子网划分 分类IP地址的面临的问题 在ARPANET早期，IP地址的设计不够合理 IP地址空间的利用率有时很低 给每个物理网络分配一个网络号使路由表变得太大，使网络的性能变坏 两级IP地址不够灵活 在一个冲突域里，好比同一个文件夹里面有好多文件 划分子网的思想（从两级 IP 地址到三级 IP 地址 ） 三级的 IP 地址 为解决上述问题，从 1985 年起在 IP 地址中又增加了一个“子网号字段”，使两级 IP 地址变成为三级 IP 地址。 这种做法叫作划分子网(sub netting) 。划分子网已成为因特网的正式标准协议。 划分子网的基本思路 划分子网纯属一个单位内部的事情。 从主机号借用若干个比特作为子网号 subnet-id。 从其他网络发送给本单位主机的 IP 数据报，仍然根据 IP 数据报的目的网络号 net-id，先找到连接在本单位网络上的路由器。 然后此路由器在收到 IP 数据报后，再按目的网络号 net-id 和子网号 subnet-id 找到目的子网。 最后就将 IP 数据报直接交付给目的主机。 子网划分(subnetting) 的优点 实现更小的广播域，减少网络流量； 更好的利用IP地址空间，提高网络性能； 使不同物理空间的主机使用同一网络地址，简化管理； 易于扩大地理范围。 划分子网的步骤 确定能够对哪个具体的网络地址进行子网划分。 根据现在所需的子网数以及每个子网中所包含的主机数，用主机号的一些比特位来表示子网。 划分子网的个数和每个子网中包含主机个数的公式计算： 假设子网号部分占用m个比特位数，主机号部分占用n个比特位数，那么子网数=2m2^m2m个；每个子网包含主机数=2n−22^n-22n−2台（不包含全0和全1的主机号）。 现在我们已经知道怎么划分了，就是分一个子网号段出来，可以怎么表示分出来，就是子网掩码和CIDR "},"page/1078.html":{"url":"page/1078.html","title":"子网掩码","keywords":"","body":"子网掩码 子网掩码 子网掩码的概念 通过IP数据报的首部并不知道源主机或目的主机所连接的网络是否进行了子网划分。 因为32位的IP地址本身以及IP数据报的首部都没有包含任何有关子网划分的信息。 假定一个数据报（目的地址是128.9.15.1）已到达连接网络（ 128.9.0.0 ）的路由器R1，如何把它转发到子网（ 128.9.15.0 ）去呢？ 子网掩码的构成 图示 网络地址= (IP 地址) AND (子网掩码) A 类、B 类和 C 类 IP 地址的默认子网掩码 子网掩码的使用 计算主机所在子网的子网地址 规划子网 【例5-2】 某校园网从ISP获得B类地址202.240.0.0，现在根据需要划分为240个子网，问子网掩码应该设置为多少？这240个子网应如何划分？校园网未划分子网的结构如图5-29所示。 图5-29 分析 根据子网划分需求，原来的B类地址网络号部分占16比特，主机号部分占16比特，对应B类网络的默认子网掩码255.255.0.0。 现在需要将原有的B类网络划分为240个子网， 因为27=128 新的子网掩码由默认的子网掩码255.255.0.0变为255.255.255.0 子网掩码中新增加的8个1对应IP地址中的子网号部分 划分子网前后子网掩码的变化 B类网络子网划分结果（使用固定子网掩码） 校园网划分子网后的结构 子网划分总结 若使用较少位数的子网号，则每一个子网上可连接的主机数就较多。反之，若使用较多位数的子网号，则子网的数目较多但每个子网上可连接的主机数就较少。 可根据网络的具体情况(一共需要划分多少个子网，每个子网中最多有多少个主机)来选择合适的子网掩码。 计算子网掩码，子网个数，子网内主机数；计算子网地址，子网广播地址 【例5-3】如果将一个C类网络192.168.1.0划分为4个子网，请问： ①新的子网掩码是多少？ 因为要划分为4个子网，而4=22（注：此处以工程应用为主，可以使用子网号部分全0或全1的子网，计算子网个数时不需要再减2），因此需要从主机号部分借用2个比特位表示相应子网，相应的子网掩码中由24个1增加为26个1。 255.255.255.0→255.255.255.192 图示 ②每个子网的主机数是多少？ 由于借用2位标识子网，因此剩余的表示主机的主机号部分只有8-2=6个比特位，所以每个子网的主机数=26-2=62台。 ③每个子网的子网地址？子网广播地址？子网内主机IP地址范围？ 由于划分子网并不改变IP地址的网络号部分，因此整个网络中的IP地址前24比特保持不变，借用来表示子网的2个bit 位的变化形式有4种，分别是00，01，10，11，剩余的6个比特位表示主机，变化范围是（00 0000）2→（11 1111）2，因为主机号部分全为0对应的IP地址是一个子网地址，主机号部分全为1对应的IP地址是一个子网广播地址，因此每个子网内主机IP地址的主机号部分变化范围是（00 0001）2→（11 1110）2，对应的地址个数是26-2=62个。 C类网络192.168.1.0 IP地址空间的变化情况 C类网络192.168.1.0的子网信息 "},"page/1079.html":{"url":"page/1079.html","title":"无类别域间路由地址（CIDR）","keywords":"","body":"无类别域间路由地址（CIDR） 因特网发展面临的必须尽早解决的问题 B类地址在1992年已分配了近一半，眼看就要在 1994 年 3 月全部分配完毕 因特网主干网的路由表项目数量急剧增长（从几千个增长到几万个）。 整个 IPv4 的地址空间最终将全部耗尽 无分类编址CIDR的出现 在RFC1009变长子网掩码 VLSM 的基础上又进一步研究出无分类编址方法，它的正式名字是无分类域间路由选择CIDR (Classless Inter-Domain Routing)。 1993年，RFC1517～1519、1520。 CIDR地址的特点 CIDR地址不分类 CIDR 消除了传统的 A 类、B 类和 C 类地址以及划分子网的概念，因而可以更加有效地分配 IPv4 的地址空间。 CIDR使用各种长度的“网络前缀”(network-prefix)来代替分类地址中的网络号和子网号。 IP 地址从三级编址（使用子网掩码）又回到了两级编址。 CIDR 还使用“斜线记法”(slash notation)，即CIDR记法，表示IP地址中网络前缀的长度，如128.15.48.34/20。 CIDR地址块 CIDR 将网络前缀都相同的连续的 IP 地址组成“CIDR地址块”。 一个CIDR地址块由地址块的起始地址和地址块中的地址数来定义。 CIDR地址块举例 CIDR地址块128.15.48.0/20，则： 地址块的起始地址： 128.15.48.0； 地址块中共有 212个地址； 地址块中的最小地址：128.15.48.0； 地址块中的最大地址：128.15.63.255； 地址块中全 0 和全 1 的主机号地址一般作为特殊地址使用，通常只使用在这两个地址之间的地址； 地址块的长度也可以用子网掩码来表示； CIDR地址块128.15.48.0/20的结构 CIDR地址块的应用 网络192.168.1.0和4个子网的IP地址范围 根据表5-9及CIDR地址块的定义，可以将网络192.168.1.0和4个子网表示成CIDR地址块的形式 网络：192.168.1.0/24 子网0：192.168.1.0/26 子网1：192.168.1.64/26 子网2：192.168.1.128/26 子网3：192.168.1.192/26 大小CIDR地址块之间的变化关系 ![img](https://img1.zlogs.net/20/20200115191627.png) CIDR地址块的应用举例 【例5-4】 有4个/24地址块：212.56.132.0/24，212.56.133.0/24，212.56.134.0/24，212.56.135.0/24。请试着进行最大可能的聚合。 分析 将4个地址块的前缀都转换为二进制，看是否有相同的网络前缀存在。 【例5-5】 有两个CIDR地址块208.128/11和208.130.28/22。是否有哪一个地址块包含了另一个地址？如果有，请指出，并说明理由 分析：地址块208.128/11的前缀为：11010000100 地址块208.130.28/22的前缀为：11010000100 00010 000111 可以看出它的前11位与208.128/11的前缀是一致的，所以208.128/11地址块包含了208.130.28/22这一地址块。 【例5-6】 假定某ISP已拥有一个地址块202.240.64.0/18。现在某大学需要1000个IP地址。ISP给该大学分配的地址块为202.240.68.0/22。这个大学有4个学院，其中计算机学院有主机500台，信息工程学院有主机252台，理学院有主机124台，法学院有主机124台。请试着为这4个学院分配地址块，并列出各个学院拥有的地址数及占用地址空间比例。 分析：ISP拥有的地址块202.240.64.0/18相当于64个C类网络的地址空间（24-18=6，262^626=64）。现在大学需要1000个IP地址。ISP给大学分配的地址块为202.240.68.0/22，它包括1024个IP地址（32-22=10，2102^{10}210=1024），相当于4个连续的C类网络（24-22=2，222^222=4），占该ISP拥有的地址空间的1/16。 根据4个学院拥有的主机数量给4个学院分配的地址块分别为： 计算机学院202.240.68.0/23，因为500台主机292^929，32-9=23； 信息工程学院202.240.70.0/24，因为252台主机282^828，32-8=24； 理学院202.240.71.0/25，因为124台主机272^727，32-7=25； 法学院202.240.71.128/25 ISP及大学地址块的分析结果 地址块 大学及各个学院拥有的地址数及地址空间比例 | 单位 | 地址块 | 二进制表示 | 地址数 | 地址空间比例 | | ------------ | ----------------- | ----------------------------- | ------ | ------------ | | ISP | 202.240.64.0/18 | 11001110.00000000.01 | 16384 | | | 大学 | 202.240.68.0/22 | 11001110.00000000.010001 | 1024 | 占ISP1/16 | | 计算机学院 | 202.240.68.0/23 | 11001110.00000000.0100010 | 512 | 占大学50% | | 信息工程学院 | 202.240.70.0/24 | 11001110.00000000.01000110. | 256 | 占大学25% | | 理学院 | 202.240.71.0/25 | 11001110.00000000.01000111.0 | 128 | 占大学12.5% | | 法学院 | 202.240.71.128/25 | 11001110.00000000.01000111.1 | 128 | 占大学12.5% | 地址聚合的概念 这个ISP共拥有64个C类网络。如果不采用CIDR技术，则在与该ISP的路由器交换路由信息的每一个路由器的路由表中，就需要有64个项目。 采用地址聚合后，只需要用路由聚合后的一个项目202.240.64.0/18就能找到该ISP。 同理，在ISP的路由器的路由表中，也只需要使用202.240.68.0/22这一个项目就能找到该大学。 这个大学共有4个学院，在大学的路由器的路由表中，只需要包含指向4个学院的路由信息就可以了。 路由聚合(route aggregation) 由于一个CIDR地址块中有很多地址，所以在路由表中可以利用CIDR地址块来表示目的网络。 这种地址聚合也称为路由聚合(route aggregation)，它使得路由表中的一个项目可以表示原来传统分类地址的很多个路由。 路由聚合也称为构成超网(super netting)。 路由聚合有利于减少路由器之间路由选择信息的交换，从而提高了整个因特网的性能。 最长前缀匹配 使用 CIDR 时，路由表中的每个项目由“网络前缀”和“下一跳地址”组成。 在查找路由表时可能会得到不止一个匹配结果。 应当从匹配结果中选择具有最长网络前缀的路由：最长前缀匹配(longest-prefix matching)。 网络前缀越长，其地址块就越小，因而路由就越具体(more specific) 。 最长前缀匹配又称为最长匹配或最佳匹配。 最长前缀匹配举例 收到的分组的目的地址 D = 202.240.71.128 路由表中的项目：202.240.68.0/22 （ISP） 202.240.71.128/25 （法学院） 查找路由表中的第 1 个项目 第 1 个项目 202.240.68.0/22 的掩码 M 有 22 个连续的 1。 M = 11111111 11111111 11111100 00000000 因此只需把 D 的第 3 个字节转换成二进制。 M = 11111111 11111111 11111100 00000000 AND D = 202. 240. 01000100. 0 202. 240. 01000100. 0 与 202.240.68.0/22 匹配 再查找路由表中的第 2 个项目 第2个项目 202.240.71.128/25 的掩码M有 25 个连续的1。 M = 11111111 11111111 11111111 10000000 因此只需把 D 的第 4 个字节转换成二进制。 M = 11111111 11111111 11111111 10000000 AND D = 202. 240. 71. 10000000 202. 240. 71. 10000000 与 202.240.71.128/25 匹配 D AND (11111111 11111111 11111100 00000000) = 202.240.68.0/22 匹配 D AND (11111111 11111111 11111111 10000000) = 202.240.71.128/25 匹配 选择两个匹配的地址中更具体的一个，即选择最长前缀的地址。 "},"page/1080.html":{"url":"page/1080.html","title":"网络地址转换（NAT）","keywords":"","body":"网络地址转换（NAT） 网络地址转换概述 RFC 1918为私有网络预留了3个IP地址块 类别 上述3个范围内的地址不会在Internet上被分配，可在公司或企业内部自由使用。 但任何以私有IP地址为目标的IP数据报都将被互联网路由器丢弃。 RFC 1631 IP地址翻译器（IP Network Address Translator，NAT）属于接入广域网(WAN)技术，是一种将私有（保留）地址转化为合法IP地址访问Internet的转换技术 核心是将私有地址转换为可以在公网上被路由的公有IP地址，它被广泛应用于各种类型Internet接入方式和各种类型的网络中。 NAT技术的作用 借助于NAT，使用私有保留地址的内部网络通过路由器发送数据包时，私有地址被转换成合法的公用IP地址，一个局域网只需使用少量IP地址（甚至是1个）即可实现私有地址网络内所有计算机与Internet的通信需求。 网络地址转换是将IP数据报报头中的IP地址转换为另一个IP地址的过程。 NAT主要用于实现私有网络访问公共网络的功能。这种通过使用少量的公有IP地址代表较多的私有IP地址的方式有助于减缓可用IP地址空间的枯竭。 NAT主要用于以下几种情况 （1）连接到Internet，但没有足够的合法地址分配给内部主机。 （2）更改到一个需要重新分配地址的ISP。 （3）有相同的IP地址的两个内部网络合并。 （4）想支持负载均衡（主机）。 NAT的几个相关术语 内部局部地址（Inside Local IP address） 指定内部网络的主机地址，全局唯一，但为私有地址。 内部全局地址（Inside Global IP address） 代表一个或更多内部IP到外部网络的合法IP。 外部全局地址（Outside Global IP address） 外部网络主机的合法IP。 外部局部地址（Outside Local IP address） 外部网络的主机地址，看起来是内部网络的私有地址。 简单转换入口（Simple Translation Entry） 映射IP地址到另一个地址的入口。 扩展转换入口（Extended Translation Entry） 映射IP地址和端口到另一个匹配的IP地址和端口的入口。 NAT的工作原理 外部主机向虚拟主机（定义为内部全局地址）通信 NAT路由器接受外部主机的请求并依据NAT表建立与内部主机的连接，把内部全局地址（目的地址）翻译成内部局部地址，并转发数据包到内部主机，内部主机接收包并作出响应。 NAT路由器再使用内部局部地址和端口查询数据表，根据查询到的外部地址和端口作出响应。 ISP使用NAT技术的结构 NAT技术的实现方式 静态转换 动态转换 端口多路复用 "},"page/1081.html":{"url":"page/1081.html","title":"ARP协议","keywords":"","body":"ARP协议 ARP协议工作原理 概述 因特网中的每个主机都具有一个唯一的IP地址，但IP地址只是一种在网络层标识主机的逻辑地址，不能直接利用它们在一个物理网络中传输。 意思就是，我们逻辑上可以通过分ip实现规划，但是真正传内容时，还是要找ip ARP是将ip转mac 只有将IP数据报封装在物理网络的数据链路层的数据帧中，才能实现IP数据报在物理网络中的传输。 为了在物理上实现IP分组的传输，需要网络层提供从主机IP地址到主机MAC地址的映射功能。 地址解析协议（Address Resolution Protocol ，ARP）正是实现这种功能的协议。 源主机和目的主机位于同一个网络 当网络层产生IP数据报时，源主机可以得知自己的IP地址和MAC地址以及目的主机的IP地址，但却不知道目的主机的MAC地址。只有获得目的主机的MAC地址，位于相同网络的两个主机才能直接进行物理通信。每个主机都有一个称为ARP表(ARP table)的高速缓存，存储网络中所有主机和路由器接口的IP地址与MAC地址的映射信息 Internet地址 物理地址 地址类型 TTL 192.168.10.1 aa-aa-aa-aa-aa-aa 动态 01:31:00 192.168.10.2 bb-bb-bb-bb-bb-bb 静态 01:32:00 当主机A欲向本局域网上的某个主机B发送IP数据报时，就先在其ARP高速缓存中查看有无主机B的IP地址。 如 有，就可查出其对应的硬件地址，再将此硬件地址写入MAC帧，然后通过局域网将该MAC帧发往此硬件地址。 如果查不到主机B的IP地址的项目，主机A就自动运行ARP协议，然后按以下步骤找到主机B的硬件地址。 （1）ARP在网内广播一个ARP请求分组。 ARP请求分组的内容是：“我的IP地址是192.168. 10. 1，MAC地址是aa-aa-aa-aa-aa-aa。我需要知道IP地址为192.168.10.2的主机的硬件地址”。这对应于图5-39中的步骤①。 （2）网络中所有运行ARP进程的主机都会收到此ARP请求分组。 （3）主机B发现ARP请求分组中的目的地址是自己的IP地址，就以单播方式向主机A发送ARP响应分组，并写入自己的MAC地址。而其他所有主机都不会响应这个ARP请求分组。ARP响应分组的主要内容是：“我的IP地址是192.168. 10. 2，MAC地址是bb-bb-bb-bb-bb-bb”。这对应于图5-39中的步骤②。 （4）主机A在收到主机B的ARP响应分组后，就会在自己的ARP表中写入主机B的IP地址到MAC地址的映射。至此，一次ARP交互过程结束。 ARP 高速缓存的作用 当主机A不久后再向主机B发送数据报时，会发现其ARP表中存在主机B的IP地址与MAC地址的映射项目，因此无需再经过上面的ARP过程了。 为了减少网络上的通信量，主机 A 在发送其 ARP 请求分组时，就将自己的 IP 地址到硬件地址的映射写入 ARP 请求分组。 当主机 B 收到 A 的 ARP 请求分组时，就将主机 A 的这一地址映射写入主机 B 自己的 ARP 高速缓存中。这样主机 B 以后向 A 发送数据报时就更方便了。 “arp -a\"就可以查看ARP缓存中的内容 用“arp -d\"命令可以删除ARP缓存中所有的内容。 用“arp -s\"命令可以在ARP缓存中添加IP地址与MAC地址的映射关系，类型为static（静态） zander@zander-PC  ~/Desktop  arp -a OpenWrt.lan (172.16.0.2) at 00:0c:29:e0:8e:bc [ether] on wlp0s20f3 ? (172.16.0.1) at 00:1a:a9:15:2b:01 [ether] on wlp0s20f3 ? (172.16.1.0) at d8:c8:e9:b2:d0:fd [ether] on wlp0s20f3 为什么我们不直接使用硬件地址进行通信？ 是可行的，但是特别麻烦，所以不用 交换机不可能记住所有无规则的mac（厂商有规律，但是没用） 由于全世界存在着各式各样的网络，它们使用不同的硬件地址。要使这些异构网络能够互相通信就必须进行非常复杂的硬件地址转换工作，因此几乎是不可能的事。 连接到因特网的主机都拥有统一的 IP 地址，它们之间的通信就像连接在同一个网络上那样简单方便，因为调用 ARP 来寻找某个路由器或主机的硬件地址都是由计算机软件自动进行的，对用户来说是看不见这种调用过程的。 源主机和目的主机位于不同网络 （1）主机A用网络1的网络地址192.168. 10. 0/24与目的主机D所在网络2的网络地址192.168.20. 0/24进行比较，发现它们不在同一个子网。因此，主机A与主机D的通信是间接交付过程。 主机A首先要将IP数据报转发给本网络的默认网关（一般情况下是交换机接口，发给谁，经过谁中转，即图5-41中路由器R连接网络1的接口，必须同一子网，默认网关不一定前三段一样，子网掩码作用），为此它首先要确定默认网关的MAC地址。由于主机A通常配置有默认网关的IP地址，因此它通过运行ARP就能获得默认网关的MAC地址00-00-00-00-00-00，这对应于图5-41中的步骤①。 （2）主机A与默认网关之间进行数据帧的传送。这对应于图5-41中的步骤②。 （3）网络1上的路由器收到链路层数据帧后，向上传递给路由器的网络层。此时，路由器利用其路由转发功能确定转发该数据报的正确接口。路由器通过查询转发表让该数据报通过路由器接口192.168.20.1转发，这对应于图5-41中的步骤③ （4）路由器接口192.168.20.1将目的主机的IP地址与网络2的网络地址进行比较，发现两者位于同一个子网，可以采用直接交付方式传输数据报。这对应图5-41中的步骤④。路由器接口192.168.20.1运行ARP，通过主机D的IP地址得到其MAC地址dd-dd-dd-dd-dd-dd。 （5）路由器接口192.168.20.1的适配器向主机D的适配器传输数据帧。这对应于图5-41中的步骤⑤。至此完成了两个位于不同网络的主机之间传送数据报的过程。如果源主机和目的主机之间有多个路由器，则可能多次重复上述步骤③。 使用 ARP 的四种典型情况 发送方是主机，要把IP数据报发送到本网络上的另一个主机。这时用 ARP 找到目的主机的硬件地址。 发送方是主机，要把 IP 数据报发送到另一个网络上的一个主机。这时用 ARP 找到本网络上的一个路由器的硬件地址。剩下的工作由这个路由器来完成。 发送方是路由器，要把 IP 数据报转发到本网络上的一个主机。这时用 ARP 找到目的主机的硬件地址。 发送方是路由器，要把 IP 数据报转发到另一个网络上的一个主机。这时用 ARP 找到本网络上的一个路由器的硬件地址。剩下的工作由这个路由器来完成。 ARP报文格式 （1）硬件类型：16比特，指明了发送方想知道的硬件接口类型，以太网的值为1； （2）协议类型：16比特，指明了发送方提供的高层协议类型，IP为0X0800（16进制）； （3）硬件地址长度：8比特，指明了每种硬件地址的字节长度，对于MAC地址长度，此处的值为6； （4）协议长度：8比特，指明了高层协议地址的长度，对于IP地址长度，此处值为4。这样ARP报文就可以在任意硬件和任意协议的网络中使用； （5）操作类型：16比特，用来表示这个报文的类型，ARP请求为1，ARP响应为2，RARP请求为3，RARP响应为4； （6）发送方硬件地址（0-3字节）：源主机硬件地址的前4个字节； （7）发送方硬件地址（4-5字节）：源主机硬件地址的后2个字节； （8）发送方IP地址（0-1字节）：源主机IP地址的前2个字节； （9）发送方IP地址（2-3字节）：源主机IP地址的后2个字节； （10）目标硬件地址（0-1字节）：目的主机硬件地址的前2个字节； （11）目标硬件地址（2-5字节）：目的主机硬件地址的后4个字节； （12）目标IP地址（0-3字节）：目的主机的IP地址。 IP数据报的转发过程 直接交付和间接交付 （1）直接交付：发送数据报接口的IP地址与目的主机IP地址在同一个网络中时，也就是发送端接口IP地址和子网掩码按位“与”操作的结果等于目的主机的IP地址和子网掩码按位“与”操作的结果。则发送端接口直接将IP数据报发送到目的主机。 （2）间接交付：发送数据报接口IP地址与目的IP地址不在同一个网络中，则发送端接口需要发送IP数据报到与下一个路由器相连的端口。在数据报间接交付过程中，在同一个网络内使用物理地址（MAC地址）转发，只有通过路由器在不同网络中转发时才使用IP地址。 IP数据报转发过程 在 IP 层抽象的互联网上只能看到 IP 数据报图中的 IP1→IP2IP_1→IP_2IP1​→IP2​ 表示从源地址IP1IP_1IP1​ 到目的地址 IP2IP_2IP2​ 两个路由器的 IP 地址并不出现在 IP 数据报的首部中 路由器只根据目的站的 IP 地址的网络号进行路由选择 在具体的物理网络的链路层只能看见 MAC 帧而看不见 IP 数据报 IP层抽象的互联网屏蔽了下层很复杂的细节,在抽象的网络层上讨论问题，就能够使用,统一的、抽象的 IP 地址,研究主机和主机或主机和路由器之间的通信 IP地址和MAC地址在不同层次、不同区间的变化 链路区间 网络层IP数据报首部中的IP地址 网络层IP数据报首部中的IP地址 数据链路层MAC帧首部中的MAC地址 数据链路层MAC帧首部中的MAC地址 源地址 目的地址 源地址 目的地址 PC1→R1 IP1 IP2 HA1 HA3 R1→R2 IP1 IP2 HA4 HA5 R2→PC2 IP1 IP2 HA6 HA2 "},"page/1082.html":{"url":"page/1082.html","title":"ICMP协议","keywords":"","body":"ICMP协议 概述 为了提高 IP 数据报交付成功的机会，在网际层使用了网际控制报文协议 ICMP (Internet Control Message Protocol)。 ICMP 允许主机或路由器报告差错情况和提供有关异常情况的报告。 ICMP 不是高层协议，而是 IP 层的协议。 ICMP 报文作为 IP 层数据报的数据，加上数据报的首部，组成 IP 数据报发送出去。 ICMP报文 ICMP报文的种类 ICMP 报文的种类有两种，即 ICMP 差错报告报文和 ICMP 询问报文。 ICMP 报文的前 4 个字节是统一的格式，共有三个字段：即类型、代码和检验和。 接着的 4 个字节的内容与 ICMP 的类型有关。 ICMP 报文的格式 类型字段及代码字段的值与ICMP报文类型的对应关系 ICMP差错报告报文共有五种 \u000b（1）终点不可达：路由器或主机不能交付数据报时，就向源站发送目的站不可达报文。 \u000b（2）源站抑制：路由器或主机由于拥塞而丢弃数据报时，就向源站发送源站抑制报文，使源站知道应当放慢速率。 （3）时间超时：路由器收到生存时间为零的数据报时，除丢弃数据报外，还要向源站发送时间超时报文。 （4）参数问题：路由器或目的主机收到的数据报的首部中有的字段的值不正确时，就丢弃该数据报，并向源站发送参数问题报文。\u000b （5）改变路由：路由器将改变路由报文发送给主机，让主机知道下次应将数据报发送给另外的路由器。 ​ 不应发送 ICMP 差错报告报文的几种情况 对 ICMP 差错报告报文不再发送 ICMP 差错报告报文。 对第一个分片的数据报片的所有后续数据报片都不发送 ICMP 差错报告报文。 对具有多播地址的数据报都不发送 ICMP 差错报告报文。 对具有特殊地址（如127.0.0.0 或 0.0.0.0）的数据报不发送 ICMP 差错报告报文。 ICMP 询问报文有两种 回送请求和回答报文时 间戳请求和回答报文 ​ 下面的几种 ICMP 报文不再使用 信息请求与回答报文 掩码地址请求和回答报文 路由器询问和通告报文 ICMP的应用举例 连通性测试程序ping PING 用来测试两个主机之间的连通性。 PING 使用了 ICMP 回送请求与回送回答报文。 PING 是应用层直接使用网络层 ICMP 的例子，它没有通过运输层的 TCP 或UDP。 Windows系统的用户的用户可在接入因特网后转入MS-DOS（点击“开始”，点击“运行”，再输入“ cmd ”）。看见屏幕上的提示符后，就键入“ping hostname” (这里的hostname是要测试连通性的主机名或它的IP地址)，按回车键后就可看到结果 路径追踪程序traceroute traceroute程序是ICMP的另一种非常有用的应用。 该程序允许跟踪从一个主机或一台路由器到世界上其他任意一个主机或路由器之间的路由。 为了判断源主机和目的主机之间所有路由器的数量和标识（名字和IP地址），源主机中的traceroute向目的主机发送ICMP报文序列。这些报文关键在于IP数据报的TTL字段中进行特殊设置。 "},"page/1083.html":{"url":"page/1083.html","title":"IP路由与路由协议","keywords":"","body":"IP路由与路由协议 概念 路由与路由选择 路由是为了将IP数据报送达目标主机所在的网络而进行的最佳路径的选择。 就是解决“何去何从”的问题。 路由器将所有关于如何到达目标网络的最佳路径信息以数据库表的形式存储起来，这种专门用于存放路由信息的表被称为路由表。 路由器的功能 （1）实现在网络层的网络互连和路由选择 （2）建立并维护路由表。 （3）路由器可实现网络层及其以下各层的协议转换。 （4）提供网络间的分组转发功能。 路由器的结构 路由器是一种具有多个输入端口和输出端口的专用计算机。 可以直接将电脑改成路由器 路由器的任务是转发分组。即将路由器某个端口收到的分组，按照分组要到达的目的网络，将该分组从某个合适的输出端口转发给下一跳路由器。下一跳路由器也按照这种方法处理分组，直到该分组到达目的网络为止。 路由器转发分组是网络层的主要工作。 交换机mac地址，数据链路层的 整个路由器分为两大部分：路由选择和分组转发两部分。 路由选择部分也叫控制部分，核心构件是路由选择处理机。路由选择处理机的任务是根据所选定的路由选择协议构造出路由表，同时经常或定期地和相邻路由器交换路由信息而不断的更新和维护路由表。 分组转发部分分为：交换构件、一组输入端口和一组输出端口。 输入输出是相对的，本次输入下次可能输出 交换构件又叫交换组织，作用是根据转发表对分组进行处理，将某个输入端口进入的分组从一个合适的输出端口转发出去。 在路由器的输入输出端口里面都各有三个方框，用方框中的1,2,3分别代表物理层、数据链路层和网络层的处理模块。 物理层进行比特的接收。 数据链路层按链路层协议接收传送分组的帧。 在将帧的首部和尾部剥去后，分组被送入网络层的处理模块。 若接收到的分组是路由器之间交换路由信息的分组，则将分组送交路由选择处理机。若接收到的是数据分组，则按照分组首部中的目的地址查找转发表，根据得出的结果，分组就经过交换构件到达合适的输出端口。 交换结构 输入端口对线路上收到的分组的处理 数据链路层剥去帧首部和尾部后，将分组送到网络层的队列中排队等待处理。这会产生一定的时延。 交换结构传送过来的分组先进行缓存。数据链路层处理模块将分组加上链路层的首部和尾部，交给物理层后发送到外部线路。 路由器的工作原理 （1）路由选择 路由选择就是路由器依据目的IP地址的网络地址部分，通过路由选择算法确定一条从源节点到达目的节点的最佳路由。 路由器需要确定它的下一跳路由器的IP地址，即选择到达下一个路由器的路由，再按照选定的下一跳路由器的IP地址，将数据包转发给下一跳路由器。通过这样一跳一跳地沿着选好的路由转发数据分组，最终把分组传送到目的主机。 路由选择的核心就是确定下一跳路由器的IP地址（静态路由、动态路由）。 （2）分组转发 分组转发也称为分组交换，主要完成按照路由选择所指定的路由将数据分组从源节点转发到目的节点。路由器在接收到一个数据分组时，首先查看数据分组头部的目的IP地址字段，根据目的1P地址的网络地址部分（1P地址分为网络部分和主机号部分）去查询路由表。 ①如果表中给出的是到达目的网络地址的下一跳路由器的IP地址，则按照路由表给出的路径转发。 ②如果目的网络u是与路由器一个端口直接相连的，那么就直接发往该端口。 直接给端口1，需要经过端口1，效果是一样的 ③如果路由表中没有下一跳路由器地址，也没有找到目的端口，就将数据分组转发给默认路由。 比如里面找不到，就给外网口 （3）路由表 目的地址 子网掩码 下一跳地址 100.0.0.0 255.255.255.0 20.0.0.1 200.0.0.0 255.255.255.0 30.0.0.1 0.0.0.0 0.0.0.0 10.0.0.1 路由器转发IP数据报的流程 (1) 从收到的分组的首部提取目的 IP 地址 D。 (2) 先用各网络的子网掩码和 D 逐比特相“与”，看是否和相应的网络地址匹配。若匹配，则将分组直接交付。否则就是间接交付，执行(3)。 (3) 若路由表中有目的地址为 D 的特定主机路由，则将分组传送给指明的下一跳路由器；否则，执行(4)。 (4) 对路由表中的每一行的子网掩码和 D 逐比特相“与”，若其结果与该行的目的网络地址匹配，则将分组传送给该行指明的下一跳路由器；否则，执行(5)。 (5) 若路由表中有一个默认路由，则将分组传送给路由表中所指明的默认路由器；否则，执行(6)。 (6) 报告转发分组出错。 静态路由与动态路由 一个理想的路由算法应一些特点： 算法必须是正确的和完整的。 算法在计算上应简单。 算法应能适应通信量和网络拓扑的变化，这就是说，要有自适应性。 算法应具有稳定性。 算法应是公平的。 算法应是最佳的。 从路由算法的自适应性考虑 静态路由选择策略——即非自适应路由选择，其特点是简单和开销较小，但不能及时适应网络状态的变化。 某个ip必须经过哪些结点，安全，相当于专线 动态路由选择策略——即自适应路由选择，其特点是能较好地适应网络状态的变化，但实现起来较为复杂，开销也比较大。 根据繁忙程度 静态路由 静态路由是由网络管理员手工配置的路由信息。 静态路由一般适用于比较简单的网络环境，优点是简单、高效、可靠。 哪些是固定的 静态路由信息在缺省情况下是私有的，不会传递给其他的路由器。 traceroute是**隐私 静态路由是在路由器中设置的固定的路由表，不能对网络的改变作出反映，需要手工去修改。 配置静态路由步骤： ①确定目的网络的地址和掩码，确定下一跳地址或转发数据包的本地接口。 ②进入全局配置模式。 ③使用ip route 命令添加路由。 ④退出全局配置模式。 ⑤使用copy running-config startup-config 或wr命令将配置保存到nvram里面。 缺省路由 缺省路由（也称为默认路由）也是一种特殊的静态路由。 作用是当路由表中不存在到某一目的网络的项目时，路由器使用缺省路由对数据包进行转发。 没有缺省路由，目的地址在路由表中无匹配表项的IP数据报将被丢弃。 缺省路由可有管理员静态地输入或者通过路由选择协议被动态地学到。 有两条不同的命令来静态地配置缺省路由： “ip router 0.0.0.0 0.0.0.0” “ip defaultnetwork” 候选缺省路由在路由表中是用星号来标注的，并且被认为是最后的网关。 检查静态路由配置可使用以下命令： Show running-config Show ip route 还可以使用命令： Show interface查看接口的状态 Show ip route 查看路由表 Ping 下一条路由器接口地址 Ping 远端路由器或主机 Traceroute远端路由器或主机 动态路由 大型和复杂的网络环境通常不宜采用静态路由。 一方面，网络管理员难以全面地了解整个网络的拓扑结构； 另一方面，当网络的拓扑结构和链路状态发生变化时，路由器中的静态路由信息需要大范围地调整，这一工作的难度和复杂程度非常高。 动态路由是网络中的路由器之间相互通信，传递路由信息，利用收到的路由信息更新路由器表的过程。 它能实时地适应网络结构的变化。 动态路由适用于网络规模大、网络拓扑复杂的网络。 因特网采用分层次的路由选择协议 因特网的规模非常大。 许多单位不愿意外界了解自己单位网络的布局细节和本部门所采用的路由选择协议（这属于本部门内部的事情），但同时还希望连接到因特网上。 自治系统 AS(Autonomous System) 自治系统 AS 的定义：在单一的技术管理下的一组路由器，而这些路由器使用一种 AS 内部的路由选择协议和共同的度量以确定分组在该 AS 内的路由，同时还使用一种 AS 之间的路由选择协议用以确定分组在 AS之间的路由。现 在对自治系统 AS 的定义是强调下面的事实：尽管一个 AS 使用了多种内部路由选择协议和度量，但重要的是一个 AS 对其他 AS 表现出的是一个单一的和一致的路由选择策略。 因特网有两大类路由选择协议 内部网关协议 IGP (Interior Gateway Protocol) 即在一个自治系统内部使用的路由选择协议。目前这类路由选择协议使用得最多，如 RIP 和 OSPF 协议。 外部网关协议EGP (External Gateway Protocol) 若源站和目的站处在不同的自治系统中，当数据报传到一个自治系统的边界时，就需要使用一种协议将路由选择信息传递到另一个自治系统中。这样的协议就是外部网关协议 EGP。在外部网关协议中目前使用最多的是 BGP-4。 自治系统和内部网关协议、外部网关协议 这里要指出两点 因特网的早期 RFC 文档中未使用“路由器”而是使用“网关”这一名词。但是在新的 RFC 文档中又使用了“路由器”这一名词。应当把这两个属于当作同义词。 网关即路由器 IGP 和 EGP 是协议类别的名称。但 RFC 在使用 EGP 这个名词时出现了一点混乱，因为最早的一个外部网关协议的协议名字正好也是 EGP。因此在遇到名词 EGP 时，应弄清它是指旧的协议 EGP 还是指外部网关协议 EGP 这个类别。 TCP是具体协议，tcpip也是协议族 因特网的路由选择协议 内部网关协议 IGP：具体的协议有多种，如 RIP 和 OSPF 等。 外部网关协议 EGP：目前使用的协议就是 BGP。 路由选择算法常用的度量标准 （1）带宽（bandwidth）：链路的数据容量。 （2）延迟（delay）：分组沿着从源到目的的每条链路移动所需的时间。 （3）负载（load）：网络资源的活动量。 （4）可靠性（reliability）：每个网络链路的错误率。 （5）跳数（hop count）：分组到达目的地之前必须经过的路由器个数。 （6）滴答数（ticks）：使用IBM PC时钟滴答计数的数据链路延迟。 （7）代价（cost）：由管理员指派的基于带宽、花费等的度量值。 "},"page/1069.html":{"url":"page/1069.html","title":"RIP路由协议","keywords":"","body":"RIP路由协议 RIP协议概述 路由信息协议( routing information protocol，RIP)是IP网络中使用得最早、应用最广泛的AS内部路由选择协议。 RIP是一种分布式的基于距离向量的路由选择协议，是因特网的标准协议。 在RFC 1058中定义了RIPv1版本， RFC 2453中定义了它的向后兼容版本RIPv2。 RIPv1使用跳数(hop count)作为费用测度，即将每条链路的费用均设为1。 路由器，路口 跳数是沿着从源路由器到目的子网（包括目的子网）的最短路所经过的子网数量，IP数据报每经过一台路由器，跳数就加1。 “距离”的定义 从一个路由器到直接连接的网络的距离定义为 1。 从一个路由器到非直接连接的网络的距离定义为所经过的路由器个数加 1。 RIP 协议中的“距离”也称为“跳数”(hop count)，因为每经过一个路由器，跳数就加 1。 路由器个数，即加入第一个路由器 这里的“距离”实际上指的是“最短距离”， （最少的跳数） RIP 认为一个好的路由就是它通过的路由器的数目少，即“距离短”。 RIP 允许一条路径最多只能包含 15 个路由器。 “距离”的最大值为16 时即相当于不可达。可见 RIP 只适用于小型互联网。 RIP 不能在两个网络之间同时使用多条路由。RIP 选择一个具有最少路由器的路由（即最短路由），哪怕还存在另一条高速(低时延)但路由器较多的路由。 最少路由优先 RIP 协议的三个要点 仅和相邻路由器交换信息。 经过什么，可以到达什么 交换的信息是当前本路由器所知道的全部信息，即自己的路由表。 按固定的时间间隔交换路由信息(如每隔 30 秒)。 路由表的建立 路由器在刚刚开始工作时，只知道到直接连接的网络的距离（此距离定义为1）。 以后，每一个路由器也只和数目非常有限的相邻路由器交换并更新路由信息。 经过若干次更新后，所有的路由器最终都会知道到达本自治系统中任何一个网络的最短距离和下一跳路由器的地址。 RIP 协议的收敛(convergence)过程较快，即在自治系统中所有的结点都得到正确的路由选择信息的过程。 出错过程较慢，即发现错误信息时 距离向量（Ford-Fulkerson ）算法 收到相邻路由器（其地址为 X）的一个 RIP 报文： (1) 先修改此 RIP 报文中的所有项目：把“下一跳”字段中的地址都改为 X，并把所有的“距离”字段的值加 1。 (2) 对修改后的 RIP 报文中的每一个项目，重复以下步骤： 若项目中的目的网络不在路由表中，则把该项目添加到路由表中。 否则若下一跳字段给出的路由器地址是同样的，则把收到的项目替换原路由表中的项目。 否则若收到项目中的距离小于路由表中的距离，则进行更新， 否则，什么也不做。 (3) 若 3 分钟还没有收到相邻路由器的更新路由表，则把此相邻路由器记为不可达路由器，即将距离置为16（距离为16表示不可达）。 则中间隔着一个，要想知道坏了，至少3.5分钟 (4) 返回。 路由器之间交换信息 RIP协议让互联网中的所有路由器都和自己的相邻路由器不断交换路由信息，并不断更新其路由表，使得从每一个路由器到每一个目的网络的路由都是最短的（即跳数最少）。 虽然所有的路由器最终都拥有了整个自治系统的全局路由信息，但由于每一个路由器的位置不同，它们的路由表当然也应当是不同的。 刚开始加电时的路由表 第一次更新路由表 下一跳，下一个路由器 第二次更新路由表 RIP2 协议的报文格式 RIP2 的报文由首部和路由部分组成。 RIP2 报文中的路由部分由若干个路由信息组成。每个路由信息需要用 20 个字节。地址族标识符（又称为地址类别）字段用来标志所使用的地址协议。 路由标记填入自治系统的号码，这是考虑使RIP 有可能收到本自治系统以外的路由选择信息。再后面指出某个网络地址、该网络的子网掩码、下一跳路由器地址以及到此网络的距离。 RIP 协议的优缺点 RIP 存在的一个问题是当网络出现故障时，要经过比较长的时间才能将此信息传送到所有的路由器。 RIP 协议最大的优点就是实现简单，开销较小。 RIP 限制了网络的规模，它能使用的最大距离为 15（16 表示不可达）。 路由器之间交换的路由信息是路由器中的完整路由表，因而随着网络规模的扩大，开销也就增加。 RIPv 1与RIPv2的比较 （1）RIPv1是有类路由(classful)协议，它们在宣告路由信息时不携带网络掩码。RIPv2是无类路由(classless)协议，它们在宣告路由信息时携带网络掩码。 v1相当于默认掩码B-255.255.0.0 （2）RIPv1是广播发送RIP报文，广播地址为255. 255. 255. 255。RIPv2支持广播也支持多播发送RIP报文，多播地址为224.0.0.9。发送广播是给所有路由器包括网络中的主机，而多播只发送给使用该协议的路由器。与广播相比多播明显节省带宽。 v1主机会收到报文，V2只有路由器会收到 RIP路由自环分析 由于RIP距离向量路由选择算法有一个慢收敛问题 路由选择协议更新信息时具有好消息传播得快，而坏消息传播得慢的特点。 这个问题将导致不一致性产生，从而产生路由自环。 只有R1最先知道，其他都要加到16才知道 RIP协议使用以下机制减少路由自环 （1）水平分割。 （2）毒化翻转。 （3）保持定时器法。 （4）触发更新法。 # "},"page/1070.html":{"url":"page/1070.html","title":"OSPF路由协议","keywords":"","body":"OSPF路由协议 OSPF协议概述 开放最短路径优先（ open shortest path first，OSPF）是另一种广泛应用于因特网AS内部的链路状态路由协议。 使用链路状态路由算法 通常用于区域ISP或本地ISP网络，网络规模可以很大 开放(open) 一词是指路由选择协议规范是公众可免费使用的。最短路径优先是因为使用了公开发表的Dijkstra提出的最短路径算法SPF RFC 2328，适用于IPv4，OSPFv2 RFC 5340，适用于IPv6，OSPFv3 三个要点 向本自治系统中所有路由器发送信息，这里使用的方法是洪泛法。 发送的信息就是与本路由器相邻的所有路由器的链路状态，但这只是路由器所知道的部分信息。 “链路状态”就是说明本路由器都和哪些路由器相邻，以及该链路的“度量”(metric)。 度量可以是如发出返回时长 只有当链路状态发生变化时，路由器才用洪泛法向所有路由器发送此信息。 链路状态数据库(link-state database) 由于各路由器之间频繁地交换链路状态信息，因此所有的路由器最终都能建立一个链路状态数据库。 这个数据库实际上就是全网的拓扑结构图，它在全网范围内是一致的（这称为链路状态数据库的同步）。 OSPF 的链路状态数据库能较快地进行更新，使各个路由器能及时更新其路由表。OSPF 的更新过程收敛得快是其重要优点。 OSPF基本特点 （1）支持无类域间路由（CIDR）。 （2）支持区域划分。 （3）无路由自环。 （4）路由变化收敛速度快。 （5）使用IP组播收发协议数据。 （6）支持多条等值路由。 （7）支持协议报文的认证。 泛洪相当于是触发的 OSPF的区域划分 为了使 OSPF 能够用于规模很大的网络，OSPF 将一个自治系统再划分为若干个更小的范围，叫作区域。 每一个区域都有一个 32 位的区域标识符（用点分十进制表示）。 区域也不能太大，在一个区域内的路由器最好不超过 200 个。 OSPF 划分为两种不同的区域 划分区域 划分区域的好处就是将利用洪泛法交换链路状态信息的范围局限于每一个区域而不是整个的自治系统，这就减少了整个网络上的通信量。 网3坏了，R8不需要知道 在一个区域内部的路由器只知道本区域的完整网络拓扑，而不知道其他区域的网络拓扑的情况。 网3想给网8， OSPF 使用层次结构的区域划分。在上层的区域叫作主干区域(backbone area)。主干区域的标识符规定为0.0.0.0。主干区域的作用是用来连通其他在下层的区域。 OSPF协议的报文结构 OSPF 的分组类型 类型1，问候(Hello)分组。 类型2，数据库描述(Database Description)分组。 类型3，链路状态请求(Link State Request)分组。 类型4，链路状态更新(Link State Update)分组， 用洪泛法对全网更新链路状态。 类型5，链路状态确认(Link State Acknowledgment) 分组。 OSPF的基本操作 OSPF 使用的是可靠的洪泛法 "},"page/1071.html":{"url":"page/1071.html","title":"BGP路由协议","keywords":"","body":"BGP路由协议 BGP协议概况 边界网关协议（Border Gateway Protocol，BGP）是唯一的外部网关路由协议，主要用来在AS之间传递路由信息，是一种距离矢量的路由协议。 由于因特网的规模太大，使得自治系统之间的路由选择非常困难。对于自治系统之间的路由选择，要寻找最佳路由是很不现实的。 当一条路径通过几个不同 AS 时，要想对这样的路径计算出有意义的代价是不太可能的。 比较合理的做法是在 AS 之间交换“可达性”信息。自治系统之间的路由选择必须考虑有关策略。 因此，边界网关协议 BGP 只能是力求寻找一条能够到达目的网络且比较好的路由，而并非要寻找一条最佳路由。 BGP协议特点 （1）实现自治系统间通信，传播网络的可达信息。 （2）多个BGP路由器之间的协调。 （3）BGP支持基于策略的路由（policy-base routing）。 （4）可靠的传输。 （5）路径信息。 （6）增量更新。 （7）BGP支持无类型编制（CIDR）及VLSM方式。 （8）路由聚集。 （9）BGP还允许接收方对报文进行鉴别和认证 BGP工作机制 BGP 发言人和自治系统 AS 的关系 BGP有两种邻居：IBGP和EBGP 图示 BGP的邻居关系（或称通信对端/对等实体）是通过人工配置实现的，对等实体之间通过TCP（端口179）会话交互数据。BGP路由器会周期地发送19字节的保持存活keep-alive消息来维护连接（默认周期为30秒）。 同一个自治系统中的两个或多个对等实体之间运行的BGP 被称为 IBGP（Internal/Interior BGP）。 归属不同的AS的对等实体之间运行的BGP称为EBGP（External/Exterior BGP）。 BGP路由通告原则 存在多条路径时，BGP Speaker只选取最优的使用（非负载分担）。 BGP Speaker只把自己使用的路由通告给相邻体 BGP Speaker从EBGP获得的路由会向它所有BGP相邻体通告（包括EBGP和IBGP） BGP Speaker从IBGP获得的路由不向它的IBGP相邻体通告 BGP Speaker 从IBGP获得的路由是否通告给它的EBGP相邻体要依IGP和BGP同步的情况来决定 连接一建立，BGP Speaker按照以上原则，把自己所有BGP路由通告给新相邻体 BGP Speaker只把自己使用的最优的路由加入到路由表中 BGP的路由属性 （1）必遵属性 （2）可选属性 （3）过渡属性 （4）非过渡属性 路由属性分为两大类四小类 （1）公认属性 公认必遵（Well-known mandatory） 公认可选（Well-known discretionary） （2）可选属性 可选过渡（Optional transitive） 可选非过渡（Optional non-transitive） 常见BGP路由属性 Origin AS-Path Next hop MED Local-Preference Atomic-Aggregate Aggregator Community Originator-ID Cluster-List Destination Pref (MCI) Advertiser (Baynet) Rcid-Path (Baynet) MP_Reach_NLRI MP_Unreach_NLRI Extended_Communities BGP的消息类型 Open消息 Open消息是TCP连接建立后发送的第一个消息，用于建立BGP对等体之间的连接关系。 Keepalive消息 BGP会周期性地向对等体发出Keepalive消息，用来保持连接的有效性。 Update消息 Update消息用于在对等体之间交换路由信息。它既可以发布可达路由信息，也可以撤销不可达路由信息。 Notification消息 当BGP检测到错误状态时，就向对等体发出Notification消息，之后BGP连接会立即中断。 BGP 报文具有通用的首部 "},"page/1044.html":{"url":"page/1044.html","title":"网络接口层","keywords":"","body":"网络接口层 "},"page/1045.html":{"url":"page/1045.html","title":"ISO/OSI参考模型","keywords":"","body":"ISO/OSI参考模型 定义 1974年美国的IBM公司研制的系统网络体系结构SNA，是现在世界上使用广泛的一种网络体系结构，因难以与其它体系结构互联互通，逐渐退出了历史舞台。 为了使不同体系结构的计算机网络都能互连，国际标准化组织ISO于1977年提出了开放系统互连参考模型OSI RM（Open Systems Interconnection Reference Model）,1983年形成了OSI模型的正式文件，即ISO7498，是七层协议的体系结构。 国际标准化组织在1977年成立了一个分委员会专门研究网络通信的体系结构问题,并提出了开放系统互连参考模型,它是一个定义异种计算机连接标准的框架结构。OSI为连接分布式应用处理的“开放”系统提供了基础。所谓“开放”,是指任何两个系统只要遵守参考模型和有关标准就能够进行互连。OSI采用了层次化结构的构造技术。 ISO分委员会的任务是定义一组层次和每一层所完成的功能和服务。层次的划分应当从逻辑上将功能分组,层次应该足够多,应使每一层小到易于管理的程度,但也不能太多,否则汇集各层的处理开销太大。 OSI参考模型结构 OSI\u000b\u000b开放系统互连参考模型 OSI参考模型具有以下特性。 (1) 它是一种将异构系统互连的分层结构。 (2) 提供了控制互连系统交互规则的标准框架。 (3) 定义了一种抽象结构,而并非具体实现的描述。 (4) 不同系统上相同层的实体称为同等层实体。 (5) 同等层实体之间的通信由该层的协议管理。 (6) 相邻层间的接口定义了原语操作和低层向高层提供的服务。 (7) 所提供的公共服务是面向连接的或无连接的数据服务。 (8) 直接的数据传送仅在最低层实现。 (9) 每层完成所定义的功能,修改本层的功能并不影响其他层。 | 面向对象 | 层 | 功能 | | | | | | ------------ | ---------- | -------- | ---- | ---- | ---- | ---- | | 面向信息处理 | 应用层 | 用户功能 | | | | | | 面向信息处理 | 表示层 | 用户功能 | | | | | | 面向信息处理 | 会话层 | 用户功能 | | | | | | 面向数据通道 | 传输层 | 用户功能 | | | | | | 面向数据通道 | 网络层 | 网络功能 | | | | | | 面向数据通道 | 数据链路层 | 网络功能 | | | | | | 面向数据通道 | 物理层 | 网络功能 | | | | | | | | | | | | | ## OSI参考模型各层的功能 OSI/RM中的1 〜 3层主要负责通信功能,一般称为通信子网层。上三层(即5 〜 7层)属于资源子网的功能范畴,称为资源子网层。传输层起着衔接上、下三层的作用。对各层的说明如下。 (1)物理层 ( Physical Layer)。 物理层提供为建立、维护和拆除物理链路所需的机械、电气、功能和规程的特性;提供有关在传输介质上传输非结构的位流及物理链路故障检测指示。 用户要传递信息就要利用一些物理媒体,如双绞线、同轴电缆等,但具体的物理媒体并不在OSI的7层之内,有人把物理媒体当作第0层,物理层的任务就是为它的上一层提供一个物理连接,以及它们的机械、电气、功能和过程特性。例如规定使用电缆和接头的类型,传送信号的电压等。在这一层,数据还没有被组织,仅作为原始的位流或电气电压处理,单位是位。 > 交换机等其他物理媒介在不在7层，也是第0层？\"如双绞线、同轴电缆等,但具体的物理媒体\"指的是？ ``` 物理层是最重要、最基础的一层，位于OSI参考模型的最低层。 物理层为数据链路层提供服务，屏蔽了具体使用的通信介质与设备通信方式的差异。 主要任务是为通信双方提供数据传输的物理连接，并实现透明传输比特流。 物理层的功能如下： ①为两个数据链路层实体之间数据的传输建立、维持和拆除相应的物理连接。 ②位同步传输。在物理连接上的数据传输一般是串行传输。物理层要保证按位传输的信息的正确性。 ③物理层管理。管理物理层内的一切活动。 ④实现机械特性、电气特性、功能特性和规程特性的匹配。 ``` (2) 数据链路层 ( Data Link Layer)。 数据链路层负责在两个相邻结点间的线路上无差错地传送以帧为单位的数据,并进行流量控制。每一帧包括一定数量的数据和一些必要的控制信息。 和物理层相似,数据链路层要负责建立、维持和释放数据链路的连接。在传送数据时,如果接收点检测到所传数据中有差错,就要通知发送方重发这一帧。 ``` 数据链路层的主要任务是检测并校正物理传输介质上产生的差错，负责从源端到目的端数据链路信息的传输与控制，如建立、维护与拆除连接，差错控制与恢复，异常情况处理，信息格式等，形成一条无差错的链路。 链路是两个相邻节点间传输信息的物理线路。链路间没有任何其他节点，可分为物理链路和逻辑链路。 ①物理链路：两个节点间的实际传输线路，也成为链路 ②逻辑链路：在物理链路的基础上加上实现协议的硬件和软件，也称为数据链路。 数据链路层数据的传输单位是帧，也是分组的具体体现。 数据链路层有如下功能： ①数据链路的建立、维持和拆除。链路两端的结点在通信前要先建立数据链路，在传输过程中也要维持，并在传输完毕后拆除相应的数据链路。 ②数据帧同步。数据帧首部和尾部用来表示数据帧的开始与结束，接收方必须能够明确地从物理层收到的比特流中区分出完整的数据帧，以便进行同步。 ③差错控制。数据帧信息在传输过程中可能会出现差错。通常采用检错、重发方式等差错控制技术保证数据传输的正确性。 ④流量控制。通过采取一定措施使网络中部分或全部链路上的信息流量不超过规定的阈值，以保证信息传输通畅顺利。 ``` (3) 网络层(Network Layer)。 网络层为传输层实体提供端到端的交换网络数据功能,使得传输层摆脱路由选择、交换方式和拥挤控制等网络传输细节;可以为传输层实体建立、维持和拆除一条或多条通信路径;对网络传输中发生的不可恢复的差错予以报告。 在计算机网络中进行通信的两个计算机之间可能会经过很多个数据链路,也可能还要经过很多通信子网。网络层的任务就是选择合适的网间路由和交换结点,确保数据及时传送。网络层将数据链路层提供的帧组成数据包,包中封装有网络层包头,其中含有逻辑地址信息,即源站点和目的站点的网络地址。 ``` 网络层处于通信子网的最高层，用于管理和控制通信子网的相关操作。它体现了资源子网对通信子网的访问方式。网络层的协议数据单元是数据分组（包）。 网络层的主要任务是在数据链路层的基础上，实现通信子网内部的连接，并向传输层提供端到端的数据传输，为报文或分组通过通信子网以最佳路径到达目的主机。对于跨越多个网络的实体，网络层还需要提供网络互连和路由选择服务等。 网络层有以下功能： ①网络连接的建立、维持与拆除。为传输层实体之间的通信提供服务。 ②路由选择：在通信子网中根据一定路由选择算法，选择一条从源结点到目的结点的最佳路由。 ③流量控制。对整个通信子网内的数据流量和布进行控制与管理，以免发生网络阻塞和死锁，进而提高通信子网的传输效率和吞吐量。 ④网络层需要对通信子网中传输的数据进行控制与同步，包括组包、拆包、重装以及包信息的同步。 ``` (4) 传输层(TransportLayer)。 传输层为会话层实体提供透明、可靠的数据传输服务,保证端到端的数据完整性;选择网络层能提供最适宜的服务;提供建立、维护和拆除传输连接功能。传输层根据通信子网的特性最佳地利用网络资源,为两个端系统(也就是源站和目的站)的会话层之间提供建立、维护和取消传输连接的功能,并以可靠和经济的方式传输数据。在这一层,信息的传送单位是报文。 ``` OSI参考模型中最低三层面向数据通信，是基于最低三层通信协议构成的通信子网的通信功能集合；最高三层则是由主机进程所面向应用功能的集合。传输层则是OSI参考模型中面向应用的高层与面向通信的低层之间的接口层。 OSI参考模型中负责通信的最高层是传输层，网络中两个主机间端到端的可靠通信要依赖传输层。传输层是OSI参考模型中用户功能的最低层，也是唯一负责数据传输与控制的层次。 传输层的功能： ①传输层传输连接的建立、维持和拆除管理。 ②寻址。传输层的寻址可以正确识别网络上两台主机间相互通信的应用进程。 ③多路复用。传输层支持向上的复用，即一个传输层协议可同时支持多个进程连接，可将多个进程连接绑定在一个虚电路或数据报的网络连接上；传输层也支持向下的复用，即一个传输层可以使用多个网络连接。 ④流量控制。传输层需要对发送端实体发向接收端实体的数据流实施端到端的流量控制，使其不超过接收端的接收能力。 ⑤差错控制。传输层面向连接的可靠传输服务需要传输层提供如重传策略、重复检测和故障恢复等的差错控制机制。 ``` (5) 会话层(SessionLayer)。 会话层为彼此合作的表示层实体提供建立、维护和结束会话连接的功能;完成通信进程的逻辑名字与物理名字间的对应;提供会话管理服务。 这一层也可以称为会话层或对话层,在会话层及以上的高层中,数据传送的单位不再另外命名,统称为报文。会话层不参与具体的传输,它提供包括访问验证和会话管理在内的建立和维护应用之间通信的机制。例如服务器验证用户登录便是由会话层完成的。 ``` 会话层是使用传输层提供的端到端服务，向表示层提供会话服务，为表示层实体或用户进程提供连接并有序地传输数据。会话服务是在传输连接的基础上，在会话层实体之间建立会话连接。 会话层功能如下： ①提供会话连接的建立、数据传送和释放功能。 ②管理会话双方的会话活动，包括对单工、半双工、全双工数据传送方式的设定和会话权限管理。 ③在数据传送流中可以插入适当的同步点，会话用户可以在发生差错是从双方确认的同步点重新开始。 ``` (6) 表示层 ( Presentation Layer)。 表示层为应用层进程提供能解释所交换信息含义的一组服务,即将要交换的数据从适合于某一用户的抽象语法转换为适合于0SI系统内部使用的传送语法;提供格式化的表示和转换数据服务。数据的压缩、解压缩、加密和解密等工作都由表示层负责。 ``` 表示层是为应用进程之间传输的信息提供表示服务，处理与语法有关的语法转换和上下文控制服务。 表示层的功能是表示连接的管理、语法转换和上下文表示控制。 ``` (7) 应用层 ( Application Layer)。 应用层提供0SI用户服务,即确定进程之间通信的性质,以满足用户需要以及提供网络与用户应用软件之间的接口服务。例如,事务处理程序、电子邮件和网络管理程序等。 ``` OSI参考模型的最高层是应用层，即用户与网络的界面。它是主机应用进程利用OSI参考模型的唯一窗口，向应用进程提供了OSI参考模型所有层次的综合服务。应用进程借助应用实体、应用协议与表示层交换信息。 应用层的任务是采用不同的应用协议为用户解决不同类型的应用需求，为应用进程访问OSI参考模型环境提供服务。 ``` ## OSI模型中的数据传输过程 ![](https://img1.zlogs.net/19/20191104110826.png) OSI模型的数据传输流程 > 如下图所示,设A系统的用户要向B系统的用户传送数据。A系统用户的数据先送入应用层,该层给它附加控制信息AH (头标)后,送入表示层。表示层对数据进行必要的变换并加头标PH后送入会话层。会话层也加头标SH送入传输层。传输层将长报文分段后并加头标TH送至网络层。网络层将信息变成报文分组,并加组号NH送数据链路层。数据链路层将信息加上头标和尾标 ( DH及DT)变成帧,经物理层按位发送到对方 ( B系统)。B系统接收 > 到信息后,按照与A系统相反的动作,层层剥去控制信息,最后把原数据传送给B系统的用户。可见,两系统中只有物理层是实通信,其余各层均为虚通信。因此,下图中只有两物理层之间有物理连接,其余各层间均无连线。 ![](https://img1.zlogs.net/19/20191104111426.png) ISO/OSIRM内信息流动 OSI模型协议数据单元PDU的封装与拆封 OSI模型的数据传输过程中 发送端主机在各个层次需要不断的对收到的数据添加首部信息后(数据链路层还要添加尾部信息)，构成相应层次的协议数据单元（PDU），这个过程也称为PDU的封装。 接收端主机在各个层次需要不断的对收到的数据剔除本层PDU的首部信息后(数据链路层还要剔除尾部信息)，将剩余的数据向上一层交付，这个过程被称为PDU的拆封。 上下层协议数据单元之间的关系 OSI模型中各个层次的协议数据单元名称 ![](https://img1.zlogs.net/19/20191104112215.png) OSI/RM中各层数据具体的封装与拆封流程 ![](https://img1.zlogs.net/19/20191104113052.png) ![](https://img1.zlogs.net/19/20191104113106.gif) ![](https://img1.zlogs.net/19/20191104113123.gif) 计算机 1 向计算机 2 发送数据 "},"page/1046.html":{"url":"page/1046.html","title":"应用层","keywords":"","body":""},"page/1047.html":{"url":"page/1047.html","title":"表示层","keywords":"","body":"表示层 "},"page/1048.html":{"url":"page/1048.html","title":"会话层","keywords":"","body":"会话层 "},"page/1049.html":{"url":"page/1049.html","title":"传输层","keywords":"","body":"传输层 传输层的作用 从通信和信息处理的角度看，运输层向应用层提供通信服务，它属于面向通信部分的最高层，同时也是用户功能中的最低层。 传输层的功能 为相互通信的应用进程提供逻辑通信 传输层的主要功能 （1）传输层为应用进程之间提供端到端的逻辑通信（但网络层是为主机之间提供逻辑通信）。 （2）传输层还要对收到的报文进行差错检测。 （3）传输层需要有两种不同的运输协议，即面向连接的 TCP 和无连接的 UDP。 tcp打电话两边连接一起通才行，udp写信给别人，可能地址已经变了，就寄不到了 传输层向上提供可靠的和不可靠的逻辑通信信道 "},"page/1050.html":{"url":"page/1050.html","title":"网络层","keywords":"","body":"网络层 概述 网络层是OSI参考模型中的第三层，介于传输层和数据链路层之间 是网络中处理端到端（end to end）数据传输的最低层，同时也是通信子网的最高层 也被看成通信子网与资源子网的接口或通信子网的边界。 网络层的主要任务 把网络层协议数据单元或分组从源主机经过适当的路径发送到目的主机 基本功能 定义网络层协议数据单元的类型和格式 解决异构网络的网际互连问题 定义通信子网的拓扑结构，并通过一定的路由算法为分组实现最佳路径选择 为分组选择路径时进行拥塞控制和负载平衡 所提供的服务 网络层为接在网络上的主机所提供的服务可以有两大类：无连接的网络服务（数据报服务）和面向连接的网络服务（虚电路服务）。 "},"page/1068.html":{"url":"page/1068.html","title":"提供的服务","keywords":"","body":"网络层所提供的服务 网络层为接在网络上的主机所提供的服务可以有两大类： 无连接的网络服务（数据报服务）面向连接的网络服务（虚电路服务） 无连接的网络服务（数据报服务） 提供数据报服务的特点 网络随时接受主机发送的分组（即数据报），网络为每个分组独立地选择路由。 网络尽最大努力地将分组交付给目的主机，但网络对源主机没有任何承诺。 网络不保证所传送的分组不丢失，也不保证按源主机发送分组的先后顺序，以及在时限内必须将分组交付给目的主机 当网络发生拥塞时，网络中的结点可根据情况将一些分组丢弃 图示 面向连接的网络服务（虚电路服务） 虚电路服务的阶段 虚电路的建立 数据传输 虚电路的释放 提供虚电路服务的特点 到达目的站的分组顺序就与发送时的顺序一致，因此网络提供虚电路服务对通信的服务质量 QoS (Quality of Service)有较好的保证。 主机 H1 先向主机 H5 发出一个特定格式的控制信息分组，要求进行通信，同时寻找一条合适路由。若主机 H5 同意通信就发回响应，然后双方就建立了虚电路。 同理，主机 H2 和主机 H6 通信之前，也要建立虚电路。 初始建立，本次都是这个路，下次建立可以和上次不一样，但是每次建立之后就不能变了。 两种服务的思路来源不同 数据报服务力求使网络生存性好和使对网络的控制功能分散，因而只能要求网络提供尽最大努力的服务。 可靠通信由用户终端中的软件（即TCP服务）来保证。 虚电路服务的思路来源于传统的电信网 电信网负责保证可靠通信的一切措施，因此电信网的结点交换机复杂而昂贵。 数据报服务和虚电路服务的对比 对比的方面 虚电路服务 数据报服务 思路 可靠通信应当由网络来保证 可靠通信应当由用户主机来保证 连接的建立 必须有 不要 目的站地址 仅在连接建立阶段使用，每个分组使用短的虚电路号 每个分组都有目的站的全地址 分组的转发 属于同一条虚电路的分组均按照同一路由进行转发 每个分组独立选择路由进行转发 当结点出故障时 所有通过出故障的结点的虚电路均不能工作 故障结点可能丢失分组，一些路由可能会发生变化 分组的顺序 总是按发送顺序到达目的站 到达目的站时不一定按发送顺序 端到端的差错处理和流量控制 可以由分组交换网负责也可以由用户主机负责 由用户主机负责 ​ "},"page/1051.html":{"url":"page/1051.html","title":"数据链路层","keywords":"","body":"数据链路层 "},"page/1057.html":{"url":"page/1057.html","title":"链路与数据链路","keywords":"","body":"链路与数据链路 主机 H1 向 H2 发送数据 从层次上来看数据的流动 仅从数据链路层观察帧的流动 数据从主机H1到主机H2经过了四段不同的路径。这四条不同的路径则包含了链路和数据链路的概念。 链路（link）是从一个结点到相邻结点的一段物理线路，中间没有任何其他的交换结点。在进行数据通信时，两个计算机之间的通信路径要经过多段这样的链路。可见，链路只是一条路径的组成部分。 当需要在一条线路上传送数据时，除了物理线路外，还必须有通信协议来控制数据的传输。把实现这些协议的硬件和软件加到链路上，就构成了数据链路。 现在最常用的方法是使用适配器（即网卡）来实现这些协议的硬件和软件。一般的适配器都包括了数据链路层和物理层这两层的功能。 也有人把链路分为物理链路和逻辑链路。 物理链路就是所说的链路，逻辑链路就是所说的数据链路，是物理链路加上必要的通信协议。 "},"page/1058.html":{"url":"page/1058.html","title":"点到点链路与广播链路","keywords":"","body":"点到点链路与广播链路 1.点到点链路 点到点链路（point-to-point link）使用一对一的点对点通信方式，由一条链路两端的发送结点和接收结点组成。许多数据链路层协议是为点到点链路设计，如点对点协议（Point-to-Point Protocol，PPP）和高级数据链路控制协议（high-level data link control，HDLC）就是点到点链路的协议。 广播链路 广播链路（broadcast link）使用一对多的广播通信方式，它能够让多个发送结点和接收结点都连接到单一的、共享的广播信道上，因此必须使用专用的共享信道协议来协调这些主机的数据发送，因此过程比较复杂。 这里使用术语“广播”，是因为当任何一个结点传输一个数据帧时，都要经过该信道广播该数据帧，使连接的每个其余结点均能收到该数据帧的一个副本。以太网（Ethernet）和无线局域网（Wireless Local Area Networks，WLAN）都是数据链路层广播链路的例子。 "},"page/1064.html":{"url":"page/1064.html","title":"点到点链路的数据链路层协议PPP","keywords":"","body":"点到点链路的数据链路层协议PPP PPP协议简介 由RFC 1661和RFC 2153定义的点到点协议（Point to Point Protocol，PPP）是用于一条直接连接两个结点的点到点链路上的链路层协议。运行PPP的点到点链路可能是一条串行的拨号电话线，它已经成为家庭用户和ISP之间通过拨号连接起来的协议。 PPP是TCP/IP网络协议包的一个成员，是TCP/IP的扩展，它增加了两个额外的功能组件： （1）它可以通过串行接口传输TCP/IP包；（2）它可以安全登录。 PPP协议的特点如下 （1）支持点到点的连接，不同于X.25、frame relay等数据链路层协议，具有CHAP、PAP验证协议，更好的保证了网络的安全性。 （2）PPP的物理层既支持数据为8位和无奇偶校验的异步模式，还支持面向比特位的同步链接，如frame relay必须为同步电路。 （3）PPP有针对不同网络层的网络控制协议，如IPCP，IPXCP。并且允许双方协商是否对报文首部进行压缩。 （4）提供了一整套方案解决链路建立、维护、折除上层协议协商、认证等问题。 PPP协议的组成PPP 协议的组成 PPP 协议有三个组成部分 一个将 IP 数据报封装到串行链路的方法。 链路控制协议 LCP (Link Control Protocol)，用来建立、配置和测试数据链路连接。 网络控制协议 NCP (Network Control Protocol)，其中的每一个协议支持不同的网络层协议。 PPP协议的帧格式PPP 协议的帧格式 标志字段 F = 0x7E （符号“0x”表示后面的字符是用十六进制表示。十六进制的 7E 的二进制表示是 01111110）。 地址字段 A 只置为 0xFF。地址字段实际上并不起作用。 控制字段 C 通常置为 0x03。 PPP 是面向字节的，所有的 PPP 帧的长度都是整数字节。 PPP 有一个 2 个字节的协议字段。当协议字段为 0x0021 时，PPP 帧的信息字段就是IP 数据报。若为 0xC021, 则信息字段是 PPP 链路控制数据。若为 0x8021，则表示这是网络控制数据。 PPP协议的透明传输实现透明传输问题 当 PPP 用在异步传输时，就使用一种特殊的字符填充法。 当PPP使用异步传输时，它把转义符定义为0x7D，并使用字节填充。 当 PPP 用在同步传输链路时，协议规定采用硬件来完成比特填充。 字符填充 （RFC1662） 将信息字段中出现的每一个 0x7E 字节转变成为 2 字节序列(0x7D, 0x5E)。 若信息字段中出现一个 0x7D 的字节, 则将其转变成为 2 字节序列(0x7D, 0x5D)。 若信息字段中出现 ASCII 码的控制字符（即数值小于 0x20 的字符），则在该字符前面要加入一个 0x7D 字节，同时将该字符的编码加以改变。 PPP协议透明传输的字符填充法 零比特填充 PPP 协议用在 SONET/SDH 链路时，使用同步传输（一连串的比特连续传送）。这时 PPP 协议采用零比特填充方法来实现透明传输。 发送端：只要发现有 5 个连续 1，则立即填入一个 0。 接收端：每当发现 5 个连续1时，就把这 5 个连续 1 后的一个 0 删除， 零比特填充 PPP 协议的链路状态PPP 协议的工作状态 当用户拨号接入 ISP 时，路由器的调制解调器对拨号做出确认，并建立一条物理连接。 PC 机向路由器发送一系列的 LCP 分组（封装成多个 PPP 帧）。这些分组及其响应选择将要使用的一些 PPP 参数。 接着进行网络层配置，NCP 给新接入的 PC机分配一个临时的 IP 地址，使 PC 机成为因特网上的一个主机。通信完毕时，NCP 释放网络层连接，收回原来分配出去的 IP 地址。接着，LCP 释放数据链路层连接。 最后释放的是物理层的连接。 "},"page/1059.html":{"url":"page/1059.html","title":"简化模型","keywords":"","body":"数据链路层的简化模型 简化的三层结构模型 只考虑数据链路层的简化模型 数据链路层像个数字管道。常常在两个对等的数据链路层之间画出一个数字管道，而在这条数字管道上传输的数据单位是帧 "},"page/1060.html":{"url":"page/1060.html","title":"需要解决的基本问题","keywords":"","body":"需要解决的基本问题 数据帧定界 透明传输 差错检测 "},"page/1061.html":{"url":"page/1061.html","title":"数据帧定界","keywords":"","body":"数据帧定界 在一段数据的前后分别添加首部和尾部，然后就构成了一个帧。 要点：确定帧的界限。 首部和尾部的一个重要作用就是进行帧定界。 用控制字符进行帧定界的方法举例 "},"page/1062.html":{"url":"page/1062.html","title":"透明传输","keywords":"","body":"透明传输 解决透明传输问题 发送端的数据链路层在数据中出现控制字符“SOH”或“EOT”的前面插入一个转义字符“ESC”(其十六进制编码是 1B)。 字节填充(byte stuffing)或字符填充(character stuffing)——接收端的数据链路层在将数据送往网络层之前删除插入的转义字符。 如果转义字符也出现数据当中，那么应在转义字符前面插入一个转义字符。当接收端收到连续的两个转义字符时，就删除其中前面的一个。 用字节填充法解决透明传输的问题 "},"page/1063.html":{"url":"page/1063.html","title":"差错检测","keywords":"","body":"差错检测 在传输过程中可能会产生比特差错：1 可能会变成 0 ，0 也可能变成 1。 在一段时间内，传输错误的比特占所传输比特总数的比率称为误码率 BER (Bit Error Rate)。 误码率与信噪比有很大的关系。 为了保证数据传输的可靠性，在计算机网络传输数据时，必须采用各种差错检测措施。 在数据链路层传送的帧中，广泛使用了循环冗余检验 CRC 的检错技术。 循环冗余检验的原理 CRC检验也称为多项式编码（Polynomial Code），它将发送的二进制序列看作系数为0或1的一个多项式，对二进制序列的操作也称为多项式算术。CRC校验码由两部分组成，前一部分是k+1个比特的待发送信息，后一部分是r个比特的冗余码。前k+1个比特部分是实际要传送的内容，是固定不变的。CRC校验码的关键在于后一部分r个比特冗余码的计算。 多项式算术是基于二进制序列与多项式系数的对应（等价）关系进行的。一个m+1位的二进制序列就是一个m阶多项式的系数，如二进制序列p=1101， 则其对应的多项式 ： P(x)=x3+x2+1 P(x)=x^3+x^2+1 P(x)=x3+x2+1 CRC冗余码的计算中要用到两个多项式： F(x)和G(x) ，其中， F(x)是一个k阶多项式，其系数是待发送的k+1位二进制序列， G(x)是一个r阶的生成多项式，由收发双方预先约定。 CRC校验具有很强的检错能力，理论证明，CRC能够检验出下列差错：全部的奇数个错。全部的两位错。全部长度小于或等于r位的突发错。其中，r是冗余码的长度。 可以看出，只要选择足够的冗余位，就可以使漏检率减少到任意小的程度。由于CRC校验码的检错能力强，且生成和检验过程容易实现，因此是目前应用最广泛的检错码编码方法之一。 在发送端，先把数据划分为组（即：一帧）。假定每组 k 个比特。 在每组后面，添加供差错检测用的 n 位冗余码一起发送。即：实际发送长度为：k+n 比特。 发送前双方协商n+1位的除数P，方便接收方收到后校验。 给K比特的数据添加除数减一个0（P-1）作为被除数，与第三步确定的除数做“模2除法”。得出的余数即FCS校验序列，它的位数也必须是（P-1）。 将FCS校验序列添加至K个比特位的后面发送出去。 接收方对接收到的每一帧进行校验，若得出的余数 R = 0，则判定这个帧没有差错，就接受(accept)。若余数 R ≠ 0，则判定这个帧有差错，就丢弃。 “模2除法”与“算术除法”类似，但它既不向上位借位，也不比较除数和被除数的相同位数值的大小，只要以相同位数进行相除即可。模2加法运算为：1+1=0，0+1=1，0+0=0，无进位，也无借位；模2减法运算为：1-1=0，0-1=1，1-0=1，0-0=0，也无进位，无借位。相当于二进制中的逻辑异或运算。 那么接收方拿到的就是：101001001。再以它为被除数，1101为除数进行“模2除法”。 参考 https://blog.csdn.net/pointer_y/article/details/60332956 "},"page/1029.html":{"url":"page/1029.html","title":"局域网技术","keywords":"","body":"局域网体系结构 "},"page/1052.html":{"url":"page/1052.html","title":"物理层","keywords":"","body":"物理层 "},"page/1022.html":{"url":"page/1022.html","title":"概述","keywords":"","body":"物理层概述 主要任务：确定与传输媒体的接口的一些特性。 1．机械特性 机械特性定义了传输介质接线器、物理接口的形状和尺寸、引线数目、排列顺序，以及连接器与接口之间的固定和锁定装置等。 2．电气特性 规定了在物理线路上传输二进制BIT流时，在线路上信号使用的电压范围、阻抗匹配及传输距离和传输速率等参数。 目前使用的电气特性标准定义的都是接口发送器和接收器的电器特性，还给出了互连电缆的相关规程。 3．功能特性 指各条传输线路上出现的某一电平的电压所代表的意义，包括接口信号线的功能规定，接口信号线的功能分类。 4．规程特性 指明利用接口传输比特流过程中各类事件发生的合理顺序，包括事件的执行顺序与具体的数据传输方式。 "},"page/1023.html":{"url":"page/1023.html","title":"通信基础","keywords":"","body":"数据通信基础 数据通信系统的模型 源系统 也称为发送方或信源，是发送信号的一端。 一般包括源站和发送器两个部分。 源站由计算机或服务器等终端设备产生要传输的数据。 发送器是对要传送的数据进行编码或者调制的设备，如各种调制解调器、计算机网卡。 目的系统 目的系统也称为接收方，是接收信号的一端 一般包括接收器和目的站或信宿两个部分。 接收器用来接收传输系统传送的信号，并把信号转换为可以被目的站设备识别与处理的数据信息。 目的站从接收器获取传送来的数字比特流，然后把信息输出。 传输系统 传输系统在源系统和目的系统之间，是计算机网络上的数据传输通道，除了源系统和目的系统外网络中的其他部分都属于传输系统。 可以是简单的传输线，也可以是在源系统和目的系统之间复杂的网络系统。 "},"page/1100.html":{"url":"page/1100.html","title":"数据和信号","keywords":"","body":"数据和信号 数据是表示信息的载体。 信号则是数据的电气或电磁特性的表现。 数据是针对信息而言的，而信号则是针对传输的。 "},"page/1101.html":{"url":"page/1101.html","title":"信道","keywords":"","body":"信道 信道是沿某一方向传送信息的媒体或介质，是线路的逻辑部件，一条通信线路至少包含一条发送信道和一条接收信道。 信道的分类 （1）从信息交互方式分类--单双工 单工通信 只有一个方向的通信。 单方向单行车道 半双工通信 通信双方都可以发送和接收 信息，但不能同时发送，也不能同时接收。 潮汐车道 全双工通信 通信双方可以同时发送和同时接收。 相对方向双行车道 （2）以传送信号分类--模拟和数字 模拟信道 模拟就是随时间在连续变化。 数字信道 数字就是在时间上是离散的，不连续的，仅取几个有限的离散数值。 不论是数据或信号，其数据值可以是模拟的，也可以是数字的。根据数据的取值方式不同，可分数字数据和模拟数据。根据信号的参数取值方式不同，信号也可分为模拟信号与数字信号。 模拟数据、数字数据和模拟信号、数字信号的关系及其应用场景 （3）以传送信号的形式分类--基带宽带 基带信号：将数字0和1直接用两种不同的电压表示和传输。 宽带信号：将基带信号调制后，形成频分复用模拟信号，再进行传输。 基带传输概述 传输计算机系统中的二进制数据最直接的方式就是采用脉冲信号。脉冲信号一般由直流信号和基频、低频、高频等多个谐波分量组成。其中从零开始有一段能量相对集中的频率范围被称为基本频带（base band，简称基频或基带）。基带属于脉冲信号的固有频率，与基带对应的数字信号也被称为基带信号。 通常将数字数据以基带信号形式直接传输的方式称为基带传输。 基带传输是一种非常基本的数据传输方式，它适合传输各种速率的数据，且传输过程简单，设备投资少。 基带信号的能量在传输过程中很容易衰减，因此基带传输较多地用于短距离的数据传输 基带信号的传输距离在没有信号再放大的情况下一般不超过2.5 km。 数字数据编码方法 在基带传输系统中要解决的关键问题是数字数据的编、解码问题。 发送端要将二进制数据通过编码(Encoding)转换为适合在数字信道上传送的基带信号。 接收端则要将接收到的基带信号通过解码( Decoding)恢复为与发送端相同的二进制数据 数字数据用数字信号传输时的编码方法 4B/5B编码 4B/5B编码是将要发送的数据流分为4bit一组，然后按照4B/5B编码规则转换为相应的5bit编码，编码的效率可以达到80% 数据 4bit数据符号 5bit编码 数据 4bit数据符号 5bit编码 0 0000 11110 8 1000 10010 1 0001 01001 9 1001 10011 2 0010 10100 10(A) 1010 10110 3 0011 10101 11(B) 1011 10111 4 0100 01010 12(C) 1100 11010 5 0101 01011 13(D) 1101 11011 6 0110 01110 14(E) 1110 11100 7 0111 01111 15(F) 1111 11101 4B/5B编码的目的在前面已经说过了，就是让码流产生足够多的跳变（减少干扰）。 4位二进制共有16种组合，5位二进制共有32种组合，如何从32种组合种选取16种来使用呢？ 这里需要满足两个规则： 1). 每个5比特码组中不含多于3个“0”； 2). 或者5比特码组中包含不少于2个“1”；每个代码最多1个前导0，并且末端最多有两个0此规则是逢“1”跳变，逢“0”不跳变（相反差分）。 为了让4B/5B编码后的码流中有足够多的跳变就需要编码后的码流中有尽量多的“1”和尽量少的“0”。 宽带传输技术 频带传输概念 频带传输是将基带信号经过调制在公用电话网上以模拟信号传输，在接收端，再将模拟信号变换成原来的基带信号。这种把基带信号经过调制后传送到接收端又解调还原成基带信号的传输方式，称为频带传输。 宽带传输是频带传输的一种。宽带是指比音频带宽更大的频带，将信道划分成多个子信道，分别用来传送音频、视频和数字信号，称为宽带传输。 任意的模拟信号均可以表示为正弦交流信号的载波，具体可表示为如下表达式： y(t)=Asin(ωt+φ) y(t)=Asin( \\omega t+ \\varphi ) y(t)=Asin(ωt+φ) 其中，A表示振幅，ω \\omega ω表示频率， φ\\varphiφ表示相位 （1）幅度调制 有无波形表示 yASK(t)={0number0Asin(ωt+φ)number1 y_{ASK}(t)= \\big\\{^{Asin(\\omega t +\\varphi )\\qquad number1}_{0\\qquad number0} yASK​(t)={0number0Asin(ωt+φ)number1​ （2）频率调制 不同频率表示 yASK(t)={Asin(ω2t+φ)number0Asin(ω1t+φ)number1 y_{ASK}(t)= \\big\\{^{Asin(\\omega _1 t +\\varphi )\\qquad number1}_{Asin(\\omega _2 t +\\varphi )\\qquad number0} yASK​(t)={Asin(ω2​t+φ)number0Asin(ω1​t+φ)number1​ （3）相位调制 yASK(t)={Asin(ω2t+π)number0Asin(ω1t+0)number1 y_{ASK}(t)= \\big\\{^{Asin(\\omega _1 t +0)\\qquad number1}_{Asin(\\omega _2 t +\\pi )\\qquad number0} yASK​(t)={Asin(ω2​t+π)number0Asin(ω1​t+0)number1​ 3种调制方法的示意图 （4）按传输介质分类 ​ 有线信道 ​ 无线信道 有线传输介质 1.同轴电缆（抗干扰能力强，传输远） （1）结构 （2）分类 同轴电缆(Coaxial Cable) 频带宽，损耗小，抗干扰能力强、传输距离长。 ①基带同轴电缆 阻抗为50Ω，用于传输数字信号，传输速率可达10Mb/s，现在大于，又分粗缆和细缆。 目前是经过调制的模拟信号 ②宽带同轴电缆 阻抗为75Ω，用于传输模拟信号，是CATV中的标准传输电缆，采用频分复用技术。 2.双绞线 由两根绝缘铜导线并排对扭在一起而形成，相互绞和可减少对相邻导线的电磁干扰 （1）结构 （2）分类 ①电话线 使用接口为RJ11，铜线数量为2组（4根）。 ②计算机网络线 ​ 使用接口为RJ45，铜线数量为4组（8根）。采用EIA/TIA-568A， EIA/TIA-568B布线标准，主要用于星型或者树型网络拓扑结构，已成为计算机网络中使用的主要介质类型之一。 ​ 优势:价格便宜，容易安装。 ​ UTP按传输质量分为1类到5类，在计算机网络中最常用的是3类、4类、5类以及5e类非屏蔽双绞线。UTP-3是作为数据级别最低的电缆，通常用于令牌环和10Mbps以太网。UTP-5由四对双绞线对组成，可用于10M、100Mbps的以太网中。 ​ 超5类和6类非屏蔽双绞线，可满足千兆以太网等高速网络的应用需要。 UTP具有以下优点： 非常容易安装：重量轻、易弯曲；无屏蔽外套，外径细小，节省空间；平衡传输，（双绞实现，非屏蔽）避免了外界干扰；将干扰减至最小；具有开放性，非常适用于结构化综合布线。 屏蔽双绞线 屏蔽双绞线在双绞线外部有一层铝箔作为绝缘层，它具有较高的传输速率，100m内可达155Mb/s。其安装必须使用配有支持屏蔽功能的特殊连接器。 双绞线的类别、带宽和典型应用 类别 带宽 典型应用 3 16MHz 早期10 Mbps以太网，模拟电话，目前很少使用 4 20 MHz 16 Mbps令牌环网 5 100 MHz 100BASE-T快速以太网 6 250 MHz 1000BASE-T 1Gbps以太网，ATM网络 7 600 MHz 1 0 Gbps以太网 3.光缆（光纤） （1）结构、原理 （2）分类 ①多模光纤 纤芯直径较粗，光脉冲传输时以多个模式传输，其传输性能不如单模光纤，易造成失真，无中继的传输距离约为2Km。 ②单模光纤 纤芯直径很小，只有几微米，在给定的工作波长上以单一模式传输，传输频带宽，传输容量大，无中继的传输距离可达几十公里 。 多模光纤与单模光纤 （3）光脉冲的波长（通信光纤0.8-1.7微米近恒外线） 带宽：25000G·30000GHz 波长： 850nm，衰减较大，但其它特性较好 1300nm，衰减较小 1550nm ，衰减较小 （4）特点 传输频带非常宽，通信容量大。 传输速率高。 误码率极低。 传输损耗极小，中继距离长。 不受雷电和电磁干扰，本身也无相互串扰， 数据不易被窃听，安全性和保密性好； 体积小，重量轻。 1km，1对光纤，100kg 1km，1000对双绞线，8000kg 无线传输介质 段 号 频段名称 频段范围\u000b（含上限，不含下限） 波段名称 波长范围\u000b（含上限，不含下限） 1 极低频(ELF) 3～30赫（Hz） 极长波 100～10兆米 2 超低频(SLF) 30～300赫（Hz） 超长波 10～1兆米 3 特低频(ULF) 300～3000赫（Hz） 特长波 100～10万米 4 甚低频（VLF） 3～30千赫（KHz） 甚长波 10～1万米 5 低频（LF） 30～300千赫（KHz） 长波 10～1千米 6 中频（MF） 300～3000千赫（KHz） 中波 10～1百米 7 高频（HF） 3～30兆赫（MHz） 短波 100～10米 8 甚高频（VHF） 30～300兆赫（MHz） 超短波 10～1米 9 特高频（UHF） 300～3000兆赫（MHz） 分米波/微 波 10～1分米 10 超高频（SHF） 3～30吉赫（GHz） 厘米波/微 波 10～1厘米 11 极高频（EHF） 30～300吉赫（GHz） 毫米波/微 波 10～1毫米 12 至高频 300～3000吉赫（GHz） 丝米波/微 波 10～1丝米 电信领域使用的电磁波的频谱 1.短波 ​ 频率范围：104~108Hz 依靠电离层的辐射 2.微波 ​ 频率范围在300MHz—300GHz，通常使用2G—40GHz。微波只能直线传输，而且可以穿透电离层，所以长距离通信需在地面架设微波中继站，或在同步地球卫星上安装中继器。 优点 与电缆载波相比，投资少，见效快 传播时延小，3.3us/km 缺点 相邻站之间必须直视，不能有障碍物。因发送天线与接收天线的差异,易造成失真。 易受恶劣天气影响 与电缆通信相比，隐蔽性、保密性差 需使用大量中继站，维护费用较高 特点 覆盖范围广 具有广播特性 很大的传播时延，270ms 昂贵，卫星本身和发射卫星的火箭造价都非常高。 同步轨道最多允许180个卫星 有12-20个转发器/卫星，带宽36M～50MHz/转发器 3.红外线 红外线常用于小范围(例如在一个房间)的信号传输 。它可用于便携式计算机。 例如我们可以在一个房间的计算机网络中使用红外线来让笔记本计算机在房间内移动时均保持与网络连接。 工业、科学与医药（Industrial，Scientific and Medical，ISM）频段 不同传输介质的比较 介质性能 非屏蔽双绞线 屏蔽双绞线 同轴电缆 光纤 微波 传输速度 100Mbps 100Mbps 1Mbps~1Gbps 10Mbps~300Gbps 1Mbps~10Gbps 抗电磁干扰 较低 较高 高 很高 低 传输距离 基带： 无限制 安全性 一般 一般 一般 高 低 价格 低 较高 高 很高 高 "},"page/1102.html":{"url":"page/1102.html","title":"奈奎斯特准则","keywords":"","body":"奈奎斯特准则 原因：信号的传输效率受到实际的物理信道的干扰，码元传输速率越高，经过信道传输后的失真度就越大。 数字信号通过实际的信道 理想低通信道下的奈氏准则 （1）理想低通信道 ​ 对于信号的低频分量，只要其频率不超过某个上限值，都能够不失真的通过此信道。而频率超过该上限值的所有高频分量都不能通过该信道。 （2）奈氏准则 理想低通信道下的最高码元传输率＝2W Baud W:理想低通信的带宽,单位Hz Baud（波特），码元传输速率的单位。 1波特为每秒传送1个码元。 即每赫带宽的理想低通信道的最高码元传输速率为每秒2个码元。 理想带通信道 (1)定义 ​ 即频率在f1~f2之间的频率分量能够不失真的通过此信道，而低于f1和高于f2的频率分量都不能通过该信道。 (2)奈氏准则 理想带通信道下的最高码元传输率＝1W Baud， 即每赫带宽的理想带通信道的最高码元传输速率为每秒1个码元。 实际信道的最高码元传输速率要低于奈氏准则的上限值。 波特的概念 ​ 波特是码元传输速率的单位，码元传输速率也称为调制速率或波形速率、符号速率。信道最大数据传输速率与码元之间的关系： 式3-1： C=2Wlog2M(bps) C=2Wlog_2M(bps) C=2Wlog2​M(bps) 其中，M 为信号状态数量； W为信道带宽。 假如用带宽为3 kHz的传统电话信道通过调制解调器来传输模拟信号，受奈奎斯特准则限制，发送方最多发送6 000个码元。 如果信号状态数量=2，即每个码元携带了1比特信息，则由式（3-1）可知，此时的电话信道最大数据传输速率为6 kbps。 如果设法将信号状态数量提高到4，每个码元携带2比特信息，则此时电话信道最大数据传输速率为12 kbps。因码元传输率受奈氏准则限制，要提高信息的传输速率，就必须使每一个码元能携带更多Bit。 "},"page/1103.html":{"url":"page/1103.html","title":"香农公式","keywords":"","body":"香农公式 香农（Shannon）公式指出信道的极限信息传输速率 C=Wlog2(1+SN) C=Wlog_2(1+\\frac{S}{N}) C=Wlog2​(1+NS​) W：信道的带宽 S：信道内部所传信号的平均功率 N：信道内部高斯噪声的功率 S/N:信道的信噪比 香农公式表明，信道的带宽以及信道中的信噪比越大，信息的极限传输速率也就越高。这意味只要信道的信息传输速率低于信道的极限信息传输速率，就可能找到某种办法来实现无差错的传输。 奈氏准则和香农公式在数据通信系统中的作用范围 "},"page/1104.html":{"url":"page/1104.html","title":"多路复用技术","keywords":"","body":"多路复用技术 ​ 频分复用 FDM ​ 时分复用 TDM ​ 统计时分复用 STDM ​ (密集)波分复用 (D)WDM ​ 码分复用(码分多址) CDM(A) 频分多路复用 频分复用FDM ​ 按频率划分不同的信道 特点：技术成熟，使用方便 缺点：不够灵活 时分多路复用 时分复用TDM 按时间划分不同的信道 频分复用：所有用户在同样的时间占用不同的带宽资源。 时分复用：所有用户在不同的时间占用同样的频率带宽。 优缺点同FDM，但更有利于数字信号的传输。因为每个用户分得的时隙是固定的，复用后信道利用率不高。 统计时分复用STDM（异步时分复用） ​ 对TDM的一种改进，动态的分配所需的时隙大小，使用集中器作为连接部件。提高了信道的利用率。 统计时分复用用户所占的时隙不是周期出现的。又叫异步时分复用。普通的时分复用又叫同步时分复用。 由于STDM帧中的时隙并不是固定的分配给某个用户，所以每个时隙必须有用户的地址信息，这是统计时分复用必有的开销。图上每个时隙之前的小时隙就是放入这样的地址信息。 波分复用 1.概念 ​ 光的频分复用 ​ 单模光纤：2.5Gbps ​ 光纤传输时主要存在色散问题（即光脉冲的不同频率的分量传输速率不同） ​ 用波长而不用频率来表示光的载波 ​ 最初，在一根光纤上只能复用两路光载波信号，叫波分复用WDM。后来一根光纤上复用的路数越来越多。现在可以复用80路或更多路数的光波信号，称为密集波分复用DWDM。 2.原理 码分复用（码分多址） 1.概念 ​ 码分复用CDM（或称为码分多址CDMA）每一个用户可以在同样的时间使用同样的频带进行通信。各用户使用不同码型，不会造成干扰。 ​ 码分复用最初使用于军事通信：发送的信号具有很强的抗干扰能力。其频谱近似白噪声，不易被敌人发现。 2.原理 ​ CDMA也是一种共享信道的方法，主要采用扩频通信。 ​ 在CDMA中每一个比特时间再划分为m 个短的间隔，称为码片（chip）。通常m的值设为128或64。 ​ 使用CDMA的每一个站被指派一个唯一的m bit码片序列。 为简单起见，我们设m=8。 例如，s站 其码片序列为00011011 当发送bit 1时，发送00011011 发送bit 0时，发送11100100 为了描述准确，将1用+1，0用-1代替 则s站的码片序列为(-1-1-1+1+1-1+1+1) 假定数据率为b bit/s 则实际发送速率为：mb bit/s 频宽为：原来的m倍(扩频) ​ 直接序列:DS-CDMA 跳频序列:FH-CDMA ​ 码片序列满足正交关系， 这是CDMA系统的一个重要特点：系统给每一个站分配的码片序列不仅必须各不相同，并且还要相互正交。在实用系统中是使用伪随机码序列。 ​ 任何码片序列向量的规格化内积为1。 现在假定一个CDMA系统中有很多站在相互通信，且假定所有站所发送的码片序列都是同步的， 则这些站所发送的数据为： 自己的码片序列（相当于bit 1） 自己码片序列二进制反码（相当于bit 0 ） 无数据发送 现假定S·X发送数据： X站需事先获得S站的码片序列向量S，并且与收到的未知信号求内积。 根据前面公式，所有其它站的信号都被过滤掉： S·T=0 只剩下S站发送的信号，S站发送bit 1时： S·S=1 S站发送bit 0时： S·S=-1 注意：规格化内积为1。 CDMA 的工作原理 "},"page/1105.html":{"url":"page/1105.html","title":"接入网技术","keywords":"","body":"接入网技术 接入网一般指用户的网络接口和业务的节点接口间相互传送并实现承载功能的实体网络。 接入网的长度为几百米到几公里，指从骨干网络到用户终端设备之间的那一部分线路，通常被形象的称作“最后一公里”。由于骨干网一般使用光纤，具有很高的传输速度。而在整个通信网中，接入网处于通信网的末端，直接与用户连接。 因此，整个网络系统最重要的就是接入网。根据传输介质的不同，接入网的接入方式一般包括铜线接入、同轴电缆混合接入、光纤接入与无线接入等几种方式。 电话拨号接入 电话拨号接入通过计算机上安装的调制解调器（Modem，俗称“猫”）与电话线路相连接，拨号接入到因特网服务提供商（Internet Service Provider，简称ISP）的一种上网接入方式。 DSL接入 DSL是数字用户线（Digital Subscriber Line）的缩写，是通过对已有的模拟电话线路进行技术改造后承载住宅宽带业务的接入技术。DSL技术支持对称和非对称传输模式，解决了ISP与用户间的“最后一公里”的瓶颈问题。由于DSL 接入方案可以充分利用已经被大量铺设的电话用户环路，可大大降低接入的开销。电话线还可以提供更高速率的因特网接入，因此受到用户的欢迎，得到了各个方面的重视，在一些国家和地区得到大量应用。 DSL包括ADSL、RADSL、HDSL和VDSL等多种技术方案。 xDSL 的几种类型 ADSL (Asymmetric Digital Subscriber Line)：非对称数字用户线 HDSL (High speed DSL)：高速数字用户线 SDSL (Single-line DSL)：1 对线的数字用户线 VDSL (Very high speed DSL)：甚高速数字用户线 DSL ：ISDN 用户线。 RADSL (Rate-Adaptive DSL)：速率自适应 DSL，是 ADSL 的一个子集，可自动调节线路速率）。 ADSL 调制解调器的频谱利用的划分 ADSL 的组成 数字用户线接入复用器 DSLAM (DSL Access Multiplexer) 接入端接单元 ATU (Access Termination Unit) ATU-C（C 代表端局 Central Office） ATU-R（R 代表远端 Remote） 电话分路器 PS (POTS Splitter) 混合光纤同轴电缆接入 HFC 网是在目前覆盖面很广的有线电视网 CATV 的基础上开发的一种居民宽带接入网。 HFC 网除可传送 CATV 外，还提供电话、数据和其他宽带交互型业务。 现有的 CATV 网是树形拓扑结构的同轴电缆网络，它采用模拟技术的频分复用对电视节目进行单向传输。而 HFC 网则需要对 CATV 网进行改造 HFC 网采用结点体系结构 HFC 网具有比 CATV 网更宽的频谱，且具有双向传输功能 HFC 网的最大优点 具有很宽的频带，并且能够利用已经有相当大的覆盖面的有线电视网。 要将现有的 450 MHz 单向传输的有线电视网络改造为 750 MHz 双向传输的 HFC 网（还要将所有的用户服务区互连起来而不是一个个 HFC 网的孤岛），也需要相当的资金和时间。 在电信政策方面也有一些需要协调解决的问题。 FTTx 技术 FTTx（光纤到……）也是一种实现宽带居民接入网的方案。这里字母 x 可代表不同意思。 光纤到家 FTTH (Fiber To The Home)：光纤一直铺设到用户家庭可能是居民接入网最后的解决方法。 光纤到大楼 FTTB (Fiber To The Building)：光纤进入大楼后就转换为电信号，然后用电缆或双绞线分配到各用户。 光纤到路边 FTTC (Fiber To The Curb)：从路边到各用户可使用星形结构双绞线作为传输媒体。 光纤到大楼 FTTB LAN接入 通过双绞线直接与交换机相连的接入方式，具有上下行速率稳定、可扩展性强等多方面的优势。尤其适合宽带应用发展的需求，发展潜力十分巨大。通常，用户使用100Mbps接入速率，交换机之间采用1000Mbps接入速率，而主干网、服务器可以使用1Gbps和10Gbps的接入速率。 无线接入 无线接入是指部分或全部采用无线传输的手段在交换结点与用户终端之间。在人口密集的城市或位置偏远的山区、岛屿，以达到安装迅速的目的，作为接入网技术中的一个重要部分。具有安装便捷、使用灵活、经济节约、易于扩展的特点。 根据无线接入终端的可移动性，无线接入分为移动无线接入与固定无线接入两大类。移动移动无线接入服务的对象是移动终端，即蜂窝移动电话系统。固定无线接入面向固定位置的用户或仅在小范围内移动的用户群体。 根据覆盖分为，分为无线个人区域网WPAN、无线局域网WLAN、无线城域网WMAN和无线广域网WWAN四大类。 "},"page/1065.html":{"url":"page/1065.html","title":"局域网概述","keywords":"","body":"局域网LAN（local area network）概述 ISO/OSI RM是通用的网络模型结构，作为一种标准框架为构建网络提供了一个参照。但局城网作为一种特殊的网络， 有它自身的技术特点。另外，由于局城网实现方法的多样性，所以它井不完全套用OSI体系结构。国际上通用的局城网标准由IEEE 802委员会制定。IEEE 802委员会根据局域网适用的传输媒体、网络拓扑结构、性能及实现难易等因素，为LAN制定了一系列标准， 称为IEEE 802标准，已被ISO采纳为国际标准。 局城网的体系结构与OSI参考模型既有一定的对应关系， 又存在很大的区别。由于局城网大多采用共享信道，当通信局限于一个局域网内部时，任意两个节点之间都有唯一的链路， 即网络层的功能可由链路层来完成，局域网中不单独设立网络层。局域网的层次结构不包括OSI的高层结构，它所涵盖的功能层只有物理层和数据链路层，另外包括与第三层(网络层/网际层)的接口，并将数据链路层分成了逻辑链路控制(LLC)子层与介质访问控制(MAC)子层. 局域网的主要特点 网络为一个单位所拥有 地理范围和站点数目均有限。 局域网的主要优点如下 能方便地共享昂贵的外部设备、主机以及软件、数据。 从一个站点可以访问全网。便于系统的扩展和逐渐演变，各设备的位置可灵活的调整和改变。 提高系统的可靠性、可用性和残存性。 LAN中各层功能 局域网的体系结构与标准 1.物理层 物理层提供在物理实体间发送和接收比特的能力，一对物理实体能确认出两个介质访问控制MAC子层实体间同等层比特单元的交换。物理层也要实现电气、机械、功能和规程四大特性的匹配。物理层提供的发送和接收信号的能力包括对宽带的频带分配和对基带的信号调制。 2.LLC子层 LLC子层向高层提供一个或多个逻辑接口(具有帧发和帧收功能)。发送时把要发送的数据加上地址和CRC检验字段构成帧，介质访问时把帧拆开，执行地址识别和CRC校验功能，并具有帧顺序控制和流量控制等功能。LLC子层还包括为某些网络层功能，如数据报、虚拟控制和多路复用等。 LLC子层向高层提供一个或多个逻辑接口（具有帧发和帧收功能）。发送时把要发送的数据加上地址和CRC检验字段构成帧，介质访问时把帧拆开，执行地址识别和CRC校验功能，并具有帧顺序控制和流量控制等功能。LLC子层还包括为某些网络层功能，如数据报、虚拟控制和多路复用等。 3.MAC子层 由于在EE 802成立之前，采用了不同的传输介质和拓扑结构的局域网的存在，这些局域网采用不同的介质访问控制方式，各有特点和适用场合。IEEB 802无法用统一的方法取代它们，只能允许其存在。因而为每种介质访问方式制定一个标准， 从而形成了多种介质控制(media access control, MAC)协议。为使各种介质访问控制方式能与上层接口并保证传输可靠，所以在其上又制定了一一个单独LLC子层。这样，仅MAC子层依赖于具体的物理介质和介质访问控制方法，而LLC子层与媒体无关，对上屏蔽了下层的是体实观细节，使数据帧的传输独立于所采用的物理介质和个质访问方式。同时它允有可扩充性。有司铲完善和补充新的介质访向控制方式，适应已有的和未来发展的各种物理网络，具有可扩性。 MAC子层支持数据链路功能，并为LLC子层提供服务。它将上层交下来的数据封装成帧进行发送（接收时进行相反过程，将帧拆卸）、实现和维护MAC协议、比特差错检验和寻址等。 局域网对 LLC 子层是透明的 局域网标准 局域网中，绝大多数标准都是由IEEE802委员会制定的IEEE 802系列标准，其中在企业网络中应用最为广泛的就是以太网的局域网标准IEEE 802.3。IEEE 802系列标准后来被ISO接受为国际标准，标准名为IS0 8802。 IEEE于1985年公布了IEEE 802标准的5项标准文本，同年该标准被美国国家标准局( ANSI)采纳作为美国国家标准。后来国际标准化组织(ISO)经过讨论，建议将802标准定为局域网国际标准。 （1）IEEE 802.1标准：局域网体系结构、网络互连、以及网络管理和性能测试。 （2）IEEE 802.2标准：逻辑链路控制LLC子层功能与服务。 （3）IEEE 802.3标准：CSMA/CD总线介质访问控制子层与物理层规范。 （4）IEEE 802.4标准：令牌总线（Token Bus）介质访问控制子层与物理层规范。 （5）IEEE 802.5标准：令牌环（Token Ring）介质访问控制子层与物理层规范。 （6）IEEE 802.6标准：城域网MAN介质访问控制子层与物理层规范。 （7）IEEE 802.7标准：宽带网络技术。 （8）IEEE 802.8标准：光纤传输技术。 （9）IEEE 802.9标准：综合语音与数据局域网（IVD LAN）技术。 （10）IEEE 802.10标准：可互操作的局域网安全性规范（SILS）。 （11）IEEE 802.11标准：无线局域网技术。 （12）IEEE 802.12标准：优先度要求的访问控制方法。 （13）IEEE 802.13标准，未使用。 （14）IEEE 802.14标准：交互式电视网。 （15）IEEE 802.15标准：无线个人局域网（WPAN）的MAC子层和物理层规范。代表技术为蓝牙（Bluetooth） （16）IEEE 802.16标准：宽带无线局域网网络。 （17）IEEE802.20标准：移动宽带无线接入系统(MBWA，Mobile Broadband Wireless Access)。 （18）IEEE 802.22标准：无线地域网络（Wireless Regional Area Networks，WRAN） 802委员会标准之间的关系 局域网组网设备 网卡 网络接口板又称为通信适配器(adapter)或网络接口卡 NIC (Network Interface Card)，或“网卡”。 网卡的重要功能：进行串行/并行转换。数据缓存。在计算机操作系统中安装设备驱动程序。实现以太网协议。 常用的REALTEK的RTL8201BL网络芯片 网卡类型 （1）按总线接口类型进行分类：分为ISA网卡、PCI网卡、PCI-X 网卡、PCMCIA网卡和USB网卡等几种类型。 （2）按传输介质接口分类：细同轴电缆的BNC接口网卡、粗同轴电缆AUI接口网卡、以太网双绞线RJ-45接口网卡、光纤F/O接口网卡、无线网卡等。 （3）按传输速率（带宽）分类：10Mbps网卡、100Mbps以太网卡、10Mbps/100Mbps自适应网卡、1000Mbps千兆以太网卡、10Mbps/100Mbps/1000Mbps自适应网卡等。 中继器 中继器(Repeater)是局域网物理层的一种介质连接设备。它实际上是一种信号再生放大器，可将变弱的信号和有失真的信号进行整形与放大，输出信号比原信号的强度将大大提高。中继器不解释、不改变收到的数字信息，而只是将其整形放大后再转发出去。 采用中继器连接网络分支的数目要受具体的网络体系结构限制。以太网的中继器按照“5-4-3”原则连接LAN。“5-4-3”原则是将5个网段用4个中继器连接，为了防止冲突，其中最多有3个网段有用户设备。 中继器的优点： （1）易于操作（2）很短的等待时间（4）价格便宜（5）突破线缆的距离限制来扩展局域网段的距离（6）可用来连接不同的物理介质。 中继器的缺点： （1）采用中继器连接网络分支的数目要受具体的网络体系结构限制。（2）中继器不能连接不同类型的网络。（3）中继器没有隔离和过滤功能，无路由选择、交换、纠错／检错功能，一个分支出现故障可能会影响到其他的每一个网络分支。（4）使用中继器扩充网络距离是最简单最廉价的方法，但当负载增加时，网络性能急剧下降，所以只有当网络负载很轻和网络时延要求不高的条件下才能使用。 集线器 集线器（Hub）工作在物理层，是中继器的一种形式，是一种集中连接缆线的网络组件，可以认为集线器是一个多端口的中继器，集线器能够提供多端口服务，主要功能是对接收到的信号进行再生整形放大，以扩大网络的传输距离，同时把所有节点集中在以它为中心的节点上。集线器主要用于共享介质局域网的建设。 集线器D-Link DE-824TP的外观 利用集线器星型拓扑结构网络 网桥 网桥（Bridge）也叫桥接器，是连接两个局域网的一种存储/转发设备，根据MAC地址表对数据帧进行转发，可隔离碰撞域。网桥将网络的多个网段在数据链路层连接起来，并对网络数据帧进行管理。它不但能扩展网络的距离或范围，而且可提高网络的性能、可靠性和安全性。根据网桥的工作方式，有透明网桥、转换网桥、封装网桥、源路由选择网桥。 网桥的内部结构 使用网桥带来的好处 过滤通信量。 扩大了物理范围。提高了可靠性。可互连不同物理层、不同 MAC 子层和不同速率（如10 Mb/s 和 100 Mb/s 以太网）的局域网。 网桥使各网段成为隔离开的碰撞域 使用网桥带来的缺点 存储转发增加了时延。 在MAC 子层并没有流量控制功能。 具有不同 MAC 子层的网段桥接在一起时时延更大。 网桥只适合于用户数不太多(不超过几百个)和通信量不太大的局域网，否则有时还会因传播过多的广播信息而产生网络拥塞。这就是所谓的广播风暴。 交换机 交换机是工作在OSI参考模型数据链路层的设备，外表和集线器相似。它通过判断数据帧的目的MAC地址，从而将数据帧从合适端口发送出去。交换机的冲突域仅局限于交换机的一个端口上。交换机是通过MAC地址的学习和维护更新机制来实现数据帧的转发. 交换机内部结构 交换机的工作原理 （1）交换机根据收到数据帧中的源MAC地址建立该地址同交换机端口的映射，并将其写入MAC地址表中。（2）交换机将数据帧中的目的MAC地址同已建立的MAC地址表进行比较，以决定由哪个端口进行转发。（3）如数据帧中的目的MAC地址不在MAC地址表中，则向所有端口转发。这一过程称为泛洪（flood）。 （4）广播帧和组播帧向所有的端口转发。 集线器与交换机的比较 （1）交换机属于数据链路层设备，而集线器属于物理层设备。 （2）集线器在转发帧时，不对传输介质进行检测。交换机在转发帧之前必须执行 CSMA/CD 算法。若在发送过程中出现碰撞，就必须停止发送和进行退避。所以交换机能隔离冲突，而集线器却只能增加冲突。 三个独立的局域网 用集线器互连后冲突域和广播域都增大了 交换机互连后冲突域并没有变化 （3） 交换机的每个端口可提供专用的带宽，而集线器的所有端口只能共享带宽。 （4）集线器只能实现半双工传送，而交换机可支持全双工传送。 "},"page/1066.html":{"url":"page/1066.html","title":"以太网技术","keywords":"","body":"以太网技术 概述 以太网（Ethernet）是一种产生较早且使用相当广泛的局域网，由美国Xerox（施乐）公司的Palo Alto研究中心（简称为PARC）于20世纪70年代初期开始研究并于1975年研制成功。 1980年9月，美国DEC、Intel与Xerox三家公司联合提出了10 Mbps的第一个以太网规范版本，简称DIX Ethernet V1 1982年又修改为第二版规范（实际上也就是最后的版本），即DIX Ethernet V2，成为世界上第一个局域网产品的规范。 以太网与IEEE802.3 DIX Ethernet V2 IEEE 的 802.3 标准 DIX Ethernet V2 标准与 IEEE 的 802.3 标准只有很小的差别，可以将 802.3 局域网简称为“以太网”。严格说来，“以太网”应当是指符合 DIX Ethernet V2 标准的局域网 MAC地址 在局域网中，硬件地址又称为物理地址或MAC地址（因为这种地址用在MAC帧中）。IEEE 802标准为局域网规定了一种48位的全球地址（一般都简称为“地址”)，是局域网中每一台计算机（广义计算机，如手机）固化在网卡ROM中的地址。 数据链路层才看mac地址 MAC地址格式 48 位的 MAC 地址 IEEE 的注册管理机构 RA 负责向厂家分配地址字段的前三个字节(即高位 24 位)。 地址字段中的后三个字节(即低位 24 位)由厂家自行指派，称为扩展标识符，必须保证生产出的适配器没有重复地址。 一个地址块可以生成224个不同的地址。这种 48 位地址称为 MAC-48，它的通用名称是EUI-48。“MAC地址”实际上就是适配器地址或适配器标识符EUI-48。 win使用ipconfig /all获取本地连接MAC地址 linux可使用下列命令查看 ifconfig -a win通过本地连接详细信息查看主MAC地址 IP地址和MAC地址 对于网络上的某一设备，如一台计算机或一台路由器，其IP地址是基于网络拓扑设计出的，同一台设备或计算机上，改动IP地址是很容易的（但必须唯一），而MAC则是生产厂商烧录好的，一般不能改动。 长度不同。IP地址为32位，MAC地址为48位。 分配依据不同。IP地址的分配是基于网络拓扑，MAC地址的分配是基于制造商。 寻址协议层不同。 以太网MAC帧格式 以太网 V2 的 MAC 帧格式 IEEE 802.3标准规定的无效MAC帧 （1）数据字段的长度与长度字段的值不一致； （2）帧的长度不是整数个字节； （3）用收到的帧检验序列 FCS 查出有差错； （4）数据字段的长度不在 46～1500 字节之间。考虑到MAC帧首部和尾部的长度共有18字节，可以得出有效的MAC帧长度为64～1518字节之间。 对于检查出的无效MAC帧就简单地丢弃。以太网不负责重传丢弃的帧。 IEEE 802.3 CSMA/CD协议 1.CSMA/CD的工作原理 CSMA/CD（Carrier Sense Multiple Access with collision detection，载波监听多路访问/碰撞检测）协议是IEEE 802.3在传统共享式以太网中一种共享传输介质的介质访问控制方法。使用的介质访问控制从逻辑上划分为两部分：介质访问控制子层（MAC）和物理层。 所有结点都共享网络传输信道，结点在发送数据之前，首先检测信道是否空闲，如果信道空闲则发送，否则就等待；在发送出信息后，再对冲突进行检测，当发现冲突时，则取消发送。 CSMA/CD介质访问控制方法 先听后发 边发边听 冲突停止 延迟重发 对CSMA/CD协议的工作原理补充说明 （1）“多路访问”说明是总线网络，许多计算机以多点接入的方式连接在一根总线上。协议的实质是“载波监听”和“碰撞检测”。 （2）“载波监听”是指每一个结点在发送数据之前先要检测一下总线上是否有其他计算机在发送数据，如果有，则暂时不要发送数据，以免发生碰撞。也就是前面所说的“先听后发”，一般采用称为载波侦听的技术，即一个结点在传输前先听信道，如果另一个结点正向信道上发送帧，结点则继续等待并侦听信道。如果侦听到该信道是空闲的，该结点则开始数据帧传输；否则，该结点将继续重复这个过程。 （3）“碰撞检测”，也称为“冲突检测”。就是边发边听和冲突停止。发送数据的结点采用称为碰撞检测的技术，边发送数据边检测信道上的信号电压大小，当一个结点检测到的信号电压摆动值超过一定的门限值时，就认为总线上至少有两个结点同时在发送数据，表明产生了碰撞，就要立即停止发送，免得继续浪费网络资源。 （4）在发生碰撞时，总线上传输的信号产生了严重的失真，无法从中恢复出有用的信息来。产生冲突并检测到冲突的两个结点不能直接进入下一次的载波监听环节，而是要等待一段随机时间后再尝试下一次传输。这个过程指的就是“延迟重发”阶段。 CSMA/CD协议发送端的工作流程 CSMA/CD协议接收端工作流程 以太网还采取了一种叫做冲突强化的措施 帧间最小间隔 帧间最小间隔为 9.6μs9.6 \\mu s9.6μs ，相当于 96 bit 的发送时间。 一个站在检测到总线开始空闲后，还要等待 9.6μs9.6 \\mu s9.6μs 才能再次发送数据。 这样做是为了使刚刚收到数据帧的站的接收缓存来得及清理，做好接收下一帧的准备。 2.冲突及解决 虽然我们通过多路访问和载波监听以及碰撞检测的措施解决了介质的共享问题，但还有几个疑问： ①为什么会产生冲突？ 当某个站监听到总线是空闲时，也可能总线并非真正是空闲的。 A 向 B 发出的信息，要经过一定的时间后才能传送到 B。 B 若在 A 发送的信息到达 B 之前发送自己的帧(因为这时 B 的载波监听检测不到 A 所发送的信息)，则必然要在某个时间和 A 发送的帧发生碰撞。 碰撞的结果是两个帧都变得无用。 电磁波在总线上的有限传播速率的影响 （传播时延） ②如果冲突在某种情况下是不可避免的，那发送数据的结点最多经过多少时间可以知道是否产生了冲突（即检测到冲突的时间）？ 在t=0t=0t=0时，A检测到信道为空闲，开始发送数据。而也B检测到信道为空闲。 在 t=τ−δt=\\tau - \\deltat=τ−δ 时（ 0δτ00δτ ）， A发送的数据还没有到达B，由于B检测到信道是空闲，因此B也开始发送数据。 经过 δ2\\frac{\\delta}{2}2δ​时间 后，即在t=τ−δ2t=\\tau-\\frac{\\delta}{2}t=τ−2δ​时，A发送的数据和B发送的数据发生了碰撞。但这时A和B都不知道发生了碰撞。 在t=τ t=\\tau t=τ时，B检测到发生了碰撞，于是停止发送数据。 在 t=2τ−δt=2\\tau - \\deltat=2τ−δ 时，A也检测到发生了碰撞，因而也停止发送数据。 A和B均发送数据失败，都要推迟一段时间再重新发送。 争用期: 最先发送数据帧的站，在发送数据帧后至多经过时间 2τ2\\tau2τ（两倍的端到端传播时延）就可知道发送的数据帧是否遭受了碰撞。 以太网的端到端传播时延 2τ2\\tau2τ称为争用期，或碰撞窗口。 经过争用期这段时间还没有检测到碰撞，才能肯定这次发送不会发生碰撞。 争用期的长度 以太网取 51.2 μs\\mu sμs 为争用期的长度。 对于 10 Mb/s 以太网，在争用期内可发送512 bit，即 64 字节。 以太网在发送数据时，若前 64 字节没有发生冲突，则后续的数据就不会发生冲突。 最短有效帧长 如果发生冲突，就一定是在发送的前 64 字节之内。 由于一检测到冲突就立即中止发送，这时已经发送出去的数据一定小于 64 字节。 以太网规定了最短有效帧长为 64 字节，凡长度小于 64 字节的帧都是由于冲突而异常中止的无效帧。 ③结点检测到冲突后，除了冲突停止，还要延迟重发，就是要等待一段随机时间后再重新尝试，那么等待的随机时间是如何确定？ 发生碰撞的结点在停止数据发送后，不是立即再发送数据，而是延迟等待一个随机的时间。延迟重传是为了减小再次发生冲突的概率。 3.CSMA/CD协议的要点 （1）适配器从网络层获得一个分组，加上以太网的首部和尾部组成以太网帧，放入适配器的缓存中，准备发送。 （2）若适配器检测到信道空闲（即在96比特时间内没有检测到信道上有信号），就发送。若检测到信道忙，则继续检测并等待信道转为空闲（加上96比特时间），然后发送。 （3）在发送过程中继续检测信道，若一直未检测到碰撞，就顺利把这个帧成功发送完毕。若检测到碰撞，则中止数据的发送，并发送冲突加强信号。 （4）在中止发送后，执行二进制指数退避算法，等待r倍的512比特时间后，返回到步骤(2)。 10Mbps以太网 10BASE-T 中每个站到集线器的距离不超过 100 m。 这种 10 Mb/s 速率的非屏蔽双绞线星形网结构，既降低了成本，又提高了可靠性。 10BASE-T 双绞线以太网的出现，是局域网发展史上的一个非常重要的里程碑，它为以太网在局域网中的统治地位奠定了牢固的基础。 以太网的四种不同物理层 速率达到或超过 100 Mb/s 的以太网称为高速以太网。 在双绞线上传送 100 Mb/s 基带信号的星型拓扑以太网，仍使用 IEEE 802.3 的CSMA/CD 协议。100BASE-T 以太网又称为快速以太网(Fast Ethernet)。 100BASE-T 以太网的特点 在全双工方式下工作而无冲突发生。因此，不使用 CSMA/CD 协议。 MAC 帧格式仍然是 802.3 标准。 保持最短帧长不变，但将一个网段的最大电缆长度减小到 100 m。 帧间时间间隔从原来的 9.6 μs\\mu sμs改为现在的 0.96 μs\\mu sμs。 三种不同的物理层标准(IEEE 802.3u) 100BASE-TX 使用 2 对 UTP 5 类线或屏蔽双绞线 STP。 100BASE-FX 使用 2 对光纤。 100BASE-T4 使用 4 对 UTP 3 类线或 5 类线。 双绞线绕对的排列顺序 引脚顺序 介质直接连接信号 EIA/TIA-568A布线标准 EIA/TIA-568B布线标准 绿蓝橙棕，三五对调，混色在前 橙蓝绿棕，三五对调，混色在前 1 TX+（传输） 绿白 桔白 2 TX-（传输） 绿 桔 3 RX+（接收） 桔白 绿白 4 没有使用 蓝 蓝 5 没有使用 蓝白 蓝白 6 RX-（接收） 桔 绿 7 没有使用 棕白 棕白 8 没有使用 棕 棕 直通双绞线 两端同时用TIA/EIA-568A，或者TIA/EIA-568B标准，用于不同设备的连接，如PC机到集线器、交换机的连接，交换机到路由器的连接等 交叉双绞线 双绞线一端遵循568A，另一端遵循568B标准 交换机普通端口与交换机普通端口之间或计算机网卡与计算机网卡之间直接相连 现在也可以计算机网卡与计算机网卡之间直接相同568A568A相连，机器自己做协议判 交叉双绞线 千兆以太网 允许在 1 Gb/s 下全双工和半双工两种方式工作。 使用 802.3 协议的帧格式。 在半双工方式下使用 CSMA/CD 协议（全双工方式不需要使用 CSMA/CD 协议）。 与 10BASE-T 和 100BASE-T 技术向后兼容。 吉比特以太网的物理层 1.1000BASE-X（802.3z标准） （1）1000BASE-SX。850nm波长 （2）1000BASE-LX。1300nm波长 （3）1000BASE-CX 。 2.1000BASE-T（ 802.3ab标准） 使用4对5类UTP，传输距离100M。 吉比特以太网的配置举例 10吉比特以太网/100吉比特以太网 10吉比特以太网 10GE具有如下的特点： （1）帧格式与10Mbps、100Mbps和1000Mbps以太网的帧格式基本相同； （2）保留了802.3标准对以太网最小帧长度和最大帧长度的规定； （3）传输介质不再使用双绞线，只使用光纤。在超过40km的长距离传输中采用光收发器和单模光纤接口，以便能在广域网和城域网的范围内工作； （4）只工作在全双工，不存在争用问题。由于不使用CSM A／CD协议，传输距离不受冲突检测的限制 10GE规范对应的IEEE802标准 年份 局域网标准 以太网规范 2002 IEEE802. 3ae 10GBASE-SR10GBASE-LR10GBASE-ER10GBASE-LX410GBASE-SW10GBASE-LW10GBASE-EW 2004 IEEE 802.3ak 10GBASE -CX4 2006 IEEE 802.3an 10GBASE-T 2006 IEEE 802.3aq 10GBASE-LRM 2007 IEEE 802.3ap 10GBASE-KR10GBASE-KX4 各类10GE规范的比较 应用领域 10GE规范 使用的传输介质 有效传输距离 局域网 10GBASE-SR 850nm波长多模光纤，50µm直径 OM3光纤 300m 局域网 10GBASE-LR 1310nm波长单模光纤 10km 局域网 10GBASE-LRM 62.5µm直径 OM3光纤 260m 局域网 10GBASE-ER 1550nm波长单模光纤 40km 局域网 10GBASE-ZR 1550nm波长单模光纤 80km 局域网 10GBASE-LX4 1310nm波长单模或多模光纤 300m(多模)10km（单模） 局域网 10GBASE -CX4 4对双芯同轴电缆 15m 局域网 10GBASE-T 6类、6a类双绞线 66m(6类)100m（6a类） 背板以太网 10GBASE-KR 铜线（串行接口） 1m 背板以太网 10GBASE-KX4 铜线（并行接口） 1m SDH/SONET广域网 10GBASE-SW 850nm波长多模光纤，50µm直径 OM3光纤 300m SDH/SONET广域网 10GBASE-LW 1310nm波长单模光纤 10km SDH/SONET广域网 10GBASE-EW 1550nm波长单模光纤 40km SDH/SONET广域网 10GBASE-ZW 1550nm波长单模光纤 80km 10吉比特以太网的两种物理层 局域网物理层 LAN PHY。局域网物理层的数据率是 10.000 Gb/s。 可选的广域网物理层 WAN PHY。广域网物理层具有另一种数据率，这是为了和所谓的“Gb/s”的 SONET/SDH（即OC-192/STM-64）相连接。 为了使 10 吉比特以太网的帧能够插入到 OC-192/STM-64 帧的有效载荷中，就要使用可选的广域网物理层，其数据率为 9.95328 Gb/s。 100吉比特以太网 在10GE标准之后又制订了40GE/100GE（即40吉比特以太网和100吉比特以太网）的局域网标准IEEE 802.3ba-2010，于201 0年6月公布。 IEEE802.3ba 40GE/100GE物理层接口 接口类型 描述 40GbE 100GbE 带宽 40GBASE-KR4 1m 背板线路（backplane） √ 4X10Gbps 40GBASE-CR4100GBASE-CR10 7m铜线，由4条/10条独立的铜缆通道组成 √ √ 4X10Gbps10X10Gbps 40GBASE-SR4100GBASE-SR10 100m OM3多模光纤，由4条/10条独立的多模光纤通道（850nm）组成 √ √ 4X10Gbps10X10Gbps 40GBASE-LR4 10km单模光纤 √ 4X10Gbps 100GBASE-LR4 10km单模光纤，由4个WDM（1310nm，800GHz波长间隔）通道组成 √ 4X25Gbps 100GBASE-ER4 40km单模光纤，由4个WDM（1310nm， 800GHz波长间隔）通道组成 √ 4X25Gbps 以太网演进过程主要变化特征 从以太网的演进过程可以证明 （1）可扩展的（速率从10 Mb/s到100 Gb/s）。 （2）灵活的（多种媒体、全／半双工、共享／交换）。 （3）易于安装。 （4）稳健性好。 "},"page/1067.html":{"url":"page/1067.html","title":"虚拟局域网","keywords":"","body":"虚拟局域网 虚拟局域网概述 虚拟局域网 VLAN 是由一些局域网网段构成的与物理位置无关的逻辑组。这些网段具有某些共同的需求。每一个 VLAN 的帧都有一个明确的标识符，指明发送这个帧的工作站是属于哪一个 VLAN。虚拟局域网其实只是局域网给用户提供的一种服务，而并不是一种新型局域网。 VLAN具有以下优点 （1）更有效地共享网络资源。如果用交换机构成较大的局域网，大量的广播报文就会使网络性能下降。VLAN能将广播报文限制在本VLAN范围内，从而提升了网络的效能。 （2）简化网络管理。当结点物理位置发生变化时，如跨越多个局域网，通过逻辑上配置VLAN即可形成网络设备的逻辑组，无需重新布线和改变IP地址等。这些逻辑组可以跨越一个或多个二层交换机。 （3）提高网络的数据安全性。一个VLAN中的结点接收不到另一个VLAN中其他结点的帧。 当 B1 向 VLAN2 工作组内成员发送数据时，工作站 B2 和 B3 将会收到广播的信息。 B1 发送数据时，工作站 A1, A2 和 C1都不会收到 B1 发出的广播信息。 虚拟局域网限制了接收广播信息的工作站数，使得网络不会因传播过多的广播信息(即“广播风暴”)而引起性能恶化。 虚拟局域网的实现技术 （1）基于端口的VLAN。 （2）基于MAC地址的VLAN。 （3）基于协议的VLAN。 （4）基于网络地址的VLAN。 "},"page/1099.html":{"url":"page/1099.html","title":"VLAN实验","keywords":"","body":"1 实验目标 （1） 了解VLAN技术的产生背景。 （2） 掌握802.1q的技术原理。 （3） 掌握Access和Trunk链路类型的配置。 2 实验内容 试验设备：Cisco2950交换机 IP地址分配 设备名称 IP地址 PC1 192.168.1.1/24 PC2 192.168.1.2/24 设备名称 IP地址 PC1 192.168.1.1/24 PC2 192.168.1.2/24 PC3 192.168.1.3/24 PC4 192.168.1.4/24 交换机Fa0/1和Fa0/2都配置成Access；验证交换机下PC1与PC2在相同VLAN和不同VLAN时的连通性。 交换机SW1和SW2的Fa0/1和Fa0/2都配置成Access，Fa0/24配置成Trunk；PC1与PC3属于VLAN10，PC2与PC4属于VLAN20；验证PC1与PC3的连通性和PC1与PC4的连通性。 3 实验结果 3.1 单交换机vlan 未设置Vlan，默认都是vlan1 PC>ipconfig IP Address......................: 192.168.1.1 Subnet Mask.....................: 255.255.255.0 Default Gateway.................: 0.0.0.0 PC>ping 192.168.1.2 Pinging 192.168.1.2 with 32 bytes of data: Reply from 192.168.1.2: bytes=32 time=23ms TTL=128 Reply from 192.168.1.2: bytes=32 time=7ms TTL=128 Reply from 192.168.1.2: bytes=32 time=9ms TTL=128 Reply from 192.168.1.2: bytes=32 time=4ms TTL=128 Ping statistics for 192.168.1.2: Packets: Sent = 4, Received = 4, Lost = 0 (0% loss), Approximate round trip times in milli-seconds: Minimum = 4ms, Maximum = 23ms, Average = 10ms 划分vlan Switch>enable Switch#configure terminal Enter configuration commands, one per line. End with CNTL/Z. Switch(config)#vlan 2 Switch(config-vlan)#name vlan2 Switch(config-vlan)#exit Switch(config)#vlan 3 Switch(config-vlan)#name vlan3 Switch(config-vlan)#exit Switch(config)# Switch(config)# Switch(config)#interface FastEthernet0/2 Switch(config-if)# Switch(config-if)# Switch(config-if)#switchport access vlan 2 Switch(config-if)# Switch(config-if)#exit Switch(config)#interface FastEthernet0/2 Switch(config-if)# Switch(config-if)#exit Switch(config)#interface FastEthernet0/1 Switch(config-if)# Switch(config-if)#exit Switch(config)#interface FastEthernet0/2 Switch(config-if)# Switch(config-if)#exit Switch(config)#interface FastEthernet0/3 Switch(config-if)# Switch(config-if)# Switch(config-if)#switchport access vlan 3 Switch(config-if)# 配置后测试 PC>ipconfig IP Address......................: 192.168.1.1 Subnet Mask.....................: 255.255.255.0 Default Gateway.................: 0.0.0.0 PC>ping 192.168.1.2 Pinging 192.168.1.2 with 32 bytes of data: Request timed out. Request timed out. Request timed out. Request timed out. Ping statistics for 192.168.1.2: Packets: Sent = 4, Received = 0, Lost = 4 (100% loss), 3.2 多交换机vlan 配置SW1 Switch>enable Switch#configure terminal Enter configuration commands, one per line. End with CNTL/Z. Switch(config)#vlan 10 Switch(config-vlan)#name VLAN10 Switch(config-vlan)#exit Switch(config)#vlan 20 Switch(config-vlan)#name VLAN20 Switch(config-vlan)#exit Switch(config)# Switch(config)#interface FastEthernet0/2 Switch(config-if)# %LINEPROTO-5-UPDOWN: Line protocol on Interface FastEthernet0/2, changed state to down %LINEPROTO-5-UPDOWN: Line protocol on Interface FastEthernet0/2, changed state to up Switch(config-if)#switchport mode trunk Switch(config-if)# Switch(config-if)#exit Switch(config)#interface FastEthernet0/4 Switch(config-if)# Switch(config-if)#exit Switch(config)#interface FastEthernet0/4 Switch(config-if)# %LINEPROTO-5-UPDOWN: Line protocol on Interface FastEthernet0/4, changed state to down %LINEPROTO-5-UPDOWN: Line protocol on Interface FastEthernet0/4, changed state to up Switch(config-if)#switchport mode trunk Switch(config-if)# Switch(config-if)#exit Switch(config)#interface FastEthernet0/1 Switch(config-if)# Switch(config-if)#exit Switch(config)#interface FastEthernet0/2 Switch(config-if)# Switch(config-if)#switchport mode access Switch(config-if)# Switch(config-if)# Switch(config-if)#switchport access vlan 10 Switch(config-if)# Switch(config-if)#exit Switch(config)#interface FastEthernet0/3 Switch(config-if)# Switch(config-if)#switchport mode access Switch(config-if)# Switch(config-if)# Switch(config-if)# Switch(config-if)#switchport access vlan 20 Switch(config-if)# 查看SW1的vlan信息 Switch#en Switch#enable Switch#show vlan VLAN Name Status Ports ---- -------------------------------- --------- ------------------------------- 1 default active Fa0/1, Fa0/5, Fa0/6, Fa0/7 Fa0/8, Fa0/9, Fa0/10, Fa0/11 Fa0/12, Fa0/13, Fa0/14, Fa0/15 Fa0/16, Fa0/17, Fa0/18, Fa0/19 Fa0/20, Fa0/21, Fa0/22, Fa0/23 Fa0/24 10 VLAN10 active Fa0/2 20 VLAN20 active Fa0/3 1002 fddi-default act/unsup 1003 token-ring-default act/unsup 1004 fddinet-default act/unsup 1005 trnet-default act/unsup VLAN Type SAID MTU Parent RingNo BridgeNo Stp BrdgMode Trans1 Trans2 ---- ----- ---------- ----- ------ ------ -------- ---- -------- ------ ------ 1 enet 100001 1500 - - - - - 0 0 10 enet 100010 1500 - - - - - 0 0 20 enet 100020 1500 - - - - - 0 0 1002 fddi 101002 1500 - - - - - 0 0 1003 tr 101003 1500 - - - - - 0 0 1004 fdnet 101004 1500 - - - ieee - 0 0 1005 trnet 101005 1500 - - - ibm - 0 0 Remote SPAN VLANs ------------------------------------------------------------------------------ Primary Secondary Type Ports ------- --------- ----------------- ------------------------------------------ Switch# 配置SW2 Switch>enable Switch#configure terminal Enter configuration commands, one per line. End with CNTL/Z. Switch(config)#vlan 10 Switch(config-vlan)#name VLAN10 Switch(config-vlan)#exit Switch(config)#vlan 20 Switch(config-vlan)#name VLAN20 Switch(config-vlan)#exit Switch(config)# Switch(config)#interface FastEthernet0/2 Switch(config-if)# Switch(config-if)#switchport mode access Switch(config-if)# Switch(config-if)# Switch(config-if)#switchport access vlan 10 Switch(config-if)# Switch(config-if)#exit Switch(config)#interface FastEthernet0/3 Switch(config-if)# Switch(config-if)#switchport mode access Switch(config-if)# Switch(config-if)# Switch(config-if)#switchport access vlan 20 Switch(config-if)# Switch(config-if)#exit Switch(config)#interface FastEthernet0/4 Switch(config-if)# Switch(config-if)#exit Switch(config)#interface FastEthernet0/4 Switch(config-if)# 测试 Packet Tracer PC Command Line 1.0 PC>ipconfig IP Address......................: 192.168.1.1 Subnet Mask.....................: 255.255.255.0 Default Gateway.................: 0.0.0.0 PC>ping 192.168.1.3 Pinging 192.168.1.3 with 32 bytes of data: Reply from 192.168.1.3: bytes=32 time=35ms TTL=128 Reply from 192.168.1.3: bytes=32 time=15ms TTL=128 Reply from 192.168.1.3: bytes=32 time=14ms TTL=128 Reply from 192.168.1.3: bytes=32 time=16ms TTL=128 Ping statistics for 192.168.1.3: Packets: Sent = 4, Received = 4, Lost = 0 (0% loss), Approximate round trip times in milli-seconds: Minimum = 14ms, Maximum = 35ms, Average = 20ms PC>ping 192.168.1.4 Pinging 192.168.1.4 with 32 bytes of data: Request timed out. Request timed out. Request timed out. Request timed out. Ping statistics for 192.168.1.4: Packets: Sent = 4, Received = 0, Lost = 4 (100% loss), PC>ping 192.168.1.2 Pinging 192.168.1.2 with 32 bytes of data: Request timed out. Request timed out. Request timed out. Request timed out. Ping statistics for 192.168.1.2: Packets: Sent = 4, Received = 0, Lost = 4 (100% loss), 4. 结论 vlan可以划分虚拟局域网，处在不同虚拟局域网之间不能ping通，经过两个交换机划分部分相同vlan并连接，可实现重新分割组网。 Access可以指定VLAN，即不同VLAN之间不通，Trunk允许所有VLAN相通。 "},"page/1084.html":{"url":"page/1084.html","title":"实验","keywords":"","body":""},"page/1085.html":{"url":"page/1085.html","title":"Wireshark","keywords":"","body":"Wireshark使用教程 1 什么是wireshark Wireshark是世界上最流行的网络分析工具。这个强大的工具可以捕捉网络中的数据，并为用户提供关于网络和上层协议的各种信息。与很多其他网络工具一样，wireshark也使用pcap network library来进行封包捕捉。 2 wireshark的下载与安装 2.1 下载wireshark 访问wireshark的官方主页 https://www.wireshark.org/download.html 我们可以下载wireshark的安装文件，在这里我们既可以下载到最新的发布版本软件安装文件，也可以下载到以前发布的旧版本软件安装文件。 Wireshark支持多个操作系统，在下载安装文件的时候注意选择与自己PC的操作系统匹配的安装文件。下面的介绍我们都是以windows XP 系统为例。 2.2 安装wireshark 选择组件（Choose Components） Wireshark——GUI网络分析工具 TSshark-TShark ——命令行的网络分析工具 插件/扩展(Wireshark,TShark分析引擎): l Dissector Plugins——分析插件：带有扩展分析的插件 l Tree Statistics Plugins——树状统计插件：统计工具扩展 l Mate - Meta Analysis and Tracing Engine (experimental)——可配置的显示过滤引擎。 l SNMP MIBs——SNMP，MIBS的详细分析。 Tools/工具(处理捕捉文件的附加命令行工具 l Editcap是一个读取捕捉文件的程序，还可以将一个捕捉文件力的部分或所有信息写入另一个捕捉文件。 l Tex2pcap是一个读取ASCII hex，写入数据到libpcap文件的程序。 l Mergecap是一个可以将多个捕捉文件合并为一个的程序。 l Capinfos是一个显示捕捉文件信息的程序。 User’s Guide用户手册——本地安装的用户手册。如果不安装用户手册，帮助菜单的大部分按钮的结果可能就是访问Internet. 选择附加任务（Select Additional Tasks） l Start Menu Item——增加一些快捷方式到开始菜单 l Desktop Icon——增加Wireshark图标到桌面 l Quick Launch Icon——增加一个Wireshark图标到快速启动工具栏 l Associate file extensions to Wireshark-Wireshark——将捕捉包默认打开方式关联到Wireshark 选择安装目录（Choose Install Location） 安装路径默认为C盘，用户可以根据自己的需求更改默认安装路径。 安装WinPcap（Install WinPcap） Wireshark安装包里包含了最新版的WinPcap安装包。如果您没有安装WinPcap 。您将无法捕捉网络流量。但是您还是可以打开以保存的捕捉包文件。 当一切都选择完成后，点击安装按钮等待完成安装即可。 3 用户界面 安装完成后，即可运行wireshark。打开wireshark后的抓包主界面如下图所示。Wireshark主窗口由如下部分组成： l 菜单——用于开始操作。 l 主工具栏——提供快速访问菜单中经常用到的项目的功能。 l Fiter toolbar/过滤工具栏——提供处理当前显示过滤得方法。 l Packet List面板——显示打开文件的每个包的摘要。点击面板中的单独条目，包的其他情况将会显示在另外两个面板中。 l Packet detail面板——显示您在Packet list面板中选择的包的更多详情。 l Packet bytes面板——显示您在Packet list面板选择的包的数据，以及在Packet details面板高亮显示的字段。 l 状态栏——显示当前程序状态以及捕捉数据的更多详情。 3.1 菜单栏 主菜单包括以下几个项目: l File ——包括打开、合并捕捉文件，save/保存,Print/打印,Export/导出捕捉文件的全部或部分。以及退出Wireshark项. l Edit ——包括如下项目：查找包，时间参考，标记一个多个包，设置预设参数。（剪切，拷贝，粘贴不能立即执行。） l View ——控制捕捉数据的显示方式，包括颜色，字体缩放，将包显示在分离的窗口，展开或收缩详情面版的地树状节点 l GO ——包含到指定包的功能。 l Capture——**控制抓包的对话框，包括接口，选项，开始/停止/重新开始和过滤器。** l Analyze ——**包含处理显示过滤，允许或禁止分析协议，配置用户指定解码和追踪TCP流等功能。** l Statistics ——**包括的菜单项用户显示多个统计窗口，包括关于捕捉包的摘要，协议层次统计等等。** l Help ——包含一些辅助用户的参考内容。如访问一些基本的帮助文件，支持的协议列表，用户手册。 3.2 工具栏 l ——打开接口列表对话框 l ——打开捕捉选项对话框 l ——使用最后一次的捕捉设置立即开始捕捉 l ——停止当前捕捉 l ——停止当前捕捉并立即重新开始 l ——启动打开文件对话框，用于载入文件 l ——保存当前文件为任意其他的文件，它将会弹出一个保存对话框 l 注：如果当前文件是临时未保存文件，图标将会显示为 l ——关闭当前文件。如果未保存，将会提示是否保存 l ——重新载入当前文件 l ——打印捕捉文件的全部或部分，将会弹出一个打印对话框 l ——打开一个对话框，查找包 l ——返回历史记录的上一个 l ——跳转到历史记录中的下一个包 l ——弹出一个设置跳转到指定的包的对话框 l ——跳转到第一个包 l ——跳转到最后一个包 l ——切换是否以彩色方式显示包列表 l ——开启/关闭实时捕捉时自动滚动包列表 l ——增大字体 l——缩小字体 l ——设置缩放大小为100% l ——重置列宽，是内容适合列宽（使包列表内的文字可以显示） l ——**打开对话框，用于创建、编辑捕捉过滤器** l ——**打开对话框，用于创建、编辑显示过滤器** l ——定义以彩色方式显示数据包的规则 l ——打开首选项对话框 l ——打开帮助对话框 3.3 过滤工具栏 点击Filter按钮会弹出display filter**对话框** 这个和在工具栏上输入协议来查找包的结果是一样的，只是它方便点 l New——增加一个新的过滤器到列表中。当前输入的Fiter name，Filter string将会被使用并被保存，如果这些都为空，将会设置为“new”。 l Delete——删除选中的过滤器。如果没有过滤器被选中则为灰色 l Filter name——修改当前选择的过滤器的名称。注：过滤器名称仅用在此处为了区分方便而已，没有其他用处。可以将多个过滤器使用同一个名称，但这样很不方便。 l Filter string——修改当前选中过滤器的内容。仅适用显示过滤：在输入时进行语法检查。 l Add expression——仅适用显示过滤：打开增加表达式对话框，辅助创建过滤表达式。 l OK——仅适用显示过滤：应用当前显示选择的过滤器，关闭当前对话框。 l Apply——仅适用显示过滤：应用当前显示选择的过滤器。 l Cancel——放弃当前设置，关闭当前对话框。 点击Expression按钮，会出现Filter Expression对话框 l Field name——从协议字段书中选择协议字段。每个可过滤协议都放在第一级。点击“+”展开列表，可以获得关于那些协议的可过滤字段。 l Relation——从可以关系列表中选择关系。Is present是一元关系，如果选择的字段存在，表达式为真值。其它关系为二元关系，需附加数据来完成。如果从字段名列表选择一个字段，并选择一个二元关系，你可能需要输入值，也有可能是范围信息。 l Value——在此输入合适的配置值，输入的值同样要符合你选择的field name的属性值类型。 l Predefined values——有些协议字段包含预设值可用，这点和C语言中的枚举变量类似。如果选择的协议有这样的值定义，你可以再次选择。 在工具栏上输 点击在此区域输入或修改显示的过滤字符，在输入过程中会进行语法检查。如果您输入的格式不正确，或者未输入完成，则背景显示为红色。直到您输入合法的表达式，背景会变为绿色。你可以点击下拉列表选择您先前键入的过滤字符。列表会一直保留，即使您重新启动程序。 3.4 封包列表 封包列表中显示所有已经捕获的封包。在这里您可以看到发送或接收方的MAC/IP地址，TCP/UDP端口号，协议或者封包的内容。如果捕获的是一个OSI layer 2的封包，您在Source（来源）和Destination（目的地）列中看到的将是MAC地址，当然，此时Port（端口）列将会为空。 如果捕获的是一个OSI layer 3或者更高层的封包，您在Source（来源）和Destination（目的地）列中看到的将是IP地址。Port（端口）列仅会在这个封包属于第4或者更高层时才会显示。 您可以在这里添加/删除列或者改变各列的颜色：Edit menu -> Preferences。 3.5 封包列表信息 这里显示的是在封包列表中被选中项目的详细信息。信息按照不同的OSI layer进行了分组，您可以展开每个项目查看。 3.6 16进制数据 “解析器”在Wireshark中也被叫做“16进制数据查看面板”。这里显示的内容与“封包详细信息”中相同，只是改为以16进制的格式表述。 4 wireshark实时捕捉数据包 使用wireshark捕捉数据包可以使用下面几种方式： l 使用打开捕捉接口对话框，浏览可用的本地网络接口，选择需要进行捕捉的接口启动捕捉 l 使用\"捕捉选项\"按钮启动对话框开始捕捉。 l 如果前次捕捉时的设置和现在的要求一样，可以点击\"开始捕捉\"按钮或者是菜单项立即开始本次捕捉。 l 如果已经知道捕捉接口的名称，可以使用如下命令从命令行开始捕捉： wireshark -i eth0 –k 此命令会从eht0接口开始捕捉。 4.1 捕捉接口对话框 如果从捕捉菜单选择interface按钮（或者从主工具栏选择），wireshark弹出Capture Interface/捕捉接口对话框。 这个对话框只显示本地已知的网络接口，wireshark可能无法检测到所有的本地接口，wireshark不能检测远程可用的网络接口，只能列出可用的网络接口。 l IP——wireshark能解析的第一个IP地址，如果接口未获得IP地址（如，不存在可用的DHCP服务器），将会显示”unkown”，如果有超过一个IP的，只显示第一个（无法确定显示哪一个）。 l Packets——打开该窗口后，从此接口捕捉到的包的数目。如果一直没有接收到包，则会显示为灰色。 l Packets/s——最近一秒捕捉包的数目。如果最近一秒没有捕捉到包，将会是灰色显示。 l Stop——停止当前包的捕捉。 l Capture——从选择的接口立即开始捕捉，使用最后一次捕捉的设置。 l Option——打开该接口的捕捉选项对话框。 l Details——打开对话框显示接口的详细信息。 l Close——关闭对话框。 4.2 捕捉选项对话框 如果从捕捉菜单选择start按钮（或者从主工具栏选择），wireshark弹出Capture Option/捕捉选项对话框。 l Interface——指定想用于进行捕捉的接口，一次只能使用一个接口。 l IP address——选择接口的IP地址。如果系统未指定IP地址，将会显示为”unknown”。 l Link-layer header type——选择接口的工作层。 l Buffer size——输入用于捕捉的缓存大小。 l Capture packets inpromiscuous mode——**指定wireshark捕捉包时，设置接口为杂收模式。如果未指定该选项，wireshark将只能捕捉进出你电脑的数据包（不能捕捉整个局域网段的包）。** l Limit each packet to n bytes——指定捕捉过程中每个包的最大字节数。如果机制该选项，默认值为65535。 l Capture filter——**指定捕捉过滤。默认情况下是空的。** l File——指定用于捕捉的文件名。该字段默认为空白。如果保持空白，捕捉数据将会存储在临时文件夹。 l User multiple files——如果指定条件达到临界值，wireshark将会自动生成一个新文件，不适用于单独文件。 l Next file every nmegabyte(s)——仅适用于选中user multiple files，如果捕捉文件容量达到指定值，将会切换到新文件。 l Next file every n minutes(s)——仅适用于选中user multiple files，如果捕捉文件持续时间达到指定值，将会切换到新文件。 l Ring buffer with n files——仅适用于选中user multiple files，如果捕捉文件持续时间达到指定值，将会切换到新文件。 l Stop capture after n file(s)——仅适用于use multiple files，当生成指定数目文件时，在生成下一个文件时停止捕捉。 l After n packet(s)——在捕捉到指定数目数据包后停止捕捉。 l After n megabyte(s)——在捕捉到指定容量的数据(byte(s)/kilobyte(s)/megabyte(s)/gigabyte(s))后停止捕捉。如果没有适用”user multiple files”，该选项将是灰色。 l After n minute(s)——在达到指定时间后停止捕捉。 l Update list of packet in real time——在包列表面板实时更新捕捉数据。如果为选定该选项，在wireshark捕捉结束之前将不能显示数据。如果选中该选项，wireshark将生成两个独立的进程，通过捕捉进程传输数据给显示进程。 l Automatic scrolling in live capture——指定wireshark在有数据进入时实时滚动包列表面板，一直显示最新数据包。反之，则最新数据包会被放置在行末，但不会自动滚动面板。如果未设置”update list if packets in real time”,该选项竟是灰色不可选的。 l Hide capture info dialog——隐藏捕捉信息对话框。 l Enable MAC name resolution——设置是否让wireshark翻译MAC地址为名称。 l Enable network name resolution——**是否允许wireshark对网络地址进行解析。** 进行完上述设置以后，点击Start按钮进行捕捉。 4.3 停止捕捉 运行中的捕捉线程可以用以下列方法停止： 1． 使用捕捉信息对话框上的stop按钮停止。 2． 使用菜单项capture——stop 3． 使用工具栏项stop 4． 使用快捷键：Ctrl+E 5． 如果设置了触发停止的条件，捕捉达到条件时会自动停止。 4.4 重新启动捕捉 运行中的捕捉过程可以被重新启动，这将会移除上次捕捉的所有包。重新启动时一项方便的功能，类似于停止捕捉后，在很短的时间内立即开始捕捉。一下两种法师可以实现冲洗启动捕捉： 1． 使用菜单项\"Capture/ Restart\" 2． 使用工具栏\" Restart\" 5．文件输出与输入 5.1 抓包文件的保存 保存捕捉文件时可以通过File——Save As…菜单或选择住工具栏保存捕捉文件。 通过对话框，可以执行如下操作： 1． 输入指定的文件名。 2． 选择保存的目录。 3． 选择保存包的范围。 4． 通过点击file type/文件类型下拉表指定保存文件的格式。 5． 点击Save/OK按钮保存。如果保存时遇到问题，会出现错误提示。 6． 点击Cancel按钮退出而不保存捕捉包。 wireshark捕捉的包可以保存为其原生格式文件（libpcap），也可以保存为其他格式供其他工具进行读取分析。 Wireshark可以保存为如下格式： l Libpcap, tcpdump and various other tools using tcpdump’s capture format (.pcap, .cap, *.dmp) l Accellent 5Views (*.5vw) l HP-UX’s nettle (*.TRCO, TRC1) l Microsoft Network Monitor—NetMon (*.cap) l Network Associates Sniffer—DOS (.cap, .enc, trc, .fdc, *.syc) l Network Associates Sniffer—Windows (*.cap) l Network Instruments Observer version 9 (*.bfr) l Novell LANalyzer(*.tr1) l Sun snoop(.snoop,.cap) l Visual Networks Visual UpTime traffic (.) 5.2 wireshark捕捉文件输入 Wireshark可以读取以前保存的文件，想读取这些文件，只需选择菜单或工具栏的：“File/Open”。Wireshark将会弹出打开文件对话框。 常见对话框行为： l 选择文件和目录 l 点击Open/OK按钮，选择你需要的文件并打开它 l 点击Cancel按钮返回wireshark主窗口而不载入任何文件 Wireshark对话框标准操作扩展 l 如果选中文件，可以查看文件预览信息（文件大小，包个数…） l 通过“Display filter”对话框，显示字段指定显示过滤器。过滤器将会在打开文件后应用。在输入过滤字符时会进行语法检查。如果输入正确背景为绿色，如果错误或输入未结束，北京为红色。载入文件后，点击filter按钮会打开过滤对话框，用于辅助输入显示显示过滤表达式。 6 应用举例 上面介绍了wireshark软件的安装与使用方法，下面我们以捕捉本机PPLive网络电视流量为例说明一下wireshark的具体使用过程。 第一步：打开wireshark，会出现wireshark抓包开始界面。 第二步：点击，弹出接口对话框 第三步：从接口对话框中可以看到有三个接口，第一个为本地网卡，另外两个为虚拟机。我们要抓取本急流量，所以选择本地网卡接口，点击对应的Start按钮，开始捕捉包。 第四步：打开PPLive网络电视，选择节目进行播放。可以看到wireshark抓包界面不断地更新封包列表。 第五步：点击停止当前包的捕捉 第六步：点击按钮保存当前捕捉包。选择保存文件的路径及文件名称，保存类型如果没有特殊需求选择libpcap（注：文件保存类型参考5.1），选择完成后点击保存即完成一个本地PPLive网络电视流量包的捕捉。 第七步：如果不想保存当前捕捉包，点击按钮，会出现保存提示对话框，点击“Continue without Saving”按钮即关闭当前未保存包并回到wireshark抓包开始界面。 如果不想保存当前捕捉包并想立即开始新的捕捉，点击按钮。 "},"page/1129.html":{"url":"page/1129.html","title":"Cisco Packet Tracer","keywords":"","body":"Cisco Packet Tracer "},"page/1098.html":{"url":"page/1098.html","title":"基本命令","keywords":"","body":"实验一：路由器和交换机的基础操作 实验目标 学会简单的交换机和路由器操作命令 能识别并熟练切换Cisio设备三个主要模式 掌握Cisio的IOS快捷键 理解CLI中的错误提示消息 学会查看设备配置和保存配置 实验步骤 实验设备：2960交换机或2811路由器 1.三种模式 Cisco设备CLI主要分为以下几种模式：用户模式、特权模式、全局配置模式。 用户模式：以“>”来表示，例如，Switch>; 特权模式：以“#”来表示，例如，Switch#; 全局配置模式：以“(config)#”来表示，例如，Switch(config)#; 除此之外，还有接口模式和路由模式等子模式。 切换规则如下表所示 模式之间的切换 | 行为 | 命令 | | ------------------------------------ | ------------------ | | 用户模式-->特权模式 | enable | | 特权模式-->全局配置模式 | configure terminal | | 退回到前一个模式 | exit | | 从任意模式（除用户模式）退到特权模式 | end | 配置示例： Router> #当前在用户模式 Router> Router>enable #进入特权模式 Router# Router# Router#configure terminal #进入全局配置模式 Enter configuration commands, one per line. End with CNTL/Z. Router(config)# Router(config)# Router(config)#exit #退到特权模式 Router# %SYS-5-CONFIG_I: Configured from console by console Router# Router# Router#exit #退到初始登录界面（用户模式） Router con0 is now available Press RETURN to get started. Router> Router> Router> # 只能从用户模式到特权模式到全局配置模式，没法越级切换 Router> Router> Router>configure terminal ^ % Invalid input detected at '^' marker. Router> Router> # 每次退出也都是退出一级 # 用户模式可以用上下键切换最近输入命令 # 用户模式进入特权模式可以用上下键切换最近命令 # 特权模式进入全局配置模式不能用上下键切换密码 # 从高等级到低等级不能用上下键切换最近命令 # 可以上下键切换命令的，也可以输入一半，剩下自动补全以该命令开头最近输入的命令 2.快捷操作 Ciscio设备CLI的快捷操作主要有三种：热键、命令简写、上下文相关帮助。 2.1热键 常用热键 | 命令行编辑热键 | 说明 | | -------------- | ------------------------------------------------------------ | | Tab | 完成命令或关键字的剩余部分 | | Backspace | 删除光标左侧的一个字符 | | Ctrl-Shift-6 | 允许用户终止Cisco IOS进程例 ping 或traceroute也可以全局配置模式下输入no ip domain-lookup防止DNS解析命令 | | Ctrl-C | 放弃当前命令并退出配置模式 | | Ctrl-Z | 退出配置模式并返回特权模式 | | 上下键 | 切换当前用户最近输入的命令，也可以输入一半然后上下键补全最近以该命令开头 | 2.2命令简写 Cisco设备CLI支持命令简写功能，即可以用几个字符表示命令中的一个单词，不过要注意的是这几个字符必须能够唯一表示该单词，否则该命令无效并且会弹出错误提示消息。 如果出现''% Ambiguous command: \"e\"\"类似字样，则说明输入字符不足，该设备无法识别该命令。 配置示例： Router> Router>en # 用en表示enable进入特权模式 Router# Router#conft # 错误，当作DNS或者主机但是找不到，会假死，用ctrl+c放弃当前命令并退出配置模式，或者Ctrl-Shift-6终止进程 Translating \"conft\"...domain server (255.255.255.255) % Name lookup aborted Router#conf t # 正确，用conf t表示configure terminal进入全局配置模式 Enter configuration commands, one per line. End with CNTL/Z. Router(config)#ex #用ex表示exit退到前一个模式 Router# %SYS-5-CONFIG_I: Configured from console by console Router#ena #正确，但是已经在特权模式 Router#exi #正确，表示exit，只要是以该字母组合开头，且不会有其他命令以该字符组合开头，就行 Router con0 is now available Press RETURN to get started. Router> Router> Router>e # 错误，e不能唯一表示exit，还有其他命令以e卡头命令 % Ambiguous command: \"e\" #e不能唯一表示该命令，还有其他命令也是以e开头的 Router> 2.3上下文相关帮助 Cisco设备上的Cisco IOS CLI提供两种上下文相关帮助： 字词帮助：在输入的字符后面输入问号。问号前面不要加入空格。设备将显示输入的字符开头的命令列表。例如sh?命令可显示一个命令列表，该列表中的命令都是以字符序列\"sh\"开头。 命令语法帮助：输入？命令可以获取完成命令所需的语法帮助。在命令名称之后，在关键字或参数未知输入问号。问号前要加空格。网络设备随后将显示一系列可用命令选项，代表回车。例如，输入show？可获取可供show命令使用选项列表。 3.错误提示消息分析 控制台错误消息分为三类： 命令不明确； 命令不完整； 命令不正确。 错误消息 含义 帮助 %Ambiguous command：“show con” 输入的字符不足，设备无法识别该命令 重新输入命令，接着输入？（不加空格）。显示所有可以与该命令一起输入的关键字 %Incomplete command 没有输入该命令所需的所有关键字或值 重新输入命令，然后输入？，前面加空格 %Invalid input detected at ‘^’ marker 命令输入不正确。‘^’标记出错的位置 输入？显示所有可用的命令或参数 Switch> Switch> Switch>enable Switch#c % Ambiguous command: \"c\" Switch#clock set % Incomplete command. Switch#clock set 19:50:00 % Incomplete command. Switch#clock set 19:50:00 25 6 ^ % Invalid input detected at '^' marker. Switch# Switch# 4. 配置保存和查看 4.1配置保存 可以使用Cisco IOS “copy”命令复制配置文件。 Copy命令的语法要求第一个参数指明来源（从哪里复制配置），后面的参数指明目标（将配置复制到哪里）。 在RAM中做出配置更改之后，必须保存到NVRAM中的启动配置文件，此时可使用copy running-config startup-config命令。 同样，使用copy startup-config running-config 命令可以将NVRAM中的启动配置文件复制回RAM中。 Switch# Switch# Switch#copy running-config startup-config #保存配置 Destination filename [startup-config]? Building configuration... [OK] Switch#copy startup-config running-config #恢复配置 Destination filename [running-config]? 947 bytes copied in 0.416 secs (2276 bytes/sec) Switch# %SYS-5-CONFIG_I: Configured from console by console Switch# Switch# 4.2配置查看 Show命令就是查看命令，需要跟具体的参数结合使用。 命令 功能 注意 show running-config 显示RAM中的当前运行配置 show startup-config 显示NVRAM中的已保存配置 查看保存配置前一定要先保存配置，否则会显示startup-config is not present Switch# Switch# Switch#show running-config #查看当前配置 Building configuration... Current configuration : 947 bytes ! version 12.1 no service timestamps log datetime msec no service timestamps debug datetime msec no service password-encryption ! hostname Switch ! ! ! interface FastEthernet0/1 ! interface FastEthernet0/2 ! interface FastEthernet0/3 ! interface FastEthernet0/4 ! interface FastEthernet0/5 ! interface FastEthernet0/6 ! interface FastEthernet0/7 ! interface FastEthernet0/8 ! interface FastEthernet0/9 ! interface FastEthernet0/10 ! interface FastEthernet0/11 ! interface FastEthernet0/12 ! interface FastEthernet0/13 ! interface FastEthernet0/14 ! interface FastEthernet0/15 ! interface FastEthernet0/16 ! interface FastEthernet0/17 ! interface FastEthernet0/18 ! interface FastEthernet0/19 ! interface FastEthernet0/20 ! interface FastEthernet0/21 ! interface FastEthernet0/22 ! interface FastEthernet0/23 ! interface FastEthernet0/24 ! interface Vlan1 no ip address shutdown ! ! line con 0 ! line vty 0 4 login line vty 5 15 login ! ! end Switch# Switch# Switch#show startup-config #查看保存配置 Using 947 bytes ! version 12.1 no service timestamps log datetime msec no service timestamps debug datetime msec no service password-encryption ! hostname Switch ! ! ! interface FastEthernet0/1 ! interface FastEthernet0/2 ! interface FastEthernet0/3 ! interface FastEthernet0/4 ! interface FastEthernet0/5 ! interface FastEthernet0/6 ! interface FastEthernet0/7 ! interface FastEthernet0/8 ! interface FastEthernet0/9 ! interface FastEthernet0/10 ! interface FastEthernet0/11 ! interface FastEthernet0/12 ! interface FastEthernet0/13 ! interface FastEthernet0/14 ! interface FastEthernet0/15 ! interface FastEthernet0/16 ! interface FastEthernet0/17 ! interface FastEthernet0/18 ! interface FastEthernet0/19 ! interface FastEthernet0/20 ! interface FastEthernet0/21 ! interface FastEthernet0/22 ! interface FastEthernet0/23 ! interface FastEthernet0/24 ! interface Vlan1 no ip address shutdown ! ! line con 0 ! line vty 0 4 login line vty 5 15 login ! ! end Switch# Switch# 实验总结 学会简单的交换机和路由器操作命令 能识别并熟练切换Cisio设备三个主要模式 用户模式-->特权模式-->全局配置模式 掌握Cisio的IOS快捷键 Tab 完成命令或关键字的剩余部分 Backspace 删除光标左侧的一个字符 Ctrl-Shift-6 允许用户终止Cisco IOS进程 上下键 切换当前用户最近输入的命令 理解CLI中的错误提示消息 %Ambiguous command：“show con” 输入的字符不足，设备无法识别该命令， 重新输入命令，接着输入？（不加空格）。显示所有可以与该命令一起输入的关键字 %Incomplete command 没有输入该命令所需的所有关键字或值， 重新输入命令，然后输入？，前面加空格 %Invalid input detected at ‘^’ marker 命令输入不正确。‘^’标记出错的位置， 输入？显示所有可用的命令或参数 学会查看设备配置和保存配置 copy命令 实验二：设备登陆及安全操作 实验目的 掌握SecureCRT软件登陆设备的操作 掌握登陆设备的几种方式的配置。 掌握基本设备安全配置和常用配置。 实验步骤 实验设备：2960交换机和2811路由器 设备登录方式： 登录方式 连接方式 备注 console pc和设备通过console线缆连接， 网络工程师在施工现场 Telnet 远程登录， 进行管理网络设备与PC之间通过双绞线连接，也有可能设备和pc之间隔着ISP SSH 远程登录， 进行管理网络设备与PC之间通过双绞线连接，也有可能设备和pc之间隔着ISP SecureCRT windows下登录到网络设备 双绞线：相同设备用交叉线，不同设备用直通线，pc和路由器之间用交叉线，不恰当地理解为路由器=pc+交换机，正常有交换机或者集线器采用直通线，其他都用交叉线。 1.设备管理前的基础操作 1.1路由器接口配置 给路由器接口配置为192.168.1.1/24 Router> Router>enable Router#configure terminal Enter configuration commands, one per line. End with CNTL/Z. Router(config)#interface f0/0 #进入接口子模式 Router(config-if)#no shutdown #开启接口，Cisco路由器默认关闭接口 Router(config-if)# %LINK-5-CHANGED: Interface FastEthernet0/0, changed state to up Router(config-if)#ip address 192.168.1.1 255.255.255.0 #配置ip地址 Router(config-if)# Router(config-if)# 1.2交换机的管理VLAN配置 给交换机配置一个ip地址192.168.1.1/24以便于pc能够登录到交换机 这个专门用于管理交换机的接口称之为管理VLAN，其实类似路由器的接口，只不过因为二层交换机的接口无法配置IP地址，所以用管理VLAN来代替。 Switch> Switch> Switch>enable Switch#conf t Enter configuration commands, one per line. End with CNTL/Z. Switch(config)#interface vlan 1 #进入管理vlan接口 Switch(config-if)#no shutdown #开启接口 Switch(config-if)# %LINK-5-CHANGED: Interface Vlan1, changed state to up %LINEPROTO-5-UPDOWN: Line protocol on Interface Vlan1, changed state to up Switch(config-if)#ip address 192.168.1.1 255.255.255.0 配置IP地址 Switch(config-if)# Switch(config-if)# 1.3no ip domain-lookup 这个是防止DNS解析 命令敲错时，会把错误命令当作域名查找，在网络里寻找DNS服务器，在寻找的过程中，因为过程非常慢，会出现假死现象， 若未配置，出现假死，也可以按ctrl+shift+6停止下来 Router> Router> Router>shflsh #输入一个不存在命令，会被当作主机查找，出现假死，ctrl+shift+6可停止 Translating \"shflsh\"...domain server (255.255.255.255) % Name lookup aborted #IOS不能识别，目前正在进行解析 Router>conf t #需要先进入特权模式，才能进入全局配置模式 ^ % Invalid input detected at '^' marker. Router>enable Router#conf t Enter configuration commands, one per line. End with CNTL/Z. Router(config)#no ip domain-lookup #关闭域名解析 Router(config)# Router(config)#shflsh #输入一个不存在命令 ^ % Invalid input detected at '^' marker. Router(config)#exit Router# %SYS-5-CONFIG_I: Configured from console by console Router#shflsh Translating \"shflsh\" #输入一个不存在命令 % Unknown command or computer name, or unable to find computer address #提示错误信息并重新回到当前模式 Router# 2.设备安全登录 设备安全登录有两种方式，一种是登录时的安全认证，另一种时CLI的安全认证，这其中又分为password和secret两种模式。 2.1console方式安全登录 Switch> Switch> Switch>en Switch#conf t #进入全局配置模式 Enter configuration commands, one per line. End with CNTL/Z. Switch(config)#enable password cisco #设置enable密码为cisco（CLI安全认证） Switch(config)#line console 0 #进入console线缆模式 Switch(config-line)#password 123 #配置线缆登录密码为123 Switch(config-line)#login #应用密码，即使密码生效 Switch(config-line)#exec-timeout 0 5 #设置登出超时时间为0分5秒，即5秒内不做任何操作将退出cli Switch(config-line)# Switch con0 is now available #5秒后退出了 Press RETURN to get started. User Access Verification #回车 Password: #输入密码123 Switch> Switch con0 is now available #5秒后退出 Press RETURN to get started. User Access Verification Password: #输入密码123 Switch>en Password: #输入密码123错误不是特权模式密码 Password: #输入密码cisco Switch# Switch# Switch con0 is now available #5秒后退出 Press RETURN to get started. 2.2Telnet方式安全登录 Switch>en Switch#conf t Enter configuration commands, one per line. End with CNTL/Z. Switch(config)#enable secret Cisco #以secret方式设置密码 Switch(config)#line vty 0 4 #进入VTY模式 Switch(config-line)#password ccna #配置密码 Switch(config-line)#login #使用线路下的密码进行登录验证 2.3SSH方式安全登录 Router> Router> Router>en Router#conf t Enter configuration commands, one per line. End with CNTL/Z. Router(config)#enable secret CISCO #以secret方式设置enable密码 Router(config)#hostname NET #修改主机名为NET NET(config)#ip domain-name cisco.com #配置域名 NET(config)#username cisco password 123 #配置用户名密码，用于登录 NET(config)#crypto key generate rsa #生成rsa密钥 The name for the keys will be: NET.cisco.com Choose the size of the key modulus in the range of 360 to 2048 for your General Purpose Keys. Choosing a key modulus greater than 512 may take a few minutes. How many bits in the modulus [512]: 1024 #设置rsa密钥为1024位 % Generating 1024 bit RSA keys, keys will be non-exportable...[OK] NET(config)#line vty 0 4 #进入VTY模式 *3? 1 1:26:18.387: %SSH-5-ENABLED: SSH 1.99 has been enabled NET(config-line)#transport input ssh #将VTY下默认的Telnet模式更改为SSH NET(config-line)#login local #使用本地用户名和密码进行登录验证 NET(config-line)# NET(config-line)# 实验总结 console pc和设备通过console线缆连接， 网络工程师在施工现场 Telnet 远程登录， 进行管理网络设备与PC之间通过双绞线连接，也有可能设备和pc之间隔着ISP SSH 远程登录， 进行管理网络设备与PC之间通过双绞线连接，也有可能设备和pc之间隔着ISP 实验三：设备文件的备份和恢复 实验目的 掌握TFTP以及FTP的使用，X-Modem恢复系统。 使用tftp备份/恢复startup-config，使用ftp备份/恢复IOS。 实验步骤 实验设备：Router1841以及Switch2950 1.实验预配 Router： Router> Router>int f0/0 ^ % Invalid input detected at '^' marker. Router> Router>en Router#conf t Enter configuration commands, one per line. End with CNTL/Z. Router(config)#int f0/0 Router(config-if)#ip add 192.168.1.2 255.255.255.0 Router(config-if)#no shutdown %LINK-5-CHANGED: Interface FastEthernet0/0, changed state to up %LINEPROTO-5-UPDOWN: Line protocol on Interface FastEthernet0/0, changed state to up Router(config-if)#copy running-config startup-config ^ % Invalid input detected at '^' marker. Router(config-if)#exit Router(config)#exit Router# %SYS-5-CONFIG_I: Configured from console by console Router#copy running-config startup-config Destination filename [startup-config]? Building configuration... [OK] Router# Switch： Switch>en Switch#conf t Enter configuration commands, one per line. End with CNTL/Z. Switch(config)#int vlan 1 Switch(config-if)#ip add 192.168.1.2 255.255.255.0 Switch(config-if)#no shutdown Switch(config-if)#exit Switch(config)#copy running-config startup-config ^ % Invalid input detected at '^' marker. Switch(config)# Switch(config)#exit Switch# %SYS-5-CONFIG_I: Configured from console by console Switch#copy running-config startup-config Destination filename [startup-config]? Building configuration... [OK] Switch# Server0 IP参数配置 Server0 TFTP参数配置 Server0 FTP参数配置 2.通过tftp备份恢复 2.1备份 路由器（交换机同理）使用tftp上传startup-config Router> Router> Router>en Router#copy startup-config tftp: #输入结束回车 Address or name of remote host []? 192.168.1.1 #tftp的ip地址 Destination filename [Router-confg]? my-router-config #保存名称，可直接回车，默认名称Router-config，Router是#前面的名称，后面config是配置的意思,最好自己指定，不然不好找 Writing startup-config....!! [OK - 463 bytes] 463 bytes copied in 3.011 secs (0 bytes/sec) Router# Router# 2.2恢复 路由器（交换机同理）使用tftp下载startup-config Router# Router#copy tftp: startup-config Address or name of remote host []? 192.168.1.1 #tftp地址 Source filename []? my-router-config #服务器上面备份的名称 Destination filename [startup-config]? #本地名称，直接回车即可，输入其他名称会提示非法参数 Accessing tftp://192.168.1.1/my-router-config... Loading my-router-config from 192.168.1.1: ! [OK - 463 bytes] 463 bytes copied in 0.004 secs (115750 bytes/sec) Router# 3.通过ftp备份恢复 3.1备份 路由器（交换机同理）使用ftp上传ios Router# Router# Router#dir flash #查看IOS名称 Directory of flash:/ 3 -rw- 33591768 c1841-advipservicesk9-mz.124-15.T1.bin #记录此bin名称 2 -rw- 28282 sigdef-category.xml 1 -rw- 227537 sigdef-default.xml 64016384 bytes total (30168797 bytes free) Router# Router#ip ftp username cisco ^ % Invalid input detected at '^' marker. Router# Router#conf t Enter configuration commands, one per line. End with CNTL/Z. Router(config)#ip ftp username cisco Router(config)#ip ftp password cisco Router(config)#copy flash: ftp ^ % Invalid input detected at '^' marker. Router(config)#exit Router# %SYS-5-CONFIG_I: Configured from console by console Router#copy flash: ftp Source filename []? c1841-advipservicesk9-mz.124-15.T1.bin #源文件名称，上面的bin文件名称 Address or name of remote host []? 192.168.1.1 #ftp服务器地址 Destination filename [c1841-advipservicesk9-mz.124-15.T1.bin]? #目的地址，直接回车 Writing c1841-advipservicesk9-mz.124-15.T1.bin... [OK - 33591768 bytes] 33591768 bytes copied in 193.747 secs (173000 bytes/sec) Router# 3.2恢复 路由器（交换机同理）使用ftp下载ios Router# Router#copy ftp: flash: Address or name of remote host []? 192.168.1.1 Source filename []? c1841-advipservicesk9-mz.124-15.T1.bin Destination filename [c1841-advipservicesk9-mz.124-15.T1.bin]? %Warning:There is a file already existing with this name Do you want to over write? [confirm] Erase flash: before copying? [confirm] Erasing the flash filesystem will remove all files! Continue? [confirm] Erasing device... eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee ...erased Erase of flash: complete Accessing ftp://192.168.1.1/c1841-advipservicesk9-mz.124-15.T1.bin... 实验总结 通过copy命令可实现配置的备份和恢复，备份时一定添加名称以方便管理。 "},"page/1097.html":{"url":"page/1097.html","title":"C类地址子网划分","keywords":"","body":"C类子网划分步骤 1.步骤 （1）确定需要的网络个数 每个子网一个 每条广域网连接一个（接口） （2）确定每个子网所需的主机个数 每个主机一个 每个路由器接口一个 （3）根据上述要求，确定一下内容 一个用于整个网络的子网掩码 每个网络网段的唯一子网地址 每个子网的主机IP地址范围 2.确定子网掩码 在C类网络中，只有8位用于定义主机地址，因此只能用下表所示的C类子网掩码（第4字节） C类子网掩码 二进制 十进制 CIDR 1111 1111 1111 1111 1111 1111 0000 0000 255.255.255.0 /24 1111 1111 1111 1111 1111 1111 1000 0000 255.255.255.128 /25 1111 1111 1111 1111 1111 1111 1100 0000 255.255.255.192 /26 1111 1111 1111 1111 1111 1111 1110 0000 255.255.255.224 /27 1111 1111 1111 1111 1111 1111 1111 0000 255.255.255.240 /28 1111 1111 1111 1111 1111 1111 1111 1000 255.255.255.248 /29 1111 1111 1111 1111 1111 1111 1111 1100 255.255.255.252 /30 1111 1111 1111 1111 1111 1111 1111 1110 不可以，因为会导致主机地址全0全1 3.C类网络的子网划分 给出划分子网的子网掩码后，需要确定计算改子网掩码提供的子网数以及每个子网的合法主机地址和广播地址 3.1确定选定子网掩码将创建的子网数 2x2^x2x个 其中xxx为子网掩码中第四字节取值为1的位数 例如在1111 1111 1111 1111 1111 1111 1100 0000的第四字节末尾1100 0000中，取值为1的位数为2，因此子网数为22=42^2=422=4个 3.2确定每个子网主机数 2y−22^y-22y−2个 其中yyy为子网掩码中第四字节取值为0的位数 减去的两个分别为子网地址和广播地址，他们不是合法的主机IP地址 例如在1111 1111 1111 1111 1111 1111 1100 0000的第四字节末尾1100 0000中，取值为0的位数为6，因此每个子网可包含主机数为26−2=622^6-2=6226−2=62个 3.3确定有哪些合法子网 计算 块大小（增量）=256-子网掩码 从0开始不断增加64，直到达到子网掩码值，中间结果包括0和子网掩码值都是合法子网 例如在1111 1111 1111 1111 1111 1111 1100 0000中，第四字节末尾1100 0000为192，则块大小=256-192=64，即子网掩码为为192时，块大小为64，从0开始不断增加64，直到达到子网掩码值，中间的结果0、64、128、192都是合法的子网 因为掩码为1111 1111 1111 1111 1111 1111 1100 0000，而C类地址的XXXX XXXX XXXX XXXX XXXX XXXX **** ****的X部分已经确定，XXXX XXXX XXXX XXXX XXXX XXXX **## ####的#部分分给主机号，只有XXXX XXXX XXXX XXXX XXXX XXXX **## ####中间**用于划分子网，组合为00,01,10,11，若后面都为0，即00 00 0000为0，01 00 0000为64，10 00 0000为128，11 00 0000为192，等分为4块，容纳主机数相同，都是00 0000到11 1111之间 3.4确定每个子网的广播地址 下一个子网前面一个数（即本子网最后一个数） 例如前面已经确定子网为0、64、128、92则子网0的广播地址为63，因为下一个子网为64，子网64的广播地址为127，以为下一个子网为128,128广播地址为191,192广播地址为255，最后一个广播地址总是255 3.5确定合法主机地址 合法主机的地址位于两个子网之间，但是全0和全1地址除外，全0为子网地址，全1为广播地址 即：每个子网的子网地址到广播地址之间，不包括两端 例如子网号为64，广播地址为127，则合法主机地址范围为65-126 实践 实践0：子网划分示例 网络地址为：192.168.1.0 子网掩码为：255.255.255.128（/25） 0.子网掩码第四字节化为二进制 255.255.255.128 1111 1111 1111 1111 1111 1111 1000 0000 128-->1000 0000 1位定义子网，其余定义主机 1.确定子网数 2x2^x2x=212^121=2 1000 0000共1个1 2.确定每个子网主机数 2y−22^y-22y−2=27−22^7-227−2=126台 1000 0000共7个0用于确定每个子网主机数 3.确定有哪些合法子网 256-128=128 0 和 128 块大小为128，从0增加128到128只有0和128 即XXXXXXXX XXXXXXX XXXXXXXX 0 ### ####的子网地址XXXXXXXX XXXXXXX XXXXXXXX 0 000 0000 XXXXXXXX XXXXXXX XXXXXXXX 1 ### ####的子网地址XXXXXXXX XXXXXXX XXXXXXXX 1 000 0000 4.确定每个子网广播地址 子网0的下一个子网是128，所以其广播地址是127 子网127为最后一个子网其广播地址是255 即 子网XXXXXXXX XXXXXXX XXXXXXXX 0 000 0000的广播地址XXXXXXXX XXXXXXX XXXXXXXX 0 111 1111 子网XXXXXXXX XXXXXXX XXXXXXXX 1 000 0000的广播地址XXXXXXXX XXXXXXX XXXXXXXX 1 111 1111 5.确定每个子网包含主机的合法地址 主机地址在每个子网的子网地址和广播地址之间，不包括每个子网的子网地址和广播地址 子网地址XXXXXXXX XXXXXXX XXXXXXXX 0 000 0000的广播地址XXXXXXXX XXXXXXX XXXXXXXX 0 111 1111之间的XXXXXXXX XXXXXXX XXXXXXXX 0 ### ####变更#，但是不能全0或者全1 子网地址XXXXXXXX XXXXXXX XXXXXXXX 1 000 0000的广播地址XXXXXXXX XXXXXXX XXXXXXXX 1 111 1111之间的XXXXXXXX XXXXXXX XXXXXXXX 1 ### ####变更#，但是不能全0或者全1 子网 0 128 子网广播地址 127 255 第一个主机地址 1 129 最后一个主机地址 126 254 实践1 对于 网络地址为：192.168.10.99/26，求所属子网，及该子网广播地址和合法主机地址范围 11111111 11111111 11111111 1100 0000 子网掩码为：255.255.255.192（/26） 99(10)=01 10 0011(2) 所属子网为01 00 0000即64即192.168.10.64 该子网广播地址为01 11 1111即127即192.168.10.127 合法主机地址为01 00 0000到01 11 1111，即64到127，即192.168.10.65到192.168.10.126 对于 网络地址为：192.168.10.99/26，求选定子网掩码的相关问题 子网掩码为：255.255.255.192（/26） 0.子网掩码第四字节化为二进制 255.255.255.192 1111 1111 1111 1111 1111 1111 1100 0000 192-->1100 0000 1位定义子网，其余定义主机 1.确定子网数 2x2^x2x=222^222=4 1100 0000共2个1 2.确定每个子网主机数 2y−22^y-22y−2=26−22^6-226−2=62台 1100 0000共6个0用于确定每个子网主机数 3.确定有哪些合法子网 256-192=64 0、64、128、192 即192.168.10.0、192.168.10.64、192.168.10.128、192.168.10.192 块大小为64，从0增加192到128有0、64、128、192 即 XXXXXXXX XXXXXXX XXXXXXXX 00 ## ####的子网地址XXXXXXXX XXXXXXX XXXXXXXX 00 00 0000 XXXXXXXX XXXXXXX XXXXXXXX 01 ## ####的子网地址XXXXXXXX XXXXXXX XXXXXXXX 01 00 0000 XXXXXXXX XXXXXXX XXXXXXXX 10 ## ####的子网地址XXXXXXXX XXXXXXX XXXXXXXX 10 00 0000 XXXXXXXX XXXXXXX XXXXXXXX 11 ## ####的子网地址XXXXXXXX XXXXXXX XXXXXXXX 11 00 0000 4.确定每个子网广播地址 子网0的下一个子网是64，所以其广播地址是63，即192.168.10.63 子网64的下一个子网是128，所以其广播地址是127，即192.168.10.127 子网128的下一个子网是192，所以其广播地址是191，即192.168.10.191 子网192为最后一个子网其广播地址是255，即192.168.10.255 即 子网XXXXXXXX XXXXXXX XXXXXXXX 00 00 0000的广播地址XXXXXXXX XXXXXXX XXXXXXXX 00 11 1111 子网XXXXXXXX XXXXXXX XXXXXXXX 01 00 0000的广播地址XXXXXXXX XXXXXXX XXXXXXXX 01 11 1111 子网XXXXXXXX XXXXXXX XXXXXXXX 10 00 0000的广播地址XXXXXXXX XXXXXXX XXXXXXXX 10 11 1111 子网XXXXXXXX XXXXXXX XXXXXXXX 11 00 0000的广播地址XXXXXXXX XXXXXXX XXXXXXXX 11 11 1111 5.确定每个子网包含主机的合法地址 主机地址在每个子网的子网地址和广播地址之间，不包括每个子网的子网地址和广播地址 子网地址XXXXXXXX XXXXXXX XXXXXXXX 00 00 0000的广播地址XXXXXXXX XXXXXXX XXXXXXXX 00 11 1111之间的XXXXXXXX XXXXXXX XXXXXXXX 00 ## ####变更#，但是不能全0或者全1 子网 0 64 128 192 子网广播地址 63 127 191 255 第一个主机地址 1 65 129 193 最后一个主机地址 62 126 190 254 即 子网 192.168.10.0 192.168.10.64 192.168.10.128 192.168.10.192 子网广播地址 192.168.10.63 192.168.10.127 192.168.10.191 192.168.10.255 第一个主机地址 192.168.10.1 192.168.10.65 192.168.10.129 192.168.10.193 最后一个主机地址 192.168.10.62 192.168.10.126 192.168.10.190 192.168.10.254 实践2 网络地址为：192.158.10.66/27 11111111 11111111 11111111 111 00000 子网掩码为：255.255.255.224（/27） 66(10)=010 0 0010(2) 所属子网为010 00000即64即192.158.10.64 该子网广播地址为010 1 1111即9即192.158.10.95 合法主机地址为010 0 0000到010 1 1111，即64到95，即192.158.10.66到192.158.10.94 对于 网络地址为：192.158.10.66/27，求选定子网掩码的相关问题 子网掩码为：255.255.255.224（/27） 0.子网掩码第四字节化为二进制 255.255.255.224 1111 1111 1111 1111 1111 1111 111 0 0000 224-->111 0 0000 1位定义子网，其余定义主机 1.确定子网数 2x2^x2x=232^323=8 1110 0000共3个1 2.确定每个子网主机数 2y−22^y-22y−2=25−22^5-225−2=30台 111 0 0000共5个0用于确定每个子网主机数 3.确定有哪些合法子网 256-224=32 0、32、64、96、128、160、192、224 即192.158.10.0、192.158.10.32、192.158.10.64、192.158.10.96、192.158.10.128、192.158.10.160、192.158.10.192、192.158.10.224 块大小为32，从0增加224所有的数 4.确定每个子网广播地址 子网0的下一个子网是32，所以其广播地址是31，即192.158.10.31 子网32的下一个子网是64，所以其广播地址是63，即192.158.10.63 子网64的下一个子网是96，所以其广播地址是95，即192.158.10.95 子网96的下一个子网是128，所以其广播地址是127，即192.158.10.127 子网128的下一个子网是160，所以其广播地址是159，即192.158.10.159 子网160的下一个子网是192，所以其广播地址是191，即192.158.10.191 子网192的下一个子网是224，所以其广播地址是223，即192.158.10.223 子网224为最后一个子网其广播地址是255，即192.158.10.255 5.确定每个子网包含主机的合法地址 主机地址在每个子网的子网地址和广播地址之间，不包括每个子网的子网地址和广播地址 子网 0 32 64 96 128 160 192 224 子网广播地址 31 63 95 127 159 191 223 255 第一个主机地址 1 33 65 97 129 161 193 225 最后一个主机地址 30 62 94 126 158 190 222 254 实践3 网络地址 192.168.10.37/28 子网掩码 11111111 11111111 11111111 1111 0000（28个1）255.255.255.240 所属子网 37(10)=0010 0101->1111 0000^0010 0101=0010 0000(2)=32(10)->192.168.10.32 所属子网广播地址 0010 1111(2)=47->192.168.10.47 所属子网合法主机范围 192.168.10.33到192.168.10.46 对于该IP选定的子网掩码 子网掩码 1111 0000=240 创建的子网数 24=162^4=1624=16 每个子网所含主机数 24−2=142^4-2=1424−2=14 块大小 256-240=16 合法子网 子网广播地址 第一个主机地址 最后一个主机地址 0 15 1 14 16 31 17 30 32 47 33 46 48 63 49 62 64 79 65 78 80 95 81 94 96 111 97 110 112 127 113 126 128 143 129 142 144 159 145 158 160 175 161 174 176 191 177 190 192 207 193 206 208 223 209 222 224 239 225 238 240 255 241 254 16N (256>16N≥0)(256 >16N \\ge 0)(256>16N≥0) 16(N+1)-1 16N+1 16(N+1)-1-1 16(N+1) 实践4 网络地址 192.168.10.17/29 子网掩码 11111111 11111111 11111111 1111 1000（29个1）255.255.255.248 所属子网 17(10)=0001 0001->1111 1000^0001 0001=0001 0000(2)=16(10)->192.168.10.16 所属子网广播地址 0001 0111(2)=23->192.168.10.23 所属子网合法主机范围 192.168.10.17到192.168.10.22 对于该IP选定的子网掩码 子网掩码 1111 1000=248 创建的子网数 25=322^5=3225=32 每个子网所含主机数 23−2=62^3-2=623−2=6 块大小 256-248=8 合法子网 子网广播地址 第一个主机地址 最后一个主机地址 0 7 1 6 8 15 9 14 16 23 17 22 24 31 25 30 32 39 33 38 40 47 41 46 48 55 49 54 56 63 57 62 64 71 65 70 72 79 73 78 80 87 81 86 88 95 89 94 96 103 97 102 104 111 105 110 112 119 113 118 120 127 121 126 128 135 129 134 136 143 137 142 144 151 145 150 152 159 153 158 160 167 161 166 168 175 169 174 176 183 177 182 184 191 185 190 192 199 193 198 200 207 201 206 208 215 209 214 216 223 217 222 224 231 225 230 232 239 233 238 240 247 241 246 248 255 249 254 实践5 网络地址 192.168.10.25/30 子网掩码 11111111 11111111 11111111 1111 1100（30个1）255.255.255.252 所属子网 25(10)=0001 1001->1111 1100^0001 1001=0001 1000(2)=24(10)->192.168.10.24 所属子网广播地址 0001 1011(2)=27->192.168.10.27 所属子网合法主机范围 192.168.10.25到192.168.10.26 对于该IP选定的子网掩码 子网掩码 1111 1100=252 创建的子网数 26=642^6=6426=64 每个子网所含主机数 22−2=22^2-2=222−2=2 块大小 256-252=4 合法子网 子网广播地址 第一个主机地址 最后一个主机地址模拟 Cisco Packet Tracer模拟 PC>ipconfig IP Address......................: 192.168.1.2 Subnet Mask.....................: 255.255.255.128 Default Gateway.................: 192.168.1.1 PC>ping 192.168.1.3 Pinging 192.168.1.3 with 32 bytes of data: Reply from 192.168.1.3: bytes=32 time=18ms TTL=128 Reply from 192.168.1.3: bytes=32 time=11ms TTL=128 Reply from 192.168.1.3: bytes=32 time=10ms TTL=128 Reply from 192.168.1.3: bytes=32 time=9ms TTL=128 Ping statistics for 192.168.1.3: Packets: Sent = 4, Received = 4, Lost = 0 (0% loss), Approximate round trip times in milli-seconds: Minimum = 9ms, Maximum = 18ms, Average = 12ms PC>ping 192.168.1.129 Pinging 192.168.1.129 with 32 bytes of data: Reply from 192.168.1.1: Destination host unreachable. Reply from 192.168.1.1: Destination host unreachable. Reply from 192.168.1.1: Destination host unreachable. Reply from 192.168.1.1: Destination host unreachable. Ping statistics for 192.168.1.129: Packets: Sent = 4, Received = 0, Lost = 4 (100% loss), PC>ping 192.168.10.99 Pinging 192.168.10.99 with 32 bytes of data: Reply from 192.168.1.1: Destination host unreachable. Reply from 192.168.1.1: Destination host unreachable. Reply from 192.168.1.1: Destination host unreachable. Reply from 192.168.1.1: Destination host unreachable. Ping statistics for 192.168.10.99: Packets: Sent = 4, Received = 0, Lost = 4 (100% loss), PC>ipconfig IP Address......................: 192.168.10.99 Subnet Mask.....................: 255.255.255.192 Default Gateway.................: 192.168.10.1 PC>ping 192.168.10.65 Pinging 192.168.10.65 with 32 bytes of data: Reply from 192.168.10.65: bytes=32 time=10ms TTL=128 Reply from 192.168.10.65: bytes=32 time=10ms TTL=128 Reply from 192.168.10.65: bytes=32 time=11ms TTL=128 Reply from 192.168.10.65: bytes=32 time=13ms TTL=128 Ping statistics for 192.168.10.65: Packets: Sent = 4, Received = 4, Lost = 0 (0% loss), Approximate round trip times in milli-seconds: Minimum = 10ms, Maximum = 13ms, Average = 11ms PC>ping 192.168.10.2 Pinging 192.168.10.2 with 32 bytes of data: Request timed out. Request timed out. Request timed out. Request timed out. Ping statistics for 192.168.10.2: Packets: Sent = 4, Received = 0, Lost = 4 (100% loss), PC>ping 192.168.1.2 Pinging 192.168.1.2 with 32 bytes of data: Request timed out. Request timed out. Request timed out. Request timed out. Ping statistics for 192.168.1.2: Packets: Sent = 4, Received = 0, Lost = 4 (100% loss), PC>ipconfig IP Address......................: 192.158.1.2 Subnet Mask.....................: 255.255.255.224 Default Gateway.................: 192.158.1.1 PC>ping 192.158.1.3 Pinging 192.158.1.3 with 32 bytes of data: Reply from 192.158.1.3: bytes=32 time=24ms TTL=128 Reply from 192.158.1.3: bytes=32 time=7ms TTL=128 Reply from 192.158.1.3: bytes=32 time=13ms TTL=128 Reply from 192.158.1.3: bytes=32 time=10ms TTL=128 Ping statistics for 192.158.1.3: Packets: Sent = 4, Received = 4, Lost = 0 (0% loss), Approximate round trip times in milli-seconds: Minimum = 7ms, Maximum = 24ms, Average = 13ms PC>ping 192.158.1.129 Pinging 192.158.1.129 with 32 bytes of data: Request timed out. Request timed out. Request timed out. Request timed out. Ping statistics for 192.158.1.129: Packets: Sent = 4, Received = 0, Lost = 4 (100% loss), PC>ipconfig IP Address......................: 192.168.10.5 Subnet Mask.....................: 255.255.255.252 Default Gateway.................: 192.168.10.1 PC>ping 192.168.10.6 Pinging 192.168.10.6 with 32 bytes of data: Reply from 192.168.10.6: bytes=32 time=18ms TTL=128 Reply from 192.168.10.6: bytes=32 time=10ms TTL=128 Reply from 192.168.10.6: bytes=32 time=3ms TTL=128 Reply from 192.168.10.6: bytes=32 time=8ms TTL=128 Ping statistics for 192.168.10.6: Packets: Sent = 4, Received = 4, Lost = 0 (0% loss), Approximate round trip times in milli-seconds: Minimum = 3ms, Maximum = 18ms, Average = 9ms PC>ping 192.168.10.26 Pinging 192.168.10.26 with 32 bytes of data: Request timed out. Request timed out. Request timed out. Request timed out. Ping statistics for 192.168.10.26: Packets: Sent = 4, Received = 0, Lost = 4 (100% loss), PC>ping 192.158.1.2 Pinging 192.158.1.2 with 32 bytes of data: Request timed out. Request timed out. Request timed out. Request timed out. Ping statistics for 192.158.1.2: Packets: Sent = 4, Received = 0, Lost = 4 (100% loss), 实验总结 划分子网的步骤为，根据子网掩码计算有多少子网，每个子网有多少主机，注意减去全0和全1的，计算合法子网，即从0开始加块大小，一直到256，其中块的计算为256减去子网掩码，广播地址为子网全1时状态，合法主机为子网到广播地址间的，不包括两端。 根据CIDR地址判断其所在子网，先求子网掩码，即网络前缀长度个数个1后面补0凑整32位，然后子网掩码与改地址进行与运算，即可根据求得的值求得为所在子网。 使用子网掩码可划分子网，若未做额外配置，不在同一子网不可通讯。 "},"page/1086.html":{"url":"page/1086.html","title":"命令","keywords":"","body":"命令 "},"page/1087.html":{"url":"page/1087.html","title":"arp","keywords":"","body":"ARP地址解析协议（win/linux） Address Resolution Protocol [ˈproʊtəkɑːl] protocol 礼仪; 外交礼节; 条约草案; 议定书; (协议或条约的) 附件; (数据传递的) 协议，规程，规约; [ˌrezəˈluːʃn] Resolution 决议; 正式决定; (问题、分歧等的) 解决，消除; 坚定; 坚决; 有决心; 一、功能 该实用程序显示和修改地址解析协议（ARP）缓存。 二、格式 ARP -s IP地址 以太网地址 ARP -d IP地址 ARP –a 参数： -a 显示当前主机的arp表 -d 删除arp表中对应IP地址的表项 -s 在arp表中添加一个静态表项 三、举例 Arp –a Arp –s 192.168.0.9 00-03-0d-3b-2d-d4 Arp –d 192.168.0.9 简介 地址解析协议（英语：Address Resolution Protocol，缩写：ARP）是一个通过解析网络层地址来找寻数据链路层地址的网络传输协议，它在IPv4中极其重要。ARP最初在1982年的RFC 826（征求意见稿）[1]中提出并纳入互联网标准 STD 37. ARP 也可能指是在多数操作系统中管理其相关地址的一个进程。 ARP是通过网络地址来定位MAC地址。 ARP已经在很多网路层和数据链接层之间得以实现，包括IPv4，Chaosnet, DECnet和Xerox PARC Universal Packet（PUP）使用IEEE 802标准, 光纤分布式数据接口, X.25, 帧中继和异步传输模式（ATM），IEEE 802.3和IEEE 802.11标准上IPv4占了多数流量。 在IPv6中邻居发现协议（NDP）用于代替地址解析协议（ARP）。 基本功能 在以太网协议中规定，同一局域网中的一台主机要和另一台主机进行直接通信，必须要知道目标主机的MAC地址。而在TCP/IP协议中，网络层和传输层只关心目标主机的IP地址。这就导致在以太网中使用IP协议时，数据链路层的以太网协议接到上层IP协议提供的数据中，只包含目的主机的IP地址。于是需要一种方法，根据目的主机的IP地址，获得其MAC地址。这就是ARP协议要做的事情。所谓地址解析（address resolution）就是主机在发送帧前将目标IP地址转换成目标MAC地址的过程。 另外，当发送主机和目的主机不在同一个局域网中时，即便知道对方的MAC地址，两者也不能直接通信，必须经过路由转发才可以。所以此时，发送主机通过ARP协议获得的将不是目的主机的真实MAC地址，而是一台可以通往局域网外的路由器的MAC地址。于是此后发送主机发往目的主机的所有帧，都将发往该路由器，通过它向外发送。这种情况称为委托ARP或ARP代理（ARP Proxy）。 在点对点链路中不使用ARP，实际上在点对点网络中也不使用MAC地址，因为在此类网络中分别已经获取了对端的IP地址。 数据包结构 地址解析协议的消息格式很简单，仅包含单一的地址解析请求或响应。ARP 消息的长度取决于上下两层地址的大小，上层地址由所使用的网络协议类型（通常是 IPv4）决定，下层地址则由上层协议所使用的硬件或虚拟链路层的类型决定。消息的报头中包含了这些类型以及对应的地址长度信息，此外还包含了表示请求（1）和应答（2）的操作码。数据包的有效负载为收发双方的硬件地址、协议地址，总计四个地址。 为了把IP地址映射到48位以太网地址用于传输，需要一个体现地址转换协议的包格式。 以太网链路层 目标以太网地址：目标MAC地址。FF:FF:FF:FF:FF:FF （二进制全1）为广播地址。 源以太网地址：发送方MAC地址。 帧类型：以太类型，ARP为0x0806。 以太网报文数据 硬件类型：如以太网（0x0001）、分组无线网。 协议类型：如网际协议(IP)（0x0800）、IPv6（0x86DD）。 硬件地址长度：每种硬件地址的字节长度，一般为6（以太网）。 协议地址长度：每种协议地址的字节长度，一般为4（IPv4）。 操作码：1为ARP请求，2为ARP应答，3为RARP请求，4为RARP应答。 源硬件地址：n个字节，n由硬件地址长度得到，一般为发送方MAC地址。 源协议地址：m个字节，m由协议地址长度得到，一般为发送方IP地址。 目标硬件地址：n个字节，n由硬件地址长度得到，一般为目标MAC地址。 目标协议地址：m个字节，m由协议地址长度得到，一般为目标IP地址。 报文格式 长度(位) 48 48 16 16 16 8 8 16 48 32 48 32 数据类型 目标以太网地址 源以太网地址 帧类型 硬件类型 协议类型 硬件地址长度 协议地址长度 操作码 源硬件地址 源协议地址 目标硬件地址 目标协议地址 组成 14字节 以太网首部 14字节 以太网首部 14字节 以太网首部 28字节 ARP请求/应答 28字节 ARP请求/应答 28字节 ARP请求/应答 28字节 ARP请求/应答 28字节 ARP请求/应答 28字节 ARP请求/应答 28字节 ARP请求/应答 28字节 ARP请求/应答 28字节 ARP请求/应答 原理 在每台安装有TCP/IP协议的电脑或路由器里都有一个ARP缓存表，表里的IP地址与MAC地址是一对应的，如下表所示。 主机名称 IP地址 MAC地址 A 192.168.38.10 00-AA-00-62-D2-02 B 192.168.38.11 00-BB-00-62-C2-02 C 192.168.38.12 00-CC-00-62-C2-02 D 192.168.38.13 00-DD-00-62-C2-02 E 192.168.38.14 00-EE-00-62-C2-02 ... ... ... 以主机A（192.168.38.10）向主机B（192.168.38.11）发送数据为例。 1.当发送数据时，主机A会在自己的ARP缓存表中寻找是否有目标IP地址。如果找到就知道目标MAC地址为（00-BB-00-62-C2-02），直接把目标MAC地址写入帧里面发送就可。 2.如果在ARP缓存表中没有找到相对应的IP地址，主机A就会在网络上发送一个广播（ARP request），目标MAC地址是“FF.FF.FF.FF.FF.FF”，这表示向同一网段内的所有主机发出这样的询问：“192.168.38.11的MAC地址是什么？” 3.网络上其他主机并不响应ARP询问，只有主机B接收到这个帧时，才向主机A做出这样的回应（ARP response）：“192.168.38.11的MAC地址是00-BB-00-62-C2-02”，此回应以单播方式。这样，主机A就知道主机B的MAC地址，它就可以向主机B发送信息。同时它还更新自己的ARP高速缓存（ARP cache），下次再向主机B发送信息时，直接从ARP缓存表里查找就可。 ARP缓存表采用老化机制，在一段时间内如果表中的某一行没有使用，就会被删除，这样可减少缓存表的长度，加快查询速度。 免费ARP（gratuitous ARP），他是指主机发送ARP查询（广播）自己的IP地址，当ARP功能被开启或者是端口初始配置完成，主机向网络发送免费ARP来查询自己的IP地址确认地址唯一可用。 作用： 确定网络中是否有其他主机使用了IP地址，如果有应答则产生错误消息。 免费ARP可以做更新ARP缓存用，网络中的其他主机收到该广播则在缓存中更新条目，收到该广播的主机无论是否存在与IP地址相关的条目都会强制更新，如果存在旧条目则会将MAC更新为广播包中的MAC。 Windows：开始 → 运行 → cmd → arp -a（参数a表示显示所有内容） Linux：终端 → arp -nv MacOS：终端 → arp -nla 命令 linux deepin15.11 man arp ARP(8) Linux System Administrator's Manual ARP(8) NAME arp - manipulate(操纵) the system ARP cache SYNOPSIS(概要) arp [-vn] [-H type] [-i if] [-ae] [hostname] arp [-v] [-i if] -d hostname [pub] arp [-v] [-H type] [-i if] -s hostname hw_addr [temp] arp [-v] [-H type] [-i if] -s hostname hw_addr [netmask nm] pub arp [-v] [-H type] [-i if] -Ds hostname ifname [netmask nm] pub arp [-vnD] [-H type] [-i if] -f [filename] DESCRIPTION(描述) Arp manipulates(操纵) or displays the kernel's（内核） IPv4 network neighbour cache. It can add entries(进入(指行动);进入(指权利等);参与，加入(指权利、机会)) to the table, delete one or display the current(当前的) content(内容). ARP stands for(代表) Address Resolution Protocol(地址解析协议), which is used to find the media access control address of a network neighbour for a given IPv4 Address. MODES(模式) arp with no mode specifier(说明符) will print the current content of the table. It is possible to limit the number of entries printed, by specifying(指定) an hardware address type, interface(接口) name or host address. arp -d address will delete a ARP table entry(进入(指行动);进入(指权利等);参与，加入(指权利、机会)). Root or netadmin privilege(特权) is required to do this. The entry is found by IP address. If a hostname is given, it will be resolved before looking up the entry in the ARP table. arp -s address hw_addr is used to set up(设置) a new table entry. The format of the hw_addr parameter(参数) is dependent on the hardware class, but for most classes one can assume that the usual presentation(演示) can be used. For the Ethernet(以太网) class, this is 6 bytes in hexadecimal(十六进制), separated(隔开) by colons(冒号). When adding proxy(代理) arp entries (that is those with the publish flag set) a netmask(网络掩码) may be specified(具体说明;明确规定;详述;详列) to proxy arp for entire(整个的) subnets(子网). This is not good practice(实践;实际行动;通常的做法;惯例;常规;惯常做的事;习惯;习俗), but is supported by older kernels((坚果或子粒的)仁，核;(思想或主题的)核心，中心，要点) because it can be useful. If the temp flag is not supplied(提供) entries will be permanent(永久的，长久的) stored into the ARP cache. To simplify(使简化) setting up entries for one of your own network interfaces, you can use the arp -Ds address ifname form. In that case the hardware address is taken from the interface(接口) with the specified(明确规定) name. OPTIONS -v, --verbose(冗长的) Tell the user what is going on by being verbose. -n, --numeric([nju(ː)ˈmɛrɪk] n 数字的,分数) shows numerical(数字的) addresses instead of trying to determine(查明;测定;准确算出;决定;形成;支配;影响;确定;裁决;安排) symbolic(象征性的) host, port or user names. -H type, --hw-type type, -t type When setting or reading the ARP cache, this optional parameter(决定因素;规范;范围) tells arp which class of entries it should check for. The default value of this parameter is ether (i.e. hardware code 0x01 for IEEE 802.3 10Mbps Ethernet). Other values might include network technologies such as ARCnet (arcnet) , PROnet (pronet) , AX.25 (ax25) and NET/ROM (netrom). -a Use alternate(交换的) BSD style output format (with no fixed columns). -e Use default Linux style output format (with fixed columns(柱，纵行)). -D, --use-device Instead of a hw_addr, the given argument is the name of an interface. arp will use the MAC address of that interface for the table entry. This is usually the best option to set up a proxy ARP entry to yourself. -i If, --device If Select an interface. When dumping(倾倒，丢弃) the ARP cache only entries matching the specified interface will be printed. When setting a permanent(永久的长久的) or temp ARP entry this interface will be associated(相关的) with the entry; if this option is not used, the kernel(内核) will guess based on the routing table(路由表). For pub(酒吧) entries the specified interface is the interface on which ARP requests(请求) will be answered. NOTE: This has to be different from the interface to which the IP datagrams(数据报) will be routed. NOTE: As of kernel 2.2.0 it is no longer possible to set an ARP entry for an entire subnet(子网). Linux instead does automagic proxy arp when a route exists and it is forwarding. See arp(7) for details. Also the dontpub option which is available for delete and set operations cannot be used with 2.4 and newer kernels. -f filename, --file filename Similar to the -s option, only this time the address info is taken from file filename. This can be used if ARP entries for a lot of hosts have to be set up. The name of the data file is very often /etc/ethers, but this is not official. If no filename is specified(明确规定，详述，详列) /etc/ethers is used as default. The format of the file is simple; it only contains(包含) ASCII text lines with a hostname, and a hardware address separated(分离的) by whitespace. Additionally(另外) the pub, temp and netmask(网络掩码，mask面具) flags can be used. In all places where a hostname is expected(预料;预期;预计;等待;期待;盼望;要求;指望), one can also enter an IP address in dotted-decimal(小数点) notation(表示法). As a special case for compatibility(和睦相处;并存;相容;(尤指计算机及程序的)兼容性，相容性) the order of the hostname and the hardware address can be exchanged. Each complete entry in the ARP cache will be marked with the C flag. Permanent(永久的) entries(实体) are marked with M and published entries have the P flag. EXAMPLES(examples实例) /usr/sbin/arp -i eth0 -Ds 10.0.0.2 eth1 pub This will answer ARP requests for 10.0.0.2 on eth0 with the MAC address for eth1. /usr/sbin/arp -i eth1 -d 10.0.0.1 Delete the ARP table entry for 10.0.0.1 on interface eth1. This will match published proxy ARP entries and permanent entries. FILES zander@zander-PC:~/Desktoparp−aOpenWrt.lan(172.16.0.2)at00:0c:29:e0:8e:bc[ether]onwlp0s20f3?(172.16.1.0)atd8:c8:e9:b2:d0:fd[ether]onwlp0s20f3zander@zander−PC: /Desktop arp -a\r OpenWrt.lan (172.16.0.2) at 00:0c:29:e0:8e:bc [ether] on wlp0s20f3\r ? (172.16.1.0) at d8:c8:e9:b2:d0:fd [ether] on wlp0s20f3\r zander@zander-PC:~/Desktoparp−aOpenWrt.lan(172.16.0.2)at00:0c:29:e0:8e:bc[ether]onwlp0s20f3?(172.16.1.0)atd8:c8:e9:b2:d0:fd[ether]onwlp0s20f3zander@zander−PC: /Desktop ping 172.16.0.55 PING 172.16.0.55 (172.16.0.55) 56(84) bytes of data. From 172.16.1.213 icmp_seq=1 Destination Host Unreachable From 172.16.1.213 icmp_seq=5 Destination Host Unreachable From 172.16.1.213 icmp_seq=8 Destination Host Unreachable From 172.16.1.213 icmp_seq=9 Destination Host Unreachable From 172.16.1.213 icmp_seq=10 Destination Host Unreachable From 172.16.1.213 icmp_seq=11 Destination Host Unreachable ........... zander@zander-PC:~/Desktoparp−aOpenWrt.lan(172.16.0.2)at00:0c:29:e0:8e:bc[ether]onwlp0s20f3?(172.16.1.0)atd8:c8:e9:b2:d0:fd[ether]onwlp0s20f3?(172.16.0.55)atincomplete>onwlp0s20f3zander@zander−PC: /Desktop arp -a\r OpenWrt.lan (172.16.0.2) at 00:0c:29:e0:8e:bc [ether] on wlp0s20f3\r ? (172.16.1.0) at d8:c8:e9:b2:d0:fd [ether] on wlp0s20f3\r ? (172.16.0.55) at on wlp0s20f3\r zander@zander-PC:~/Desktoparp−aOpenWrt.lan(172.16.0.2)at00:0c:29:e0:8e:bc[ether]onwlp0s20f3?(172.16.1.0)atd8:c8:e9:b2:d0:fd[ether]onwlp0s20f3?(172.16.0.55)atincomplete>onwlp0s20f3zander@zander−PC: /Desktop ping 172.16.1.55 PING 172.16.1.55 (172.16.1.55) 56(84) bytes of data. 64 bytes from 172.16.1.55: icmp_seq=1 ttl=255 time=2.84 ms 64 bytes from 172.16.1.55: icmp_seq=2 ttl=255 time=1.78 ms 64 bytes from 172.16.1.55: icmp_seq=3 ttl=255 time=1.07 ms 64 bytes from 172.16.1.55: icmp_seq=4 ttl=255 time=1.23 ms 64 bytes from 172.16.1.55: icmp_seq=5 ttl=255 time=1.54 ms 64 bytes from 172.16.1.55: icmp_seq=6 ttl=255 time=1.36 ms ........... zander@zander-PC:~/Desktop$ arp -a OpenWrt.lan (172.16.0.2) at 00:0c:29:e0:8e:bc [ether] on wlp0s20f3 ? (172.16.1.0) at d8:c8:e9:b2:d0:fd [ether] on wlp0s20f3 ? (172.16.1.55) at 38:63:bb:02:d9:c0 [ether] on wlp0s20f3 ? (172.16.0.55) at on wlp0s20f3 win7x32 arp C:\\Users\\zander>arp 显示和修改地址解析协议(ARP)使用的“IP 到物理”地址转换表。 ARP -s inet_addr eth_addr [if_addr] ARP -d inet_addr [if_addr] ARP -a [inet_addr] [-N if_addr] [-v] -a 通过询问当前协议数据，显示当前 ARP 项。 如果指定 inet_addr，则只显示指定计算机 的 IP 地址和物理地址。如果不止一个网络 接口使用 ARP，则显示每个 ARP 表的项。 -g 与 -a 相同。 -v 在详细模式下显示当前 ARP 项。所有无效项 和环回接口上的项都将显示。 inet_addr 指定 Internet 地址。 -N if_addr 显示 if_addr 指定的网络接口的 ARP 项。 -d 删除 inet_addr 指定的主机。inet_addr 可 以是通配符 *，以删除所有主机。 -s 添加主机并且将 Internet 地址 inet_addr 与物理地址 eth_addr 相关联。物理地址是用 连字符分隔的 6 个十六进制字节。该项是永久的。 eth_addr 指定物理地址。 if_addr 如果存在，此项指定地址转换表应修改的接口 的 Internet 地址。如果不存在，则使用第一 个适用的接口。 示例: > arp -s 157.55.85.212 00-aa-00-62-c6-09.... 添加静态项。 > arp -a .... 显示 ARP 表。 “arp -a\"就可以查看ARP缓存中的内容 //查看时不一定是空的，因为可能有应用已经发出去了 用“arp -d\"命令可以删除ARP缓存中所有的内容。 用“arp -s\"命令可以在ARP缓存中添加IP地址与MAC地址的映射关系，类型为static（静态） 参考： https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%9D%80%E8%A7%A3%E6%9E%90%E5%8D%8F%E8%AE%AE https://tools.ietf.org/html/rfc826 "},"page/1088.html":{"url":"page/1088.html","title":"ipconfig&ifconfig","keywords":"","body":"ipconfig&ifconfig（win/linux） ipconfig（win） 一、功能 该实用程序显示和更新当前TCP/IP配置，包括IP地址。 二、格式 ipconfig [/? | /all | /release [adapter] | /renew [adapter] | /flushdns | /registerdns | /showclassid adapter | /setclassid adapter [classidtoset] ] adapter Full name or pattern with '*' and '?' to 'match', * matches any character, ? matches one character. Options /? Display this help message. /all Display full configuration information. /release Release the IP address for the specified adapter. /renew Renew the IP address for the specified adapter. 三、举例 ipconfig ipconfig/all ipconfig是微软操作系统的电脑上用来控制网络连线的一个命令行工具。它的主要功用，包括用来显示现时网络连线的设置（/all参数），或透过/release参数来释放获取的ip位置，和透过 /renew 来重新获取ip位置的分配。 在Win9x系统上，过去亦有一个GUI版本的winipcfg，但在Win2K之后即不再复见。后来，微软在他们的网页提供了wntipcfg供用户下载。此外，本命令其实脱胎自Unix的ifconfig。 参数表 /? 显示帮助信息 /all 显示现时所有网络连线的设置 /release 释放某一个网络上的IP位置 /renew 更新某一个网络上的IP位置 /flushdns 把DNS解析器的暂存内容全数删除 命令 ipconfig /? 用法: ipconfig [/allcompartments] [/? | /all | /renew [adapter] | /release [adapter] | /renew6 [adapter] | /release6 [adapter] | /flushdns | /displaydns | /registerdns | /showclassid adapter | /setclassid adapter [classid] | /showclassid6 adapter | /setclassid6 adapter [classid] ] 其中 adapter 连接名称 (允许使用通配符 * 和 ?，参见示例) 选项: /? 显示此帮助消息 /all 显示完整配置信息。 /release 释放指定适配器的 IPv4 地址。 /release6 释放指定适配器的 IPv6 地址。 /renew 更新指定适配器的 IPv4 地址。 /renew6 更新指定适配器的 IPv6 地址。 /flushdns 清除 DNS 解析程序缓存。 /registerdns 刷新所有 DHCP 租约并重新注册 DNS 名称 /displaydns 显示 DNS 解析程序缓存的内容。 /showclassid 显示适配器的所有允许的 DHCP 类 ID。 /setclassid 修改 DHCP 类 ID。 /showclassid6 显示适配器允许的所有 IPv6 DHCP 类 ID。 /setclassid6 修改 IPv6 DHCP 类 ID。 默认情况下，仅显示绑定到 TCP/IP 的适配器的 IP 地址、子网掩码和 默认网关。 对于 Release 和 Renew，如果未指定适配器名称，则会释放或更新所有绑定 到 TCP/IP 的适配器的 IP 地址租约。 对于 Setclassid 和 Setclassid6，如果未指定 ClassId，则会删除 ClassId。 示例: > ipconfig ... 显示信息 > ipconfig /all ... 显示详细信息 > ipconfig /renew ... 更新所有适配器 > ipconfig /renew EL* ... 更新所有名称以 EL 开头 的连接 > ipconfig /release *Con* ... 释放所有匹配的连接， 例如 \"Local Area Connection 1\" 或 \"Local Area Connection 2\" > ipconfig /allcompartments ... 显示有关所有分段的 信息 > ipconfig /allcompartments /all ... 显示有关所有分段的 详细信息 C:\\Users\\2017>ipconfig/all Windows IP 配置 主机名 . . . . . . . . . . . . . : ZS301-1 主 DNS 后缀 . . . . . . . . . . . : 节点类型 . . . . . . . . . . . . : 混合 IP 路由已启用 . . . . . . . . . . : 否 WINS 代理已启用 . . . . . . . . . : 否 以太网适配器 本地连接: 连接特定的 DNS 后缀 . . . . . . . : 描述. . . . . . . . . . . . . . . : Broadcom 440x 10/100 Integrated Controlle r 物理地址. . . . . . . . . . . . . : 00-1D-09-09-A2-93 DHCP 已启用 . . . . . . . . . . . : 否 自动配置已启用. . . . . . . . . . : 是 IPv4 地址 . . . . . . . . . . . . : 172.16.0.77(首选) 子网掩码 . . . . . . . . . . . . : 255.255.254.0 默认网关. . . . . . . . . . . . . : 172.16.0.1 DNS 服务器 . . . . . . . . . . . : 202.195.224.100 TCPIP 上的 NetBIOS . . . . . . . : 已启用 隧道适配器 isatap.{6A2BF15D-4FCF-4362-BBC5-D36854A7768D}: 媒体状态 . . . . . . . . . . . . : 媒体已断开 连接特定的 DNS 后缀 . . . . . . . : 描述. . . . . . . . . . . . . . . : Microsoft ISATAP Adapter 物理地址. . . . . . . . . . . . . : 00-00-00-00-00-00-00-E0 DHCP 已启用 . . . . . . . . . . . : 否 自动配置已启用. . . . . . . . . . : 是 隧道适配器 Teredo Tunneling Pseudo-Interface: 媒体状态 . . . . . . . . . . . . : 媒体已断开 连接特定的 DNS 后缀 . . . . . . . : 描述. . . . . . . . . . . . . . . : Teredo Tunneling Pseudo-Interface 物理地址. . . . . . . . . . . . . : 00-00-00-00-00-00-00-E0 DHCP 已启用 . . . . . . . . . . . : 否 自动配置已启用. . . . . . . . . . : 是 C:\\Users\\2017> 参考 https://zh.wikipedia.org/wiki/Ipconfig ifconfig：在Linux/BSD与ipconfig等同的命令。 wntipcfg wntipcfg下载网址（更新） 相关链接 ifconfig(8), manpage for Linux net-tools ifconfig ifconfig(8), manpage for the FreeBSD ifconfig ifconfig(8), manpage for the OpenBSD ifconfig ifconfig(8), manpage for the Solaris ifconfig networksetup(8), manpage for the Mac OS X networksetup ifconfig for Windows ipconfig.aspx) for Windows on a technet.microsoft.com ip, manpage for the Linux command ip Debian net-tools page, which includes sources of the Linux version of ifconfig net-tools future thread, from current maintainers ifconfig examples ifconfig（linux） ifconfig（interface configuration的缩写）是在类Unix作业系统中于命令行界面（CLI）下或系统配置脚本中用于配置、控制及查询TCP/IP网络接口的系统管理工具。ifconfig最初于4.2BSD中作为BSD TCP/IP协议族的一部分出现。 用法 ifconfig的常见用途包括设置接口的IP地址和子网掩码，以及禁用与启用接口。[1]在启动时，许多类Unix作业系统通过调用ifconfig的shell脚本初始化网络接口。作为交互工具，系统管理员经常使用其来显示并分析网络接口参数。下面的样例输出展示了一Linux主机（接口eth0）和OpenBSD主机上的ural0活跃接口状态： eth0 Link encap:Ethernet HWaddr 00:0F:20:CF:8B:42 inet addr:217.149.127.10 Bcast:217.149.127.63 Mask:255.255.255.192 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:2472694671 errors:1 dropped:0 overruns:0 frame:0 TX packets:44641779 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:1761467179 (1679.7 Mb) TX bytes:2870928587 (2737.9 Mb) Interrupt:28 ural0: flags=8843 mtu 1500 lladdr 00:0d:0b:ed:84:fb media: IEEE802.11 DS2 mode 11b hostap (autoselect mode 11b hostap) status: active ieee80211: nwid ARK chan 11 bssid 00:0d:0b:ed:84:fb 100dBm inet 172.30.50.1 netmask 0xffffff00 broadcast 172.30.50.255 inet6 fe80::20d:bff:feed:84fb%ural0 prefixlen 64 scopeid 0xa 当前状态 开放的伯克利软件套件UNIX作业系统（如NetBSD、OpenBSD和FreeBSD）仍在活跃地开发ifconfig，并将其功能扩展到包含无线网络接口设置、VLAN中继、操控硬件功能（如TSO或硬件检验和计算）及设置桥接与隧道接口等。Solaris曾经使用ifconfig来进行所有网络相关的配置，但自Solaris 10引入dladm来进行链路层（OSI模型第二层）配置后，ifconfig就仅被用于进行IP配置。 在旧的Linux发行版中，ifconfig与route命令一同工作，用于连接计算机到网络及定义不同网络间的路由。Linux上的ifconfig是net-tools软件包的一部分，虽然该软件包仍被维护，但最新版1.60是在2001年4月15日发布的。[2] 现代Linux发行版正逐步淘汰ifconfig与route，并用自1999年4月17日发布的Linux 2.2.4起存在[3]的iproute2取代它们，[4]然而仍有许多发行版还未完全替换。[5]iproute2包含了ifconfig(8)、route(8)、arp(8)和netstat(1)的所有常用功能，以及多播配置、隧道和虚拟链路管理、流量控制（如带宽整形）及（底层的）IPsec配置等。 相关工具 Microsoft Windows从Windows 95到Windows Me都提供winipcfg给出当前IP信息的图形化显示。基于Windows NT内核的微软作业系统均有提供ipconfig，一个与ifconfig类似的命令。ipconfig也可控制WindowsDHCP客户端。 在Mac OS X中，ifconfig是IPConfiguration的封装，可于命令行控制BootP和DHCP客户端。由于ifconfig工作在协助管理网络设置的系统框架之下，不推荐使用ifconfig更改OS X的网络设置。要在命令行中更动Mac OS X的网络设置，应使用/usr/sbin/ipconfig或/usr/sbin/networksetup。 iwconfig，Wireless tools for Linux的一部分，名字即来源于ifconfig，用于管理在Linux的ifconfig最初范围外的无线网络接口。iwconfig可修改如无线网络的SSID和WEP密钥的无线网络专有设置，并与iwlist协同工作。Linux也包含iwspy以读取无线连接的信号、噪音与质量。 其它配置以太网适配器的相关工具包括ethtool、mii-tool与用于Linux的mii-diag和用于Solaris的dladm show-link。 命令 man ifconfig IFCONFIG(8) Linux System Administrator's Manual IFCONFIG(8) NAME ifconfig - configure a network interface SYNOPSIS ifconfig [-v] [-a] [-s] [interface] ifconfig [-v] interface [aftype] options | address ... DESCRIPTION Ifconfig is used to configure the kernel-resident network interfaces. It is used at boot time to set up interfaces as necessary. After that, it is usually only needed when debugging or when system tuning is needed. If no arguments are given, ifconfig displays the status of the currently active interfaces. If a single interface argument is given, it displays the status of the given interface only; if a single -a argument is given, it displays the status of all interfaces, even those that are down. Otherwise, it configures an interface. Address Families If the first argument after the interface name is recognized as the name of a supported address family, that address family is used for decoding and displaying all protocol addresses. Cur‐ rently supported address families include inet (TCP/IP, default), inet6 (IPv6), ax25 (AMPR Packet Radio), ddp (Appletalk Phase 2), ipx (Novell IPX) and netrom (AMPR Packet radio). All numbers supplied as parts in IPv4 dotted decimal notation may be decimal, octal, or hexadecimal, as specified in the ISO C standard (that is, a leading 0x or 0X implies hexadecimal; otherwise, a leading '0' implies octal; otherwise, the number is interpreted as decimal). Use of hexadeci‐ mal and octal numbers is not RFC-compliant and therefore its use is discouraged. OPTIONS -a display all interfaces which are currently available, even if down -s display a short list (like netstat -i) -v be more verbose for some error conditions interface The name of the interface. This is usually a driver name followed by a unit number, for example eth0 for the first Ethernet interface. If your kernel supports alias interfaces, you can specify them with syntax like eth0:0 for the first alias of eth0. You can use them to assign more addresses. To delete an alias interface use ifconfig eth0:0 down. Note: for every scope (i.e. same net with address/netmask combination) all aliases are deleted, if you delete the first (primary). up This flag causes the interface to be activated. It is implicitly specified if an address is assigned to the interface; you can suppress this behavior when using an alias inter‐ face by appending an - to the alias (e.g. eth0:0-). It is also suppressed when using the IPv4 0.0.0.0 address as the kernel will use this to implicitly delete alias inter‐ faces. down This flag causes the driver for this interface to be shut down. [-]arp Enable or disable the use of the ARP protocol on this interface. [-]promisc Enable or disable the promiscuous mode of the interface. If selected, all packets on the network will be received by the interface. [-]allmulti Enable or disable all-multicast mode. If selected, all multicast packets on the network will be received by the interface. mtu N This parameter sets the Maximum Transfer Unit (MTU) of an interface. dstaddr addr Set the remote IP address for a point-to-point link (such as PPP). This keyword is now obsolete; use the pointopoint keyword instead. netmask addr Set the IP network mask for this interface. This value defaults to the usual class A, B or C network mask (as derived from the interface IP address), but it can be set to any value. add addr/prefixlen Add an IPv6 address to an interface. del addr/prefixlen Remove an IPv6 address from an interface. tunnel ::aa.bb.cc.dd Create a new SIT (IPv6-in-IPv4) device, tunnelling to the given destination. irq addr Set the interrupt line used by this device. Not all devices can dynamically change their IRQ setting. io_addr addr Set the start address in I/O space for this device. mem_start addr Set the start address for shared memory used by this device. Only a few devices need this. media type Set the physical port or medium type to be used by the device. Not all devices can change this setting, and those that can vary in what values they support. Typical values for type are 10base2 (thin Ethernet), 10baseT (twisted-pair 10Mbps Ethernet), AUI (exter‐ nal transceiver) and so on. The special medium type of auto can be used to tell the driver to auto-sense the media. Again, not all drivers can do this. [-]broadcast [addr] If the address argument is given, set the protocol broadcast address for this interface. Otherwise, set (or clear) the IFF_BROADCAST flag for the interface. [-]pointopoint [addr] This keyword enables the point-to-point mode of an interface, meaning that it is a direct link between two machines with nobody else listening on it. If the address argument is also given, set the protocol address of the other side of the link, just like the obsolete dstaddr keyword does. Otherwise, set or clear the IFF_POINTOPOINT flag for the interface. hw class address Set the hardware address of this interface, if the device driver supports this operation. The keyword must be followed by the name of the hardware class and the printable ASCII equivalent of the hardware address. Hardware classes currently supported include ether (Ethernet), ax25 (AMPR AX.25), ARCnet and netrom (AMPR NET/ROM). multicast Set the multicast flag on the interface. This should not normally be needed as the driv‐ ers set the flag correctly themselves. address The IP address to be assigned to this interface. txqueuelen length Set the length of the transmit queue of the device. It is useful to set this to small values for slower devices with a high latency (modem links, ISDN) to prevent fast bulk transfers from disturbing interactive traffic like telnet too much. NOTES Since kernel release 2.2 there are no explicit interface statistics for alias interfaces any‐ more. The statistics printed for the original address are shared with all alias addresses on the same device. If you want per-address statistics you should add explicit accounting rules for the address using the iptables(8) command. Since net-tools 1.60-4 ifconfig is printing byte counters and human readable counters with IEC 60027-2 units. So 1 KiB are 2^10 byte. Note, the numbers are truncated to one decimal (which can by quite a large error if you consider 0.1 PiB is 112.589.990.684.262 bytes :) Interrupt problems with Ethernet device drivers fail with EAGAIN (SIOCSIIFLAGS: Resource tempo‐ rarily unavailable) it is most likely a interrupt conflict. See http://www.scyld.com/expert/irq-conflict.html for more information. FILES /proc/net/dev /proc/net/if_inet6 BUGS Ifconfig uses the ioctl access method to get the full address information, which limits hardware addresses to 8 bytes. Because Infiniband hardware address has 20 bytes, only the first 8 bytes are displayed correctly. Please use ip link command from iproute2 package to display link layer informations including the hardware address. While appletalk DDP and IPX addresses will be displayed they cannot be altered by this command. SEE ALSO route(8), netstat(8), arp(8), rarp(8), iptables(8), ifup(8), interfaces(5). http://physics.nist.gov/cuu/Units/binary.html - Prefixes for binary multiples AUTHORS Fred N. van Kempen, Alan Cox, Phil Blundell, Andi Kleen Bernd Eckenfels, net-tools 2008-10-03 IFCONFIG(8) Manual page ifconfig(8) line 116/167 (END) (press h for help or q to quit) IFCONFIG(8) Linux Programmer's Manual IFCONFIG(8) NAME ifconfig - 配置网络接口参数，它只显示给出的那个接口的状态； 如果给出一个 -a 参数，它会显示所有接口的状态，包括那些停用的接口。 否则就对一个接口进行配置。 地址族 如果跟在接口名称后的第一个参数是它支持地址族的名称， 那么这个地址族被用于翻译和显示所有的协议地 址。 当前支持的地址族包括 inet ( TCP/IP ，缺省)， inet6 ( IPv6 ) ， ax25 ( AMPR 无线分组 )， ddp( Appletalk 2 代)， ipx ( Novell IPX ) 和 netrom ( AMPR 无线分组)。 选项 接口 接口名称。通常是一个后跟单元号的驱动设备名， 例如第一个以太接口 eth0 。 up 此选项激活接口。如果给接口声明了地址，等于隐含声明了这个选项。 down 此选项使接口驱动设备关闭。 [-]arp 允许或禁止在接口上使用 ARP 协议。 [-]promisc 允许或禁止接口置于混杂模式。 如果选用，则接口可以接收网络上的所有分组。 [-]allmulti 允许或禁止 组播模式（all-multicast） 。 如果选用，则接口可以接收网络上的所有组播分组。 metric N 将接口度量值设置为整数 N。 (译注：度量值表示在这个路径上发送一个分组的成本,就是通过多少个 路由） mtu N 此选项设定接口的最大传输单元 MTU。 dstaddr addr 为点到点链路(如 PPP )设定一个远程 IP 地址。此选项现已废弃；用 pointopoint 选项替换。 netmask addr 为接口设定 IP 网络掩码。缺省值通常是 A，B 或 C 类的网络掩码 (由接口的 IP 地址推出)，但也可设为其它值。 add addr/prefixlen 为接口加入一个 IPv6 地址。 del addr/prefixlen 为接口删除一个 IPv6 地址。 tunnel aa.bb.cc.dd 建立一个新的 SIT (在 IPv4 中的 IPv6 )设备，为给定的目的地址建立通道。 irq addr 为接口设定所用的中断值。 并不是所有的设备都能动态更改自己的中断值。 io_addr addr 为接口设定起始输入/输出地址。 mem_start addr 设定接口所用的共享内存起始地址。只有少数设备需要。 media type 设定接口所用的物理端口或介质类型。并不是所有设备都会 更改这项值，而且它们支持的类型可能并相同。典型的 type 是 10base2 (细缆以太网)， 10baseT (双绞线 10Mbps 以太网)， AUI (外部收发单元接口)等等。介质类型为 auto 则用于让设备自动判断介质。 同样，并非所有设备都可以这样工作。 [-]broadcast [addr] 如果给出了地址参数，则可以为接口设定该协议的广播地址。否则，为接口设置(或清除)IFF_BROADCAST 标志。 hw class address 如接口驱动程序支持，则设定接口的硬件地址。 此选项必须后跟硬件的类型名称和硬件地址等价的可 打印 ASCII 字符。当前支持的硬件类型包括 ether (以太网)， ax25 (AMPR AX.25)， ARCnet Manual page ifconfig(8) line 36/132 69% (press h for hel 和netrom (AMPR NET/ROM)。 multicast 为接口设定组播标志。 通常无须用此选项因为接口本身会正确设定此标志。 address 为接口分配的 IP 地址。 txqueuelen length 为接口设定传输队列的长度。可以为具有高时延的低速接口设定 较小值以避免在象 telnet 这样烦人 的交互通信时大量高速的传输。 注意 从内核版本 2.2 起不再有别名接口的显式接口统计信息了。 打印出的源地址统计信息被同一接口的所有别名地址共享。 打印出的源地址统计信息被同一接口的所有别名地址共享。 如果你需要每个地址的统计信息，就应该用 ipchains(8) 命令为地址加入显式的记帐规则。 相关文件 /proc/net/socket /proc/net/dev /proc/net/if_inet6 BUGS 当显示 appletalk DDP 和 IPX 地址时不能用此命令进行更改，但可以用这条命令显示。 又见 route(8), netstat(8), arp(8), rarp(8), ipchains(8) 作者 Fred N. van Kempen, Alan Cox, Phil Blundell, Andi Kleen, [中文版维护人] meaculpa [中文版最新更新] 2000/12/08 [中国 Linux 论坛 man 手册页翻译计划] http://cmpp.linuxforum.net 跋 本页面中文版由中文 man 手册页计划提供。 中文 man 手册页计划：https://github.com/man-pages-zh/manpages-zh net-tools 4 August 1997 IFCONFIG(8) Manual page ifconfig(8) line 84/132 (END) (press h for help or q to quit) zander@zander-PC:~/Desktopifconfiglo:flags=73UP,LOOPBACK,RUNNING>mtu65536inet127.0.0.1netmask255.0.0.0inet6::1prefixlen128scopeid0x10host>looptxqueuelen1000(LocalLoopback)RXpackets3285bytes259686(253.5KiB)RXerrors0dropped0overruns0frame0TXpackets3285bytes259686(253.5KiB)TXerrors0dropped0overruns0carrier0collisions0wlp0s20f3:flags=4163UP,BROADCAST,RUNNING,MULTICAST>mtu1500inet172.16.1.213netmask255.255.254.0broadcast172.16.1.255inet62001:da8:1035:1::67:e267prefixlen128scopeid0x0global>inet6fe80::6a77:c6c0:9895:37d0prefixlen64scopeid0x20link>ethera4:c3:f0:8f:3e:7dtxqueuelen1000(Ethernet)RXpackets192123bytes128482027(122.5MiB)RXerrors0dropped0overruns0frame0TXpackets127353bytes19058000(18.1MiB)TXerrors0dropped0overruns0carrier0collisions0zander@zander−PC: /Desktop ifconfig\r lo: flags=73 mtu 65536\r inet 127.0.0.1 netmask 255.0.0.0\r inet6 ::1 prefixlen 128 scopeid 0x10\r loop txqueuelen 1000 (Local Loopback)\r RX packets 3285 bytes 259686 (253.5 KiB)\r RX errors 0 dropped 0 overruns 0 frame 0\r TX packets 3285 bytes 259686 (253.5 KiB)\r TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0\r \r wlp0s20f3: flags=4163 mtu 1500\r inet 172.16.1.213 netmask 255.255.254.0 broadcast 172.16.1.255\r inet6 2001:da8:1035:1::67:e267 prefixlen 128 scopeid 0x0\r inet6 fe80::6a77:c6c0:9895:37d0 prefixlen 64 scopeid 0x20\r ether a4:c3:f0:8f:3e:7d txqueuelen 1000 (Ethernet)\r RX packets 192123 bytes 128482027 (122.5 MiB)\r RX errors 0 dropped 0 overruns 0 frame 0\r TX packets 127353 bytes 19058000 (18.1 MiB)\r TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0\r \r zander@zander-PC:~/Desktopifconfiglo:flags=73UP,LOOPBACK,RUNNING>mtu65536inet127.0.0.1netmask255.0.0.0inet6::1prefixlen128scopeid0x10host>looptxqueuelen1000(LocalLoopback)RXpackets3285bytes259686(253.5KiB)RXerrors0dropped0overruns0frame0TXpackets3285bytes259686(253.5KiB)TXerrors0dropped0overruns0carrier0collisions0wlp0s20f3:flags=4163UP,BROADCAST,RUNNING,MULTICAST>mtu1500inet172.16.1.213netmask255.255.254.0broadcast172.16.1.255inet62001:da8:1035:1::67:e267prefixlen128scopeid0x0global>inet6fe80::6a77:c6c0:9895:37d0prefixlen64scopeid0x20link>ethera4:c3:f0:8f:3e:7dtxqueuelen1000(Ethernet)RXpackets192123bytes128482027(122.5MiB)RXerrors0dropped0overruns0frame0TXpackets127353bytes19058000(18.1MiB)TXerrors0dropped0overruns0carrier0collisions0zander@zander−PC: /Desktop 参考： https://zh.wikipedia.org/wiki/Ifconfig 相关链接： https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/dd197434(v=ws.10)?redirectedfrom=MSDN ifconfig(8), manpage for Linux net-tools ifconfig ifconfig(8), manpage for the FreeBSD ifconfig ifconfig(8), manpage for the OpenBSD ifconfig ifconfig(8), manpage for the Solaris ifconfig networksetup(8), manpage for the Mac OS X networksetup ifconfig for Windows ipconfig.aspx) for Windows on a technet.microsoft.com ip, manpage for the Linux command ip Debian net-tools page, which includes sources of the Linux version of ifconfig net-tools future thread, from current maintainers ifconfig examples "},"page/1089.html":{"url":"page/1089.html","title":"net","keywords":"","body":"net（win） 一、功能 该实用程序显示或设置网络的状态、参数、共享资源或服务，启动或停止网络服务。 二、格式 NET [ ACCOUNTS | COMPUTER | CONFIG | CONTINUE | FILE | GROUP | HELP | HELPMSG | LOCALGROUP | NAME | PAUSE | PRINT | SEND | SESSION | SHARE | START | STATISTICS | STOP | TIME | USE | USER | VIEW ] 开发人员 微软，IBM，ReactOS贡献者 初始发行 1985年4月2日；34年前 操作系统 MS-Net，DOS，OS / 2，Windows，ReactOS，eComStation 类型 命令) 执照 MS-Net，OS / 2，Windows，eComStation：专有 商业软件 ReactOS：GNU通用公共许可证 在计算，net是一个命令)在IBM OS / 2，微软的Windows，ReactOS的和eComStation用于管理和从配置操作系统的命令行。这也是部分IBM PC网络计划为DOS。[1]#cite_note-ibmpcnetworkprogram-1) 概述 该命令主要用于管理网络资源。[2]#citenote-ss64.com-2)这是实现为的外部命令net.exe。[[3]](https://en.wikipedia.org/wiki/Net(command)#citenote-computerhope-3)在批处理文件中使用时，/Y或/N开关可用于无条件回答命令返回的问题。[[2]](https://en.wikipedia.org/wiki/Net(command)#cite_note-ss64.com-2)该net命令具有多个子命令，这些子命令可能因一个实现或操作系统版本而异。 名称 描述 DOS支持 OS / 2支持 Windows支持 ReactOS支持 备注 access 管理访问 没有 IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) 没有 没有 accounts 更改Netlogon服务角色并管理最长用户登录时间，密码到期时间和其他帐户设置 没有 IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) Windows NT，Windows 2000，Windows XP，Windows Vista，Windows 7，Windows 8，Windows 10 [5] #citenote-thenetworkencyclopedia-5)[[3] ](https://en.wikipedia.org/wiki/Net(command)#citenote-computerhope-3)[[6]](https://en.wikipedia.org/wiki/Net(command)#cite_note-technet-winxp-6) ReactOS 0.4.8 [7]#cite_note-7) admin 在远程服务器上运行管理命令 没有 IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) 没有 没有 alias 管理当前在域中定义的别名 没有 IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) 没有 没有 app 管理有关应用程序定义的信息 没有 IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) 没有 没有 appparm 没有 OS / 2扭曲4.5 [4]#cite_note-robvanderwoude.com-4) 没有 没有 仅OS / 2 Warp 4.5和eComStation audit 列出并清除服务器的网络审核日志的内容 没有 IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) 没有 没有 comm 列出有关共享串行设备的队列的信息 没有 IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) 没有 没有 computer 从域数据库添加或删除计算机 没有 没有 Windows Server 2000，Windows Server 2003，带有SP1，Windows Server 2003 R2，Windows Server 2008，Windows Server 2012，Windows NT，Windows 2000，Windows XP，Windows Vista，Windows 7，Windows 8，Windows 10的Windows Server 2003 [5] #citenote-thenetworkencyclopedia-5)[[3] ](https://en.wikipedia.org/wiki/Net(command)#citenote-computerhope-3)[[6] ](https://en.wikipedia.org/wiki/Net(command)#citenote-technet-winxp-6)[[8] ](https://en.wikipedia.org/wiki/Net(command)#citenote-8)[[9]](https://en.wikipedia.org/wiki/Net(command)#cite_note-9) ReactOS 0.4.8 [10]#cite_note-10) config 显示NetBIOS配置信息 没有 IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) Windows 95，Windows 98，Windows NT，Windows 2000，Windows XP，Windows Vista，Windows 7，Windows 8，Windows 10 [5] #citenote-thenetworkencyclopedia-5)[[3] ](https://en.wikipedia.org/wiki/Net(command)#citenote-computerhope-3)[[6]](https://en.wikipedia.org/wiki/Net(command)#cite_note-technet-winxp-6) ReactOS 0.4.8 [11]#cite_note-11) continue 继续暂停的服务 IBM PC网络程序[1]#cite_note-ibmpcnetworkprogram-1) IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) Windows NT，Windows 2000，Windows XP，Windows Vista，Windows 7，Windows 8，Windows 10 [5] #citenote-thenetworkencyclopedia-5)[[3] ](https://en.wikipedia.org/wiki/Net(command)#citenote-computerhope-3)[[6]](https://en.wikipedia.org/wiki/Net(command)#cite_note-technet-winxp-6) ReactOS 0.4.8 [12]#cite_note-12) copy 在本地和远程复制和附加文件 没有 IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) 没有 没有 dasd 管理和显示目录限制 没有 IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) 没有 没有 device 列出共享串行设备的状态并停止当前使用设备 没有 IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) 没有 没有 diag 运行Microsoft网络诊断程序 没有 没有 Windows 95，Windows 98 [5]#cite_note-thenetworkencyclopedia-5) 没有 error 列出并清除网络错误日志 IBM PC网络程序[1]#cite_note-ibmpcnetworkprogram-1) IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) 没有 没有 file 列出远程计算机打开的文件 IBM PC网络程序[1]#cite_note-ibmpcnetworkprogram-1) IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) Windows NT，Windows 2000，Windows XP，Windows Vista，Windows 7，Windows 8，Windows 10 [5] #citenote-thenetworkencyclopedia-5)[[3] ](https://en.wikipedia.org/wiki/Net(command)#citenote-computerhope-3)[[6]](https://en.wikipedia.org/wiki/Net(command)#cite_note-technet-winxp-6) 未实现[13]#cite_note-reactos-net-main-13) forward 路由传入消息并取消转发 IBM PC网络程序[1]#cite_note-ibmpcnetworkprogram-1) IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) 没有 没有 group 添加，显示或修改域中的全局组 没有 IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) Windows Server 2000，Windows Server 2003，带有SP1，Windows Server 2003 R2，Windows Server 2008，Windows Server 2012，Windows NT，Windows 2000，Windows XP，Windows Vista，Windows 7，Windows 8，Windows 10的Windows Server 2003 [5] #citenote-thenetworkencyclopedia-5)[[3] ](https://en.wikipedia.org/wiki/Net(command)#citenote-computerhope-3)[[6] ](https://en.wikipedia.org/wiki/Net(command)#citenote-technet-winxp-6)[[14] ](https://en.wikipedia.org/wiki/Net(command)#citenote-14)[[15]](https://en.wikipedia.org/wiki/Net(command)#cite_note-15) ReactOS 0.4.8 [16]#cite_note-16) help 显示语法 没有 IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) Windows 95，Windows 98，Windows NT，Windows 2000，Windows XP，Windows Vista，Windows 7，Windows 8，Windows 10 [5] #citenote-thenetworkencyclopedia-5)[[3] ](https://en.wikipedia.org/wiki/Net(command)#citenote-computerhope-3)[[6]](https://en.wikipedia.org/wiki/Net(command)#cite_note-technet-winxp-6) ReactOS 0.4.8 [17]#cite_note-17) helpmsg 显示有关错误消息的信息 没有 没有 Windows NT，Windows 2000，Windows XP，Windows Vista，Windows 7，Windows 8，Windows 10 [5] #citenote-thenetworkencyclopedia-5)[[3] ](https://en.wikipedia.org/wiki/Net(command)#citenote-computerhope-3)[[6]](https://en.wikipedia.org/wiki/Net(command)#cite_note-technet-winxp-6) ReactOS 0.4.8 [18]#cite_note-18) init 没有 没有 Windows 95，Windows 98 [5]#cite_note-thenetworkencyclopedia-5) 没有 localgroup 添加，显示或修改本地组 没有 没有 Windows Server 2008，Windows Server 2012，Windows NT，Windows 2000，Windows XP，Windows Vista，Windows 7，Windows 8，Windows 10[5] #citenote-thenetworkencyclopedia-5)[[3] ](https://en.wikipedia.org/wiki/Net(command)#citenote-computerhope-3)[[6] ](https://en.wikipedia.org/wiki/Net(command)#citenote-technet-winxp-6)[[19] ](https://en.wikipedia.org/wiki/Net(command)#citenote-19)[[20]](https://en.wikipedia.org/wiki/Net(command)#cite_note-20) ReactOS 0.4.8 [21]#cite_note-21) log 开始/停止将消息保存到文件/打印机，并显示有关转发当前消息日志的信息 IBM PC网络程序[1]#cite_note-ibmpcnetworkprogram-1) IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) 没有 没有 logoff 没有 没有 Windows 95，Windows 98 [5]#cite_note-thenetworkencyclopedia-5) 没有 logon 没有 没有 Windows 95，Windows 98 [5]#cite_note-thenetworkencyclopedia-5) 没有 move 本地和远程移动文件 没有 IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) 没有 没有 name 列出或管理NetBIOS名称 IBM PC网络程序[1]#cite_note-ibmpcnetworkprogram-1) IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) Windows NT，Windows 2000，Windows XP [5] #citenote-thenetworkencyclopedia-5)[[6]](https://en.wikipedia.org/wiki/Net(command)#cite_note-technet-winxp-6) 未实现[13]#cite_note-reactos-net-main-13) password 更改服务器或域中的密码 没有 IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) Windows 95，Windows 98 [5]#cite_note-thenetworkencyclopedia-5) 没有 pause 暂停服务 IBM PC网络程序[1]#cite_note-ibmpcnetworkprogram-1) IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) Windows NT，Windows 2000，Windows XP，Windows Vista，Windows 7，Windows 8，Windows 10 [5] #citenote-thenetworkencyclopedia-5)[[3] ](https://en.wikipedia.org/wiki/Net(command)#citenote-computerhope-3)[[6]](https://en.wikipedia.org/wiki/Net(command)#cite_note-technet-winxp-6) ReactOS 0.4.8 [22]#cite_note-22) print 显示打印机队列信息或打印作业信息，或控制打印作业 IBM PC网络程序[1]#cite_note-ibmpcnetworkprogram-1) IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) Windows Server 2008，Windows Server 2012，Windows Server 2012 R2，Windows Server 2016，Windows Server（半年通道），Windows 95，Windows 98，Windows NT，Windows 2000，Windows XP，Windows Vista，Windows 8 [5] #citenote-thenetworkencyclopedia-5)[[ 6] ](https://en.wikipedia.org/wiki/Net(command)#citenote-technet-winxp-6)[[23] ](https://en.wikipedia.org/wiki/Net(command)#citenote-23)[[24] ](https://en.wikipedia.org/wiki/Net(command)#citenote-24)[[25]](https://en.wikipedia.org/wiki/Net(command)#cite_note-25) 未实现[13]#cite_note-reactos-net-main-13) Windows 7和Windows Server 2008 R2中已弃用 riplmach 没有 OS / 2扭曲4.5 [4]#cite_note-robvanderwoude.com-4) 没有 没有 仅OS / 2 Warp 4.5和eComStation riplmclas 没有 OS / 2扭曲4.5 [4]#cite_note-robvanderwoude.com-4) 没有 没有 仅OS / 2 Warp 4.5和eComStation run 没有 IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) 没有 没有 send 发送消息给其他用户或计算机 IBM PC网络程序[1]#cite_note-ibmpcnetworkprogram-1) IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) Windows NT，Windows 2000，Windows XP [5] #citenote-thenetworkencyclopedia-5)[[6]](https://en.wikipedia.org/wiki/Net(command)#cite_note-technet-winxp-6) 未实现[13]#cite_note-reactos-net-main-13) separator 控制是否在打印文件的开头打印分隔页 IBM PC网络程序[1]#cite_note-ibmpcnetworkprogram-1) 没有 没有 没有 session 管理服务器计算机连接 没有 IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) Windows Server 2003，带有SP1的Windows Server 2003，带有SP2的Windows Server 2003，Windows Server 2003 R2，Windows Server 2008，Windows Server 2008 R2，带有SP1的Windows Server 2008 R2，Windows Server 2012，Windows NT，Windows 2000，Windows XP， Windows Vista，Windows 7，带有SP1的Windows 7，Windows 8，Windows 10[5] #citenote-thenetworkencyclopedia-5)[[6] ](https://en.wikipedia.org/wiki/Net(command)#citenote-technet-winxp-6)[[3] ](https://en.wikipedia.org/wiki/Net(command)#citenote-computerhope-3)[[26] ](https://en.wikipedia.org/wiki/Net(command)#citenote-26)[[27]](https://en.wikipedia.org/wiki/Net(command)#cite_note-27) 未实现[13]#cite_note-reactos-net-main-13) share 管理共享资源 IBM PC网络程序[1]#cite_note-ibmpcnetworkprogram-1) IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) Windows Server 2008，Windows Server 2008 R2，Windows Server 2012，Windows NT，Windows 2000，Windows XP，Windows Vista，Windows 7，Windows 8，Windows 10 [5] #citenote-thenetworkencyclopedia-5)[[3] ](https://en.wikipedia.org/wiki/Net(command)#citenote-computerhope-3)[[6] ](https://en.wikipedia.org/wiki/Net(command)#citenote-technet-winxp-6)[[28] ](https://en.wikipedia.org/wiki/Net(command)#citenote-28)[[29]](https://en.wikipedia.org/wiki/Net(command)#cite_note-29) ReactOS 0.4.8 [30]#cite_note-30) start 启动服务 IBM PC网络程序[1]#cite_note-ibmpcnetworkprogram-1) IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) Windows 95，Windows 98，Windows NT，Windows 2000，Windows XP，Windows Vista，Windows 7，Windows 8，Windows 10 [5] #citenote-thenetworkencyclopedia-5)[[3] ](https://en.wikipedia.org/wiki/Net(command)#citenote-computerhope-3)[[6]](https://en.wikipedia.org/wiki/Net(command)#cite_note-technet-winxp-6) ReactOS 0.4.8 [31]#cite_note-31) statistics 显示和清除工作站的使用情况统计信息列表 没有 IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) Windows NT，Windows 2000，Windows XP，Windows Vista，Windows 7，Windows 8，Windows 10 [5] #citenote-thenetworkencyclopedia-5)[[3] ](https://en.wikipedia.org/wiki/Net(command)#citenote-computerhope-3)[[6]](https://en.wikipedia.org/wiki/Net(command)#cite_note-technet-winxp-6) ReactOS 0.4.8 [32]#cite_note-32) status 列出有关当前网络共享和服务器定义设置的信息 没有 IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) 没有 没有 stop 停止服务 没有 IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) Windows 95，Windows 98，Windows NT，Windows 2000，Windows XP，Windows Vista，Windows 7，Windows 8，Windows 10 [5] #citenote-thenetworkencyclopedia-5)[[3] ](https://en.wikipedia.org/wiki/Net(command)#citenote-computerhope-3)[[6]](https://en.wikipedia.org/wiki/Net(command)#cite_note-technet-winxp-6) ReactOS 0.4.8 [33]#cite_note-33) time 显示远程计算机的当前时间或与远程计算机的同步时间 没有 IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) Windows 95，Windows 98，Windows NT，Windows 2000，Windows XP，Windows Vista，Windows 7，Windows 8，Windows 10 [5] #citenote-thenetworkencyclopedia-5)[[3] ](https://en.wikipedia.org/wiki/Net(command)#citenote-computerhope-3)[[6]](https://en.wikipedia.org/wiki/Net(command)#cite_note-technet-winxp-6) 未实现[13]#cite_note-reactos-net-main-13) use 将计算机与共享资源连接/断开连接，或显示有关计算机连接的信息 IBM PC网络程序[1]#cite_note-ibmpcnetworkprogram-1) IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) Windows Server 2000，Windows Server 2003，Windows Server 2003 R2，Windows Server 2008，Windows Server 2008 R2，Windows Server 2012，Windows 95，Windows 98，Windows NT，Windows 2000，Windows XP，Windows Vista，Windows 7，Windows 8， Windows 10[5] #citenote-thenetworkencyclopedia-5)[[3] ](https://en.wikipedia.org/wiki/Net(command)#citenote-computerhope-3)[[6] ](https://en.wikipedia.org/wiki/Net(command)#citenote-technet-winxp-6)[[34] ](https://en.wikipedia.org/wiki/Net(command)#citenote-34)[[35]](https://en.wikipedia.org/wiki/Net(command)#cite_note-35) ReactOS 0.4.8 [36]#cite_note-36) user 添加或修改用户帐户，或显示用户帐户信息 没有 IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) Windows Server 2000，Windows Server 2003，Windows Server 2003 R2，带有SP1，Windows Server 2003的Windows Server 2008，Windows Server 2012，Windows NT，Windows 2000，Windows XP，Windows Vista，Windows 7，Windows 8，Windows 10 [5] #citenote-thenetworkencyclopedia-5)[[3] ](https://en.wikipedia.org/wiki/Net(command)#citenote-computerhope-3)[[6] ](https://en.wikipedia.org/wiki/Net(command)#citenote-technet-winxp-6)[[37] ](https://en.wikipedia.org/wiki/Net(command)#citenote-37)[[38]](https://en.wikipedia.org/wiki/Net(command)#cite_note-38) ReactOS 0.4.8 [39]#cite_note-39) ver 显示有关工作组重定向器的信息 没有 没有 Windows 95，Windows 98 [5]#cite_note-thenetworkencyclopedia-5) 没有 view 显示指定计算机共享的域，计算机或资源的列表 没有 IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) Windows Server 2000，Windows Server 2003，Windows Server 2003 R2，Windows Server 2008，Windows Server 2008 R2，Windows Server 2012，Windows 95，Windows 98，Windows NT，Windows 2000，Windows XP，Windows Vista，Windows 7，Windows 8， Windows 10[5] #citenote-thenetworkencyclopedia-5)[[3] ](https://en.wikipedia.org/wiki/Net(command)#citenote-computerhope-3)[[6] ](https://en.wikipedia.org/wiki/Net(command)#citenote-technet-winxp-6)[[40] ](https://en.wikipedia.org/wiki/Net(command)#citenote-40)[[41]](https://en.wikipedia.org/wiki/Net(command)#cite_note-41) 未实现[13]#cite_note-reactos-net-main-13) who 列出使用谁登录当前或远程域，显示用户登录信息以及列出与特定服务器建立会话的用户 没有 IBM OS / 2 LAN服务器，OS / 2 Warp 4.5 [4]#cite_note-robvanderwoude.com-4) 没有 没有 例子 该net use命令具有几个与网络相关的功能。 连接网络驱动器和打印机 net use可以控制安装（在Microsoft术语中为“ 映射 ”）驱动器共享以及在网络环境中连接共享打印机。此命令使用SMB（服务器消息块）和端口139或445上的NetBIOS协议。默认情况下，基本Windows XP配置启用此功能。因此，用户可以连接到共享资源（例如计算机，打印机和驱动器）或从中断开连接。 net use 可以显示共享资源上的网络连接信息列表。 空会话连接 net use还连接到IPC {% math_inline %}（进程间通信共享）。这就是所谓的空会话连接，它允许未经身份验证的用户。匿名连接的基本语法是： 净使用\\\\ IP地址\\ IPC {% endmath_inline %} “” / u：“” 例如，在命令提示符下键入： 净使用\\\\ 192.168.1.101 \\ IPC {% math_inline %} “” / u：“” 尝试以匿名用户身份使用空白密码连接到网络192.168.1.101的共享IPC {% endmath_inline %}。如果成功连接到目标计算机，则可以收集很多信息，例如共享，用户，组，注册表项等。这将为黑客提供有关远程用户的大量信息。这已在Windows NT 4.0 SP6中更改。在Windows 2000中，更改系统配置后可能已启用“空会话连接”。 命令 win7x64 net -help 此命令的语法是: NET [ ACCOUNTS | COMPUTER | CONFIG | CONTINUE | FILE | GROUP | HELP | HELPMSG | LOCALGROUP | PAUSE | SESSION | SHARE | START | STATISTICS | STOP | TIME | USE | USER | VIEW ] linux-deepin15.11 man net NET(8) System Administration tools NET(8) NAME net - Tool for administration of Samba and remote CIFS servers. SYNOPSIS net {} [-h|--help] [-w|--workgroup workgroup] [-W|--myworkgroup myworkgroup] [-U|--user user] [-I|--ipaddress ip-address] [-p|--port port] [-n myname] [-s conffile] [-S|--server server] [-l|--long] [-v|--verbose] [-f|--force] [-P|--machine-pass] [-d debuglevel] [-V] [--request-timeout seconds] [-t|--timeout seconds] [-i|--stdin] [--tallocreport] DESCRIPTION This tool is part of the samba(7) suite. The Samba net utility is meant to work just like the net utility available for windows and DOS. The first argument should be used to specify the protocol to use when executing a certain command. ADS is used for ActiveDirectory, RAP is using for old (Win9x/NT3) clients and RPC can be used for NT4 and Windows 2000. If this argument is omitted, net will try to determine it automatically. Not all commands are available on all protocols. OPTIONS -?|--help Print a summary of command line options. -k|--kerberos Try to authenticate with kerberos. Only useful in an Active Directory environment. -w|--workgroup target-workgroup Sets target workgroup or domain. You have to specify either this option or the IP address or the name of a server. -W|--myworkgroup workgroup Sets client workgroup or domain -U|--user user User name to use -I|--ipaddress ip-address IP address of target server to use. You have to specify either this option or a target workgroup or a target server. -p|--port port Port on the target server to connect to (usually 139 or 445). Defaults to trying 445 first, then 139. -n|--netbiosname This option allows you to override the NetBIOS name that Samba uses for itself. This is identical to setting the netbios name parameter in the smb.conf file. However, a command line setting will take precedence over settings in smb.conf. -s|--configfile= The file specified contains the configuration details required by the server. The information in this file includes server-specific information such as what printcap file to use, as well as descriptions of all the services that the server is to provide. See smb.conf for more information. The default configuration file name is determined at compile time. -S|--server server Name of target server. You should specify either this option or a target workgroup or a target IP address. -l|--long When listing data, give more information on each item. -v|--verbose When listing data, give more verbose information on each item. -f|--force Enforcing a net command. -P|--machine-pass Make queries to the external server using the machine account of the local server. --request-timeout 30 Let client requests timeout after 30 seconds the default is 10 seconds. -t|--timeout 30 Set timeout for client operations to 30 seconds. --use-ccache Try to use the credentials cached by winbind. -i|--stdin Take input for net commands from standard input. --tallocreport Generate a talloc report while processing a net command. -T|--test Only test command sequence, dry-run. -F|--flags FLAGS Pass down integer flags to a net subcommand. -C|--comment COMMENT Pass down a comment string to a net subcommand. -n|--myname MYNAME Use MYNAME as a requester name for a net subcommand. -c|--container CONTAINER Use a specific AD container for net ads operations. -M|--maxusers MAXUSERS Fill in the maxusers field in net rpc share operations. -r|--reboot Reboot a remote machine after a command has been successfully executed (e.g. in remote join operations). --force-full-repl When calling \"net rpc vampire keytab\" this option enforces a full re-creation of the generated keytab file. --single-obj-repl When calling \"net rpc vampire keytab\" this option allows one to replicate just a single object to the generated keytab file. --clean-old-entries When calling \"net rpc vampire keytab\" this option allows one to cleanup old entries from the generated keytab file. --db Define dbfile for \"net idmap\" commands. --lock Activates locking of the dbfile for \"net idmap check\" command. -a|--auto Activates noninteractive mode in \"net idmap check\". --repair Activates repair mode in \"net idmap check\". --acls Includes ACLs to be copied in \"net rpc share migrate\". --attrs Includes file attributes to be copied in \"net rpc share migrate\". --timestamps Includes timestamps to be copied in \"net rpc share migrate\". -X|--exclude DIRECTORY Allows one to exclude directories when copying with \"net rpc share migrate\". --destination SERVERNAME Defines the target servername of migration process (defaults to localhost). -L|--local Sets the type of group mapping to local (used in \"net groupmap set\"). -D|--domain Sets the type of group mapping to domain (used in \"net groupmap set\"). -N|--ntname NTNAME Sets the ntname of a group mapping (used in \"net groupmap set\"). -R|--rid RID Sets the rid of a group mapping (used in \"net groupmap set\"). --reg-version REG_VERSION Assume database version {n|1,2,3} (used in \"net registry check\"). -o|--output FILENAME Output database file (used in \"net registry check\"). --wipe Create a new database from scratch (used in \"net registry check\"). --precheck PRECHECK_DB_FILENAME Defines filename for database prechecking (used in \"net registry import\"). --no-dns-updates Do not perform DNS updates as part of \"net ads join\". -e|--encrypt This command line parameter requires the remote server support the UNIX extensions or that the SMB3 protocol has been selected. Requests that the connection be encrypted. Negotiates SMB encryption using either SMB3 or POSIX extensions via GSSAPI. Uses the given credentials for the encryption negotiation (either kerberos or NTLMv1/v2 if given domain/username/password triple. Fails the connection if encryption cannot be negotiated. -d|--debuglevel=level level is an integer from 0 to 10. The default value if this parameter is not specified is 1. The higher this value, the more detail will be logged to the log files about the activities of the server. At level 0, only critical errors and serious warnings will be logged. Level 1 is a reasonable level for day-to-day running - it generates a small amount of information about operations carried out. Levels above 1 will generate considerable amounts of log data, and should only be used when investigating a problem. Levels above 3 are designed for use only by developers and generate HUGE amounts of log data, most of which is extremely cryptic. Note that specifying this parameter here will override the log level parameter in the smb.conf file. -V|--version Prints the program version number. -s|--configfile= The file specified contains the configuration details required by the server. The information in this file includes server-specific information such as what printcap file to use, as well as descriptions of all the services that the server is to provide. See smb.conf for more information. The default configuration file name is determined at compile time. -l|--log-basename=logdirectory Base directory name for log/debug files. The extension \".progname\" will be appended (e.g. log.smbclient, log.smbd, etc...). The log file is never removed by the client. --option== Set the smb.conf(5) option \"\" to value \"\" from the command line. This overrides compiled-in defaults and options read from the configuration file. COMMANDS CHANGESECRETPW This command allows the Samba machine account password to be set from an external application to a machine account password that has already been stored in Active Directory. DO NOT USE this command unless you know exactly what you are doing. The use of this command requires that the force flag (-f) be used also. There will be NO command prompt. Whatever information is piped into stdin, either by typing at the command line or otherwise, will be stored as the literal machine password. Do NOT use this without care and attention as it will overwrite a legitimate machine password without warning. YOU HAVE BEEN WARNED. TIME The NET TIME command allows you to view the time on a remote server or synchronise the time on the local server with the time on the remote server. TIME Without any options, the NET TIME command displays the time on the remote server. The remote server must be specified with the -S option. TIME SYSTEM Displays the time on the remote server in a format ready for /bin/date. The remote server must be specified with the -S option. TIME SET Tries to set the date and time of the local server to that on the remote server using /bin/date. The remote server must be specified with the -S option. TIME ZONE Displays the timezone in hours from GMT on the remote server. The remote server must be specified with the -S option. [RPC|ADS] JOIN [TYPE] [--no-dns-updates] [-U username[%password]] [createupn=UPN] [createcomputer=OU] [machinepass=PASS] [osName=string osVer=string] [options] Join a domain. If the account already exists on the server, and [TYPE] is MEMBER, the machine will attempt to join automatically. (Assuming that the machine has been created in server manager) Otherwise, a password will be prompted for, and a new account may be created. [TYPE] may be PDC, BDC or MEMBER to specify the type of server joining the domain. [UPN] (ADS only) set the principalname attribute during the join. The default format is host/netbiosname@REALM. [OU] (ADS only) Precreate the computer account in a specific OU. The OU string reads from top to bottom without RDNs, and is delimited by a '/'. Please note that '\\' is used for escape by both the shell and ldap, so it may need to be doubled or quadrupled to pass through, and it is not used as a delimiter. [PASS] (ADS only) Set a specific password on the computer account being created by the join. [osName=string osVer=String] (ADS only) Set the operatingSystem and operatingSystemVersion attribute during the join. Both parameters must be specified for either to take effect. [RPC] OLDJOIN [options] Join a domain. Use the OLDJOIN option to join the domain using the old style of domain joining - you need to create a trust account in server manager first. [RPC|ADS] USER [RPC|ADS] USER List all users [RPC|ADS] USER DELETE target Delete specified user [RPC|ADS] USER INFO target List the domain groups of the specified user. [RPC|ADS] USER RENAME oldname newname Rename specified user. [RPC|ADS] USER ADD name [password] [-F user flags] [-C comment] Add specified user. [RPC|ADS] GROUP [RPC|ADS] GROUP [misc options] [targets] List user groups. [RPC|ADS] GROUP DELETE name [misc. options] Delete specified group. [RPC|ADS] GROUP ADD name [-C comment] Create specified group. [RAP|RPC] SHARE [RAP|RPC] SHARE [misc. options] [targets] Enumerates all exported resources (network shares) on target server. [RAP|RPC] SHARE ADD name=serverpath [-C comment] [-M maxusers] [targets] Adds a share from a server (makes the export active). Maxusers specifies the number of users that can be connected to the share simultaneously. SHARE DELETE sharename Delete specified share. [RPC|RAP] FILE [RPC|RAP] FILE List all open files on remote server. [RPC|RAP] FILE CLOSE fileid Close file with specified fileid on remote server. [RPC|RAP] FILE INFO fileid Print information on specified fileid. Currently listed are: file-id, username, locks, path, permissions. [RAP|RPC] FILE USER user List files opened by specified user. Please note that net rap file user does not work against Samba servers. SESSION RAP SESSION Without any other options, SESSION enumerates all active SMB/CIFS sessions on the target server. RAP SESSION DELETE|CLOSE CLIENT_NAME Close the specified sessions. RAP SESSION INFO CLIENT_NAME Give a list with all the open files in specified session. RAP SERVER DOMAIN List all servers in specified domain or workgroup. Defaults to local domain. RAP DOMAIN Lists all domains and workgroups visible on the current network. RAP PRINTQ RAP PRINTQ INFO QUEUE_NAME Lists the specified print queue and print jobs on the server. If the QUEUE_NAME is omitted, all queues are listed. RAP PRINTQ DELETE JOBID Delete job with specified id. RAP VALIDATE user [password] Validate whether the specified user can log in to the remote server. If the password is not specified on the commandline, it will be prompted. Note Currently NOT implemented. RAP GROUPMEMBER RAP GROUPMEMBER LIST GROUP List all members of the specified group. RAP GROUPMEMBER DELETE GROUP USER Delete member from group. RAP GROUPMEMBER ADD GROUP USER Add member to group. RAP ADMIN command Execute the specified command on the remote server. Only works with OS/2 servers. Note Currently NOT implemented. RAP SERVICE RAP SERVICE START NAME [arguments...] Start the specified service on the remote server. Not implemented yet. Note Currently NOT implemented. RAP SERVICE STOP Stop the specified service on the remote server. Note Currently NOT implemented. RAP PASSWORD USER OLDPASS NEWPASS Change password of USER from OLDPASS to NEWPASS. LOOKUP LOOKUP HOST HOSTNAME [TYPE] Lookup the IP address of the given host with the specified type (netbios suffix). The type defaults to 0x20 (workstation). LOOKUP LDAP [DOMAIN] Give IP address of LDAP server of specified DOMAIN. Defaults to local domain. LOOKUP KDC [REALM] Give IP address of KDC for the specified REALM. Defaults to local realm. LOOKUP DC [DOMAIN] Give IP's of Domain Controllers for specified DOMAIN. Defaults to local domain. LOOKUP MASTER DOMAIN Give IP of master browser for specified DOMAIN or workgroup. Defaults to local domain. CACHE Samba uses a general caching interface called 'gencache'. It can be controlled using 'NET CACHE'. All the timeout parameters support the suffixes: s - Seconds m - Minutes h - Hours d - Days w - Weeks CACHE ADD key data time-out Add specified key+data to the cache with the given timeout. CACHE DEL key Delete key from the cache. CACHE SET key data time-out Update data of existing cache entry. CACHE SEARCH PATTERN Search for the specified pattern in the cache data. CACHE LIST List all current items in the cache. CACHE FLUSH Remove all the current items from the cache. GETLOCALSID [DOMAIN] Prints the SID of the specified domain, or if the parameter is omitted, the SID of the local server. SETLOCALSID S-1-5-21-x-y-z Sets SID for the local server to the specified SID. GETDOMAINSID Prints the local machine SID and the SID of the current domain. SETDOMAINSID Sets the SID of the current domain. GROUPMAP Manage the mappings between Windows group SIDs and UNIX groups. Common options include: · unixgroup - Name of the UNIX group · ntgroup - Name of the Windows NT group (must be resolvable to a SID · rid - Unsigned 32-bit integer · sid - Full SID in the form of \"S-1-...\" · type - Type of the group; either 'domain', 'local', or 'builtin' · comment - Freeform text description of the group GROUPMAP ADD Add a new group mapping entry: net groupmap add {rid=int|sid=string} unixgroup=string \\ [type={domain|local}] [ntgroup=string] [comment=string] GROUPMAP DELETE Delete a group mapping entry. If more than one group name matches, the first entry found is deleted. net groupmap delete {ntgroup=string|sid=SID} GROUPMAP MODIFY Update an existing group entry. net groupmap modify {ntgroup=string|sid=SID} [unixgroup=string] \\ [comment=string] [type={domain|local}] GROUPMAP LIST List existing group mapping entries. net groupmap list [verbose] [ntgroup=string] [sid=SID] MAXRID Prints out the highest RID currently in use on the local server (by the active 'passdb backend'). RPC INFO Print information about the domain of the remote server, such as domain name, domain sid and number of users and groups. [RPC|ADS] TESTJOIN Check whether participation in a domain is still valid. [RPC|ADS] CHANGETRUSTPW Force change of domain trust password. RPC TRUSTDOM RPC TRUSTDOM ADD DOMAIN Add a interdomain trust account for DOMAIN. This is in fact a Samba account named DOMAINwiththeaccountflag′I′(interdomaintrustaccount).Thisisrequiredforincomingtruststowork.ItmakesSambabeatrusteddomainoftheforeign(trusting)domain.UsersoftheSambadomainwillbemadeavailableintheforeigndomain.Ifthecommandisusedagainstlocalhostithasthesameeffectassmbpasswd−a−iDOMAIN.PleasenotethatbothcommandsexpectaappropriateUNIXaccount.RPCTRUSTDOMDELDOMAINRemoveinterdomaintrustaccountforDOMAIN.Ifitisusedagainstlocalhostithasthesameeffectassmbpasswd−xDOMAIN with the account flag 'I' (interdomain trust\r account). This is required for incoming trusts to work. It makes\r Samba be a trusted domain of the foreign (trusting) domain. Users of\r the Samba domain will be made available in the foreign domain. If the\r command is used against localhost it has the same effect as smbpasswd\r -a -i DOMAIN. Please note that both commands expect a appropriate\r UNIX account.\r \r RPC TRUSTDOM DEL DOMAIN\r Remove interdomain trust account for DOMAIN. If it is used against\r localhost it has the same effect as smbpasswd -x DOMAINwiththeaccountflag′I′(interdomaintrustaccount).Thisisrequiredforincomingtruststowork.ItmakesSambabeatrusteddomainoftheforeign(trusting)domain.UsersoftheSambadomainwillbemadeavailableintheforeigndomain.Ifthecommandisusedagainstlocalhostithasthesameeffectassmbpasswd−a−iDOMAIN.PleasenotethatbothcommandsexpectaappropriateUNIXaccount.RPCTRUSTDOMDELDOMAINRemoveinterdomaintrustaccountforDOMAIN.Ifitisusedagainstlocalhostithasthesameeffectassmbpasswd−xDOMAIN. RPC TRUSTDOM ESTABLISH DOMAIN Establish a trust relationship to a trusted domain. Interdomain account must already be created on the remote PDC. This is required for outgoing trusts to work. It makes Samba be a trusting domain of a foreign (trusted) domain. Users of the foreign domain will be made available in our domain. You'll need winbind and a working idmap config to make them appear in your system. RPC TRUSTDOM REVOKE DOMAIN Abandon relationship to trusted domain RPC TRUSTDOM LIST List all interdomain trust relationships. RPC TRUST RPC TRUST CREATE Create a trust object by calling lsaCreateTrustedDomainEx2. The can be done on a single server or on two servers at once with the possibility to use a random trust password. Options: otherserver Domain controller of the second domain otheruser Admin user in the second domain otherdomainsid SID of the second domain other_netbios_domain NetBIOS (short) name of the second domain otherdomain DNS (full) name of the second domain trustpw Trust password Examples: Create a trust object on srv1.dom1.dom for the domain dom2 net rpc trust create \\ otherdomainsid=S-x-x-xx-xxxxxxxxxx-xxxxxxxxxx-xxxxxxxxx \\ other_netbios_domain=dom2 \\ otherdomain=dom2.dom \\ trustpw=12345678 \\ -S srv1.dom1.dom Create a trust relationship between dom1 and dom2 net rpc trust create \\ otherserver=srv2.dom2.test \\ otheruser=dom2adm \\ -S srv1.dom1.dom RPC TRUST DELETE Delete a trust object by calling lsaDeleteTrustedDomain. The can be done on a single server or on two servers at once. Options: otherserver Domain controller of the second domain otheruser Admin user in the second domain otherdomainsid SID of the second domain Examples: Delete a trust object on srv1.dom1.dom for the domain dom2 net rpc trust delete \\ otherdomainsid=S-x-x-xx-xxxxxxxxxx-xxxxxxxxxx-xxxxxxxxx \\ -S srv1.dom1.dom Delete a trust relationship between dom1 and dom2 net rpc trust delete \\ otherserver=srv2.dom2.test \\ otheruser=dom2adm \\ -S srv1.dom1.dom RPC RIGHTS This subcommand is used to view and manage Samba's rights assignments (also referred to as privileges). There are three options currently available: list, grant, and revoke. More details on Samba's privilege model and its use can be found in the Samba-HOWTO-Collection. RPC ABORTSHUTDOWN Abort the shutdown of a remote server. RPC SHUTDOWN [-t timeout] [-r] [-f] [-C message] Shut down the remote server. -r Reboot after shutdown. -f Force shutting down all applications. -t timeout Timeout before system will be shut down. An interactive user of the system can use this time to cancel the shutdown. -C message Display the specified message on the screen to announce the shutdown. RPC SAMDUMP Print out sam database of remote server. You need to run this against the PDC, from a Samba machine joined as a BDC. RPC VAMPIRE Export users, aliases and groups from remote server to local server. You need to run this against the PDC, from a Samba machine joined as a BDC. This vampire command cannot be used against an Active Directory, only against an NT4 Domain Controller. RPC VAMPIRE KEYTAB Dump remote SAM database to local Kerberos keytab file. RPC VAMPIRE LDIF Dump remote SAM database to local LDIF file or standard output. RPC GETSID Fetch domain SID and store it in the local secrets.tdb. ADS LEAVE Make the remote host leave the domain it is part of. ADS STATUS Print out status of machine account of the local machine in ADS. Prints out quite some debug info. Aimed at developers, regular users should use NET ADS TESTJOIN. ADS PRINTER ADS PRINTER INFO [PRINTER] [SERVER] Lookup info for PRINTER on SERVER. The printer name defaults to \"*\", the server name defaults to the local host. ADS PRINTER PUBLISH PRINTER Publish specified printer using ADS. ADS PRINTER REMOVE PRINTER Remove specified printer from ADS directory. ADS SEARCH EXPRESSION ATTRIBUTES... Perform a raw LDAP search on a ADS server and dump the results. The expression is a standard LDAP search expression, and the attributes are a list of LDAP fields to show in the results. Example: net ads search '(objectCategory=group)' sAMAccountName ADS DN DN (attributes) Perform a raw LDAP search on a ADS server and dump the results. The DN standard LDAP DN, and the attributes are a list of LDAP fields to show in the result. Example: net ads dn 'CN=administrator,CN=Users,DC=my,DC=domain' SAMAccountName ADS WORKGROUP Print out workgroup name for specified kerberos realm. ADS ENCTYPES List, modify or delete the value of the \"msDS-SupportedEncryptionTypes\" attribute of an account in AD. This attribute allows one to control which Kerberos encryption types are used for the generation of initial and service tickets. The value consists of an integer bitmask with the following values: 0x00000001 DES-CBC-CRC 0x00000002 DES-CBC-MD5 0x00000004 RC4-HMAC 0x00000008 AES128-CTS-HMAC-SHA1-96 0x00000010 AES256-CTS-HMAC-SHA1-96 ADS ENCTYPES LIST List the value of the \"msDS-SupportedEncryptionTypes\" attribute of a given account. Example: net ads enctypes list Computername ADS ENCTYPES SET [enctypes] Set the value of the \"msDS-SupportedEncryptionTypes\" attribute of the LDAP object of ACCOUNTNAME to a given value. If the value is omitted, the value is set to 31 which enables all the currently supported encryption types. Example: net ads enctypes set Computername 24 ADS ENCTYPES DELETE Deletes the \"msDS-SupportedEncryptionTypes\" attribute of the LDAP object of ACCOUNTNAME. Example: net ads enctypes set Computername 24 SAM CREATEBUILTINGROUP (Re)Create a BUILTIN group. Only a wellknown set of BUILTIN groups can be created with this command. This is the list of currently recognized group names: Administrators, Users, Guests, Power Users, Account Operators, Server Operators, Print Operators, Backup Operators, Replicator, RAS Servers, Pre-Windows 2000 compatible Access. This command requires a running Winbindd with idmap allocation properly configured. The group gid will be allocated out of the winbindd range. SAM CREATELOCALGROUP Create a LOCAL group (also known as Alias). This command requires a running Winbindd with idmap allocation properly configured. The group gid will be allocated out of the winbindd range. SAM DELETELOCALGROUP Delete an existing LOCAL group (also known as Alias). SAM MAPUNIXGROUP Map an existing Unix group and make it a Domain Group, the domain group will have the same name. SAM UNMAPUNIXGROUP Remove an existing group mapping entry. SAM ADDMEM Add a member to a Local group. The group can be specified only by name, the member can be specified by name or SID. SAM DELMEM Remove a member from a Local group. The group and the member must be specified by name. SAM LISTMEM List Local group members. The group must be specified by name. SAM LIST [verbose] List the specified set of accounts by name. If verbose is specified, the rid and description is also provided for each account. SAM RIGHTS LIST List all available privileges. SAM RIGHTS GRANT Grant one or more privileges to a user. SAM RIGHTS REVOKE Revoke one or more privileges from a user. SAM SHOW Show the full DOMAIN\\\\NAME the SID and the type for the corresponding account. SAM SET HOMEDIR Set the home directory for a user account. SAM SET PROFILEPATH Set the profile path for a user account. SAM SET COMMENT Set the comment for a user or group account. SAM SET FULLNAME Set the full name for a user account. SAM SET LOGONSCRIPT Set the logon script for a user account. SAM SET HOMEDRIVE Set the home drive for a user account. SAM SET WORKSTATIONS Set the workstations a user account is allowed to log in from. SAM SET DISABLE Set the \"disabled\" flag for a user account. SAM SET PWNOTREQ Set the \"password not required\" flag for a user account. SAM SET PWDMUSTCHANGENOW [yes|no] Set or unset the \"password must change\" flag for a user account. SAM POLICY LIST List the available account policies. SAM POLICY SHOW Show the account policy value. SAM POLICY SET Set a value for the account policy. Valid values can be: \"forever\", \"never\", \"off\", or a number. SAM PROVISION Only available if ldapsam:editposix is set and winbindd is running. Properly populates the ldap tree with the basic accounts (Administrator) and groups (Domain Users, Domain Admins, Domain Guests) on the ldap tree. IDMAP DUMP Dumps the mappings contained in the local tdb file specified. This command is useful to dump only the mappings produced by the idmap_tdb backend. IDMAP RESTORE [input file] Restore the mappings from the specified file or stdin. IDMAP SET SECRET Store a secret for the specified domain, used primarily for domains that use idmap_ldap as a backend. In this case the secret is used as the password for the user DN used to bind to the ldap server. IDMAP SET RANGE [index] [--db=] Store a domain-range mapping for a given domain (and index) in autorid database. IDMAP SET CONFIG [--db=] Update CONFIG entry in autorid database. IDMAP GET RANGE [index] [--db=] Get the range for a given domain and index from autorid database. IDMAP GET RANGES [] [--db=] Get ranges for all domains or for one identified by given SID. IDMAP GET CONFIG [--db=] Get CONFIG entry from autorid database. IDMAP DELETE MAPPING [-f] [--db=] Delete a mapping sid gid or sid uid from the IDMAP database. The mapping is given by which may either be a sid: S-x-..., a gid: \"GID number\" or a uid: \"UID number\". Use -f to delete an invalid partial mapping -> xx Use \"smbcontrol all idmap ...\" to notify running smbd instances. See the smbcontrol(1) manpage for details. IDMAP DELETE RANGE [-f] [--db=] |( []) Delete a domain range mapping identified by 'RANGE' or \"domain SID and INDEX\" from autorid database. Use -f to delete invalid mappings. IDMAP DELETE RANGES [-f] [--db=] Delete all domain range mappings for a domain identified by SID. Use -f to delete invalid mappings. IDMAP CHECK [-v] [-r] [-a] [-T] [-f] [-l] [--db=] Check and repair the IDMAP database. If no option is given a read only check of the database is done. Among others an interactive or automatic repair mode may be chosen with one of the following options: -r|--repair Interactive repair mode, ask a lot of questions. -a|--auto Noninteractive repair mode, use default answers. -v|--verbose Produce more output. -f|--force Try to apply changes, even if they do not apply cleanly. -T|--test Dry run, show what changes would be made but don't touch anything. -l|--lock Lock the database while doing the check. --db Check the specified database. It reports about the finding of the following errors: Missing reverse mapping: A record with mapping A->B where there is no B->A. Default action in repair mode is to \"fix\" this by adding the reverse mapping. Invalid mapping: A record with mapping A->B where B->C. Default action is to \"delete\" this record. Missing or invalid HWM: A high water mark is not at least equal to the largest ID in the database. Default action is to \"fix\" this by setting it to the largest ID found +1. Invalid record: Something we failed to parse. Default action is to \"edit\" it in interactive and \"delete\" it in automatic mode. USERSHARE Starting with version 3.0.23, a Samba server now supports the ability for non-root users to add user defined shares to be exported using the \"net usershare\" commands. To set this up, first set up your smb.conf by adding to the [global] section: usershare path = /usr/local/samba/lib/usershares Next create the directory /usr/local/samba/lib/usershares, change the owner to root and set the group owner to the UNIX group who should have the ability to create usershares, for example a group called \"serverops\". Set the permissions on /usr/local/samba/lib/usershares to 01770. (Owner and group all access, no access for others, plus the sticky bit, which means that a file in that directory can be renamed or deleted only by the owner of the file). Finally, tell smbd how many usershares you will allow by adding to the [global] section of smb.conf a line such as : usershare max shares = 100. To allow 100 usershare definitions. Now, members of the UNIX group \"serverops\" can create user defined shares on demand using the commands below. The usershare commands are: net usershare add sharename path [comment [acl] [guest_ok=[y|n]]] - to add or change a user defined share. net usershare delete sharename - to delete a user defined share. net usershare info [-l|--long] [wildcard sharename] - to print info about a user defined share. net usershare list [-l|--long] [wildcard sharename] - to list user defined shares. USERSHARE ADD sharename path [comment] [acl] [guest_ok=[y|n]] Add or replace a new user defined share, with name \"sharename\". \"path\" specifies the absolute pathname on the system to be exported. Restrictions may be put on this, see the global smb.conf parameters: \"usershare owner only\", \"usershare prefix allow list\", and \"usershare prefix deny list\". The optional \"comment\" parameter is the comment that will appear on the share when browsed to by a client. The optional \"acl\" field specifies which users have read and write access to the entire share. Note that guest connections are not allowed unless the smb.conf parameter \"usershare allow guests\" has been set. The definition of a user defined share acl is: \"user:permission\", where user is a valid username on the system and permission can be \"F\", \"R\", or \"D\". \"F\" stands for \"full permissions\", ie. read and write permissions. \"D\" stands for \"deny\" for a user, ie. prevent this user from accessing this share. \"R\" stands for \"read only\", ie. only allow read access to this share (no creation of new files or directories or writing to files). The default if no \"acl\" is given is \"Everyone:R\", which means any authenticated user has read-only access. The optional \"guest_ok\" has the same effect as the parameter of the same name in smb.conf, in that it allows guest access to this user defined share. This parameter is only allowed if the global parameter \"usershare allow guests\" has been set to true in the smb.conf. There is no separate command to modify an existing user defined share, just use the \"net usershare add [sharename]\" command using the same sharename as the one you wish to modify and specify the new options you wish. The Samba smbd daemon notices user defined share modifications at connect time so will see the change immediately, there is no need to restart smbd on adding, deleting or changing a user defined share. USERSHARE DELETE sharename Deletes the user defined share by name. The Samba smbd daemon immediately notices this change, although it will not disconnect any users currently connected to the deleted share. USERSHARE INFO [-l|--long] [wildcard sharename] Get info on user defined shares owned by the current user matching the given pattern, or all users. net usershare info on its own dumps out info on the user defined shares that were created by the current user, or restricts them to share names that match the given wildcard pattern ('*' matches one or more characters, '?' matches only one character). If the '-l' or '--long' option is also given, it prints out info on user defined shares created by other users. The information given about a share looks like: [foobar] path=/home/jeremy comment=testme usershare_acl=Everyone:F guest_ok=n And is a list of the current settings of the user defined share that can be modified by the \"net usershare add\" command. USERSHARE LIST [-l|--long] wildcard sharename List all the user defined shares owned by the current user matching the given pattern, or all users. net usershare list on its own list out the names of the user defined shares that were created by the current user, or restricts the list to share names that match the given wildcard pattern ('*' matches one or more characters, '?' matches only one character). If the '-l' or '--long' option is also given, it includes the names of user defined shares created by other users. [RPC] CONF Starting with version 3.2.0, a Samba server can be configured by data stored in registry. This configuration data can be edited with the new \"net conf\" commands. There is also the possibility to configure a remote Samba server by enabling the RPC conf mode and specifying the address of the remote server. The deployment of this configuration data can be activated in two levels from the smb.conf file: Share definitions from registry are activated by setting registry shares to “yes” in the [global] section and global configuration options are activated by setting include = registry in the [global] section for a mixed configuration or by setting config backend = registry in the [global] section for a registry-only configuration. See the smb.conf(5) manpage for details. The conf commands are: net [rpc] conf list - Dump the complete configuration in smb.conf like format. net [rpc] conf import - Import configuration from file in smb.conf format. net [rpc] conf listshares - List the registry shares. net [rpc] conf drop - Delete the complete configuration from registry. net [rpc] conf showshare - Show the definition of a registry share. net [rpc] conf addshare - Create a new registry share. net [rpc] conf delshare - Delete a registry share. net [rpc] conf setparm - Store a parameter. net [rpc] conf getparm - Retrieve the value of a parameter. net [rpc] conf delparm - Delete a parameter. net [rpc] conf getincludes - Show the includes of a share definition. net [rpc] conf setincludes - Set includes for a share. net [rpc] conf delincludes - Delete includes from a share definition. [RPC] CONF LIST Print the configuration data stored in the registry in a smb.conf-like format to standard output. [RPC] CONF IMPORT [--test|-T] filename [section] This command imports configuration from a file in smb.conf format. If a section encountered in the input file is present in registry, its contents is replaced. Sections of registry configuration that have no counterpart in the input file are not affected. If you want to delete these, you will have to use the \"net conf drop\" or \"net conf delshare\" commands. Optionally, a section may be specified to restrict the effect of the import command to that specific section. A test mode is enabled by specifying the parameter \"-T\" on the commandline. In test mode, no changes are made to the registry, and the resulting configuration is printed to standard output instead. [RPC] CONF LISTSHARES List the names of the shares defined in registry. [RPC] CONF DROP Delete the complete configuration data from registry. [RPC] CONF SHOWSHARE sharename Show the definition of the share or section specified. It is valid to specify \"global\" as sharename to retrieve the global configuration options from registry. [RPC] CONF GETINCLUDES section Get the list of includes for the provided section (global or share). Note that due to the nature of the registry database and the nature of include directives, the includes need special treatment: Parameters are stored in registry by the parameter name as valuename, so there is only ever one instance of a parameter per share. Also, a specific order like in a text file is not guaranteed. For all real parameters, this is perfectly ok, but the include directive is rather a meta parameter, for which, in the smb.conf text file, the place where it is specified between the other parameters is very important. This can not be achieved by the simple registry smbconf data model, so there is one ordered list of includes per share, and this list is evaluated after all the parameters of the share. Further note that currently, only files can be included from registry configuration. In the future, there will be the ability to include configuration data from other registry keys. [RPC] CONF SETINCLUDES section [filename]+ Set the list of includes for the provided section (global or share) to the given list of one or more filenames. The filenames may contain the usual smb.conf macros like %I. [RPC] CONF DELINCLUDES section Delete the list of includes from the provided section (global or share). REGISTRY Manipulate Samba's registry. The registry commands are: net registry enumerate - Enumerate registry keys and values. net registry enumerate_recursive - Enumerate registry key and its subkeys. net registry createkey - Create a new registry key. net registry deletekey - Delete a registry key. net registry deletekey_recursive - Delete a registry key with subkeys. net registry getvalue - Print a registry value. net registry getvalueraw - Print a registry value (raw format). net registry setvalue - Set a new registry value. net registry increment - Increment a DWORD registry value under a lock. net registry deletevalue - Delete a registry value. net registry getsd - Get security descriptor. net registry getsd_sdd1 - Get security descriptor in sddl format. net registry setsd_sdd1 - Set security descriptor from sddl format string. net registry import - Import a registration entries (.reg) file. net registry export - Export a registration entries (.reg) file. net registry convert - Convert a registration entries (.reg) file. net registry check - Check and repair a registry database. REGISTRY ENUMERATE key Enumerate subkeys and values of key. REGISTRY ENUMERATE_RECURSIVE key Enumerate values of key and its subkeys. REGISTRY CREATEKEY key Create a new key if not yet existing. REGISTRY DELETEKEY key Delete the given key and its values from the registry, if it has no subkeys. REGISTRY DELETEKEY_RECURSIVE key Delete the given key and all of its subkeys and values from the registry. REGISTRY GETVALUE key name Output type and actual value of the value name of the given key. REGISTRY GETVALUERAW key name Output the actual value of the value name of the given key. REGISTRY SETVALUE key name type value ... Set the value name of an existing key. type may be one of sz, multi_sz or dword. In case of multi_sz value may be given multiple times. REGISTRY INCREMENT key name [inc] Increment the DWORD value name of key by inc while holding a g_lock. inc defaults to 1. REGISTRY DELETEVALUE key name Delete the value name of the given key. REGISTRY GETSD key Get the security descriptor of the given key. REGISTRY GETSD_SDDL key Get the security descriptor of the given key as a Security Descriptor Definition Language (SDDL) string. REGISTRY SETSD_SDDL keysd Set the security descriptor of the given key from a Security Descriptor Definition Language (SDDL) string sd. REGISTRY IMPORT file [--precheck ] [opt] Import a registration entries (.reg) file. The following options are available: --precheck check-file This is a mechanism to check the existence or non-existence of certain keys or values specified in a precheck file before applying the import file. The import file will only be applied if the precheck succeeds. The check-file follows the normal registry file syntax with the following semantics: · = checks whether the value exists and has the given value. · =- checks whether the value does not exist. · [key] checks whether the key exists. · [-key] checks whether the key does not exist. REGISTRY EXPORT keyfile[opt] Export a key to a registration entries (.reg) file. REGISTRY CONVERT in out [[inopt] outopt] Convert a registration entries (.reg) file in. REGISTRY CHECK [-ravTl] [-o ] [--wipe] [] Check and repair the registry database. If no option is given a read only check of the database is done. Among others an interactive or automatic repair mode may be chosen with one of the following options -r|--repair Interactive repair mode, ask a lot of questions. -a|--auto Noninteractive repair mode, use default answers. -v|--verbose Produce more output. -T|--test Dry run, show what changes would be made but don't touch anything. -l|--lock Lock the database while doing the check. --reg-version={1,2,3} Specify the format of the registry database. If not given it defaults to the value of the binary or, if an registry.tdb is explizitly stated at the commandline, to the value found in the INFO/version record. [--db] Check the specified database. -o|--output Create a new registry database instead of modifying the input. If is already existing --wipe may be used to overwrite it. --wipe Replace the registry database instead of modifying the input or overwrite an existing output database. EVENTLOG Starting with version 3.4.0 net can read, dump, import and export native win32 eventlog files (usually *.evt). evt files are used by the native Windows eventviewer tools. The import and export of evt files can only succeed when eventlog list is used in smb.conf file. See the smb.conf(5) manpage for details. The eventlog commands are: net eventlog dump - Dump a eventlog *.evt file on the screen. net eventlog import - Import a eventlog *.evt into the samba internal tdb based representation of eventlogs. net eventlog export - Export the samba internal tdb based representation of eventlogs into an eventlog *.evt file. EVENTLOG DUMP filename Prints a eventlog *.evt file to standard output. EVENTLOG IMPORT filename eventlog Imports a eventlog *.evt file defined by filename into the samba internal tdb representation of eventlog defined by eventlog. eventlog needs to part of the eventlog list defined in smb.conf. See the smb.conf(5) manpage for details. EVENTLOG EXPORT filename eventlog Exports the samba internal tdb representation of eventlog defined by eventlog to a eventlog *.evt file defined by filename. eventlog needs to part of the eventlog list defined in smb.conf. See the smb.conf(5) manpage for details. DOM Starting with version 3.2.0 Samba has support for remote join and unjoin APIs, both client and server-side. Windows supports remote join capabilities since Windows 2000. In order for Samba to be joined or unjoined remotely an account must be used that is either member of the Domain Admins group, a member of the local Administrators group or a user that is granted the SeMachineAccountPrivilege privilege. The client side support for remote join is implemented in the net dom commands which are: net dom join - Join a remote computer into a domain. net dom unjoin - Unjoin a remote computer from a domain. net dom renamecomputer - Renames a remote computer joined to a domain. DOM JOIN domain=DOMAIN ou=OU account=ACCOUNT password=PASSWORD reboot Joins a computer into a domain. This command supports the following additional parameters: · DOMAIN can be a NetBIOS domain name (also known as short domain name) or a DNS domain name for Active Directory Domains. As in Windows, it is also possible to control which Domain Controller to use. This can be achieved by appending the DC name using the \\ separator character. Example: MYDOM\\MYDC. The DOMAIN parameter cannot be NULL. · OU can be set to a RFC 1779 LDAP DN, like ou=mymachines,cn=Users,dc=example,dc=com in order to create the machine account in a non-default LDAP container. This optional parameter is only supported when joining Active Directory Domains. · ACCOUNT defines a domain account that will be used to join the machine to the domain. This domain account needs to have sufficient privileges to join machines. · PASSWORD defines the password for the domain account defined with ACCOUNT. · REBOOT is an optional parameter that can be set to reboot the remote machine after successful join to the domain. Note that you also need to use standard net parameters to connect and authenticate to the remote machine that you want to join. These additional parameters include: -S computer and -U user. Example: net dom join -S xp -U XP\\\\administrator%secret domain=MYDOM account=MYDOM\\\\administrator password=topsecret reboot. This example would connect to a computer named XP as the local administrator using password secret, and join the computer into a domain called MYDOM using the MYDOM domain administrator account and password topsecret. After successful join, the computer would reboot. DOM UNJOIN account=ACCOUNT password=PASSWORD reboot Unjoins a computer from a domain. This command supports the following additional parameters: · ACCOUNT defines a domain account that will be used to unjoin the machine from the domain. This domain account needs to have sufficient privileges to unjoin machines. · PASSWORD defines the password for the domain account defined with ACCOUNT. · REBOOT is an optional parameter that can be set to reboot the remote machine after successful unjoin from the domain. Note that you also need to use standard net parameters to connect and authenticate to the remote machine that you want to unjoin. These additional parameters include: -S computer and -U user. Example: net dom unjoin -S xp -U XP\\\\administrator%secret account=MYDOM\\\\administrator password=topsecret reboot. This example would connect to a computer named XP as the local administrator using password secret, and unjoin the computer from the domain using the MYDOM domain administrator account and password topsecret. After successful unjoin, the computer would reboot. DOM RENAMECOMPUTER newname=NEWNAME account=ACCOUNT password=PASSWORD reboot Renames a computer that is joined to a domain. This command supports the following additional parameters: · NEWNAME defines the new name of the machine in the domain. · ACCOUNT defines a domain account that will be used to rename the machine in the domain. This domain account needs to have sufficient privileges to rename machines. · PASSWORD defines the password for the domain account defined with ACCOUNT. · REBOOT is an optional parameter that can be set to reboot the remote machine after successful rename in the domain. Note that you also need to use standard net parameters to connect and authenticate to the remote machine that you want to rename in the domain. These additional parameters include: -S computer and -U user. Example: net dom renamecomputer -S xp -U XP\\\\administrator%secret newname=XPNEW account=MYDOM\\\\administrator password=topsecret reboot. This example would connect to a computer named XP as the local administrator using password secret, and rename the joined computer to XPNEW using the MYDOM domain administrator account and password topsecret. After successful rename, the computer would reboot. G_LOCK Manage global locks. G_LOCK DO lockname timeout command Execute a shell command under a global lock. This might be useful to define the order in which several shell commands will be executed. The locking information is stored in a file called g_lock.tdb. In setups with CTDB running, the locking information will be available on all cluster nodes. · LOCKNAME defines the name of the global lock. · TIMEOUT defines the timeout. · COMMAND defines the shell command to execute. G_LOCK LOCKS Print a list of all currently existing locknames. G_LOCK DUMP lockname Dump the locking table of a certain global lock. HELP [COMMAND] Gives usage information for the specified command. VERSION This man page is complete for version 3 of the Samba suite. AUTHOR The original Samba software and related utilities were created by Andrew Tridgell. Samba is now developed by the Samba Team as an Open Source project similar to the way the Linux kernel is developed. The net manpage was written by Jelmer Vernooij. Samba 4.5 11/22/2018 NET(8) C:\\Users\\2017>net config 控制下列正在运行的服务: Server Workstation 命令成功完成。 C:\\Users\\2017> 其他操作系统中的类似命令 Novell NetWare 映射用于映射卷)（网络驱动器）来驱动的信 捕获以将打印队列捕获到LPT端口 另请参阅 DOS命令列表 微软网络 参考 https://en.wikipedia.org/wiki/Net_(command) https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/hh875576(v%3dws.11) "},"page/1090.html":{"url":"page/1090.html","title":"netstat","keywords":"","body":"netstat(linux/win) 一、功能 该实用程序显示当前网络的活动连接。 二、格式 netstat 操作系统 Unix和类Unix系统、IBM OS/2、Microsoft Windows、ReactOS netstat是一个基于命令行界面的网络实用工具，可显示当前的网络状态，包括传输控制协议层的连线状况、路由表、网络接口状态和网络协议的统计信息等。[1]netstat命令适用于类Unix系统（如macOS、Linux、Solaris和BSD）、IBM OS/2和Windows NT操作系统家族（如Windows XP、Windows Vista、Windows 7、Windows 8和Windows 10）。[2][3] netstat可用于查找网络中的问题，并可通过计算网络流量来度量网络性能。[4][5]尽管该工具仍然被包含在许多Linux发行版中，但基本都被看作过时、应被替代的工具。[6][7][8][9] 在Linux上，推荐使用ss替代netstat，使用ip route替代netstat -r，使用ip -s link替代netstat -i，使用ip maddr替代netstat -g。[10][11][12][13] 命令参数 命令netstat的参数)必须以连字符（-）而非斜杠（/）为前缀。并非所有平台都支持某些参数。[1] 参数 描述 Windows[2][14] ReactOS[15] macOS[16][17][18] BSD[19] NetBSD[20][21] FreeBSD[22] Linux[3][7][8] Solaris[23] OS/2[24][25] -a 显示所有活动中的网络连接和电脑正在监听的TCP/UDP端口。 是 是 是 -b 显示每个应用程序所使用的网络连接和监听端口 。（仅适用于Windows XP、Windows Server 2003或更高版本的Microsoft Windows操作系统，Windows 2000或更早版本不可用。） 是 否 否 -b 同-i，但计算网络流量的总字节数。 否 是 是 否 -e 显示以太网统计信息，例如发送和接收的字节数及数据包数。此参数可以与-s组合使用。 是 是 否 -f 显示外部地址的完整网域名称。（仅适用于Windows Vista和更高版本的Microsoft Windows操作系统。） 是 否 否 -f 限定显示使用特定套接字（unix、inet、inet6）的地址族。 否 是 否 -g 显示多播组信息。（可能仅适用于较新的操作系统。） 否 否 是 -i 显示网络接口及统计信息。 否 否 是 -m 显示随机存取存储器统计信息。 否 否 -n 显示活动中的TCP连接，但主机地址和端口号以数字形式表示，不会尝试确定实际主机名。 是 是 是 -o 显示活动中的TCP连接，并包含每个连接的进程ID（PID）。根据PID，可在Windows任务管理器)的“进程”选项卡中找到该应用程序。此参数可以与-a、-n和-p组合使用。如果安装了Windows修补程序，则此参数在Windows XP、Windows Server 2003和Windows 2000上可用。 是 否 否 -p 显示使用指定网络协议的连接。协议可以是TCP、UDP、TCPv6或UDPv6。如果此参数与-s组合使用，则协议可以是TCP、UDP、ICMP、IP、TCPv6、UDPv6、ICMPv6或IPv6。 是 是 是 -p 显示哪些进程正在使用哪些网络接口，类似于Microsoft Windows下的-b。（需要root权限才能执行此操作。） 否 否 是 -P 显示使用指定网络协议的连接。协议可以是IP、IPv6、ICMP、ICMPv6、IGMP、UDP、TCP或RawIP。 否 否 是 -r 显示路由表内容，与Microsoft Windows下route print命令相同。 是 是 是 是 -s 按网络协议显示统计信息。默认情况下，显示TCP、UDP、ICMP和IP协议的统计信息。如果Windows XP安装了IPv6协议，亦可以显示TCPv6、UDPv6、ICMPv6和IPv6协议的统计信息。-p参数可用于指定一组协议。 是 是 是 -t 仅显示TCP连接。 否 是 是 -u 仅显示UDP连接。 否 否 是 是 -W 显示完整主机名或IPv6地址。 否 否 是 否 -v 与-b组合使用时，将显示所有应用程序使用的网络连接和监听端口所涉及的组件列表。 是 否 否 -h 显示该命令的提示。 否 否 是 是 是 是 是 是 否 -? 显示该命令的提示。 否 否 否 否 否 否 否 否 是 /? 显示该命令的提示。 是 是 否 否 否 否 否 否 否 统计信息 Proto：网络协议，包括传输控制协议（TCP）和用户数据报协议（UDP）。[26] Local Address：本地计算机的IP地址和正在使用的端口号。除非使用-n参数，否则将显示与IP地址和端口对应的主机名称。如果主机正在侦听所有端口，则主机名显示为星号（*）。如果端口尚未创建，则端口号显示为星号。[27] Foreign Address：远程计算机的IP地址和正在使用的端口号。除非指定了-n参数，否则将显示与IP地址和端口对应的主机名称。如果端口尚未创建，则端口号显示为星号（*）。[28] State：TCP连接的状态，可能的状态包括CLOSE_WAIT、CLOSED、ESTABLISHED、FIN_WAIT_1、FIN_WAIT_2、LAST_ACK、LISTEN、SYN_RECEIVED、SYN_SEND和TIME_WAIT。[29] 命令范例 要仅显示TCP或UDP协议的统计信息，请键入以下命令之一[30]： netstat -sp tcp netstat -sp udp 类Unix系统[1][3][9][31][32]： netstat -aop | grep \"pid\" sudo netstat -nutpacw Microsoft Windows[14]： netstat -o 5 netstat -no 命令 linux-deepin15.11 NETSTAT(8) Linux Programmer's Manual NETSTAT(8) NAME netstat - 显示网络连接，路由表，接口状态，伪装连接，网络链路信息和组播成员组。 总览 SYNOPSIS netstat [address_family_options] [--tcp|-t] [--udp|-u] [--raw|-w] [--listening|-l] [--all|-a] [--numeric|-n] [--numeric-hosts][--numeric-ports][--numeric-ports] [--symbolic|-N] [--extend|-e[--extend|-e]] [--timers|-o] [--program|-p] [--verbose|-v] [--continuous|-c] [delay] netstat {--route|-r} [address_family_options] [--extend|-e[--extend|-e]] [--verbose|-v] [--numeric|-n] [--numeric-hosts][--numeric-ports][--numeric-ports] [--continuous|-c] [delay] netstat {--interfaces|-i} [iface] [--all|-a] [--extend|-e[--extend|-e]] [--verbose|-v] [--program|-p] [--numeric|-n] [--numeric-hosts][--numeric- ports][--numeric-ports] [--continuous|-c] [delay] netstat {--groups|-g} [--numeric|-n] [--numeric-hosts][--numeric-ports][--numeric- ports] [--continuous|-c] [delay] netstat {--masquerade|-M} [--extend|-e] [--numeric|-n] [--numeric-hosts][--numeric- ports][--numeric-ports] [--continuous|-c] [delay] netstat {--statistics|-s} [--tcp|-t] [--udp|-u] [--raw|-w] [delay] netstat {--version|-V} netstat {--help|-h} address_family_options: [--protocol={inet,unix,ipx,ax25,netrom,ddp}[,...]] [--unix|-x] [--inet|--ip] [--ax25] [--ipx] [--netrom] [--ddp] 描述 DESCRIPTION Netstat 程序显示Linux网络子系统的信息。 输出信息的类型是由第一个参数控制的，就像这 样： (none) 无选项时, netstat 显示打开的套接字. 如果不指定任何地址族，那么打印出所有已配置地址 族的有效套接字。 --route , -r 显示内核路由表。 --groups , -g 显示IPv4 和 IPv6的IGMP组播组成员关系信息。 --interface=iface , -i 显示所有网络接口列表或者是指定的 iface 。 --masquerade , -M 显示一份所有经伪装的会话列表。 --statistics , -s 显示每种协议的统计信息。 选项 OPTIONS --verbose , -v 详细模式运行。特别是打印一些关于未配置地址族的有用信息。 --numeric , -n 显示数字形式地址而不是去解析主机、端口或用户名。 --numeric-hosts 显示数字形式的主机但是不影响端口或用户名的解析。 --numeric-ports 显示数字端口号，但是不影响主机或用户名的解析。 --numeric-users 显示数字的用户ID，但是不影响主机和端口名的解析。 --protocol=family , -A 指定要显示哪些连接的地址族(也许在底层协议中可以更好地描述)。 family 以逗号分隔的地 址族列表，比如 inet, unix, ipx, ax25, netrom, 和 ddp。 这样和使用 --inet, --unix (-x), --ipx, --ax25, --netrom, 和 --ddp 选项效果相同。 地址族 inet 包括raw, udp 和tcp 协议套接字。 -c, --continuous 将使 netstat 不断地每秒输出所选的信息。 -e, --extend 显示附加信息。使用这个选项两次来获得所有细节。 -o, --timers 包含与网络定时器有关的信息。 -p, --program 显示套接字所属进程的PID和名称。 -l, --listening 只显示正在侦听的套接字(这是默认的选项) -a, --all 显示所有正在或不在侦听的套接字。加上 --interfaces 选项将显示没有标记的接口。 -F 显示FIB中的路由信息。(这是默认的选项) -C 显示路由缓冲中的路由信息。 delay netstat将循环输出统计信息，每隔 delay 秒。 输出 OUTPUT 活动的Internet网络连接 (TCP, UDP, raw) Proto 套接字使用的协议。 Recv-Q 连接此套接字的用户程序未拷贝的字节数。 Send-Q 远程主机未确认的字节数。 Local Address 套接字的本地地址(本地主机名)和端口号。除非给定-n --numeric (-n) 选项，否则套接字地 址按标准主机名(FQDN)进行解析，而端口号则转换到相应的服务名。 Foreign Address 套接字的远程地址(远程主机名)和端口号。 Analogous to \"Local Address.\" State 套接字的状态。因为在RAW协议中没有状态，而且UDP也不用状态信息，所以此行留空。通常它 为以下几个值之一： ESTABLISHED 套接字有一个有效连接。 SYN_SENT 套接字尝试建立一个连接。 SYN_RECV 从网络上收到一个连接请求。 FIN_WAIT1 套接字已关闭，连接正在断开。 FIN_WAIT2 连接已关闭，套接字等待远程方中止。 TIME_WAIT 在关闭之后，套接字等待处理仍然在网络中的分组 CLOSED 套接字未用。 CLOSE_WAIT 远程方已关闭，等待套接字关闭。 LAST_ACK 远程方中止，套接字已关闭。等待确认。 LISTEN 套接字监听进来的连接。如果不设置 --listening (-l) 或者 --all (-a) 选项，将不 显示出来这些连接。 CLOSING 套接字都已关闭，而还未把所有数据发出。 UNKNOWN 套接字状态未知。 User 套接字属主的名称或UID。 PID/Program name 以斜线分隔的处理套接字程序的PID及进程名。 --program 使此栏目被显示。你需要 superuser 权限来查看不是你拥有的套接字的信息。对IPX套接字还无法获得此信息。 Timer (this needs to be written) 活动的UNIX域套接字 Proto 套接字所用的协议(通常是unix)。 RefCnt 使用数量(也就是通过此套接字连接的进程数)。 Flags 显示的标志为SO_ACCEPTON(显示为 ACC), SO_WAITDATA (W) 或 SO_NOSPACE (N)。 如果相应的 进程等待一个连接请求，那么SO_ACCECPTON用于未连接的套接字。其它标志通常并不重要 Type 套接字使用的一些类型： SOCK_DGRAM 此套接字用于数据报(无连接)模式。 SOCK_STREAM 流模式(连接)套接字 SOCK_RAW 此套接字用于RAW模式。 SOCK_RDM 一种服务可靠性传递信息。 SOCK_SEQPACKET 连续分组套接字。 SOCK_PACKET RAW接口使用套接字。 UNKNOWN 将来谁知道它的话将告诉我们，就填在这里 :-) State 此字段包含以下关键字之一： FREE 套接字未分配。 LISTENING 套接字正在监听一个连接请求。除非设置 --listening (-l) 或者 --all (-a) 选 项，否则不显示。 CONNECTING 套接字正要建立连接。 CONNECTED 套接字已连接。 DISCONNECTING 套接字已断开。 (empty) 套接字未连。 UNKNOWN ！不应当出现这种状态的。 PID/Program name 处理此套接字的程序进程名和PID。上面关于活动的Internet连接的部分有更详细的信息。 Path 当相应进程连入套接字时显示路径名。 活动的IPX套接字 (this needs to be done by somebody who knows it) Active NET/ROM sockets (this needs to be done by somebody who knows it) Active AX.25 sockets (this needs to be done by somebody who knows it) 注意 NOTES 从linux 2.2内核开始 netstat -i 不再显示别名接口的统计信息。要获得每个别名接口的计数 器，则需要用 ipchains(8) 命令。 文件 FILES /etc/services -- 服务解释文件 /proc -- proc文件系统的挂载点。proc文件系统通过下列文件给出了内核状态信息。 /proc/net/dev -- 设备信息 /proc/net/raw -- RAW套接字信息 /proc/net/tcp -- TCP套接字信息 /proc/net/udp -- UDP套接字信息 /proc/net/igmp -- IGMP组播信息 /proc/net/unix -- Unix域套接字信息 /proc/net/ipx -- IPX套接字信息 /proc/net/ax25 -- AX25套接字信息 /proc/net/appletalk -- DDP(appletalk)套接字信息 /proc/net/nr -- NET/ROM套接字信息 /proc/net/route -- IP路由信息 /proc/net/ax25_route -- AX25路由信息 /proc/net/ipx_route -- IPX路由信息 /proc/net/nr_nodes -- NET/ROM节点列表 /proc/net/nr_neigh -- NET/ROM邻站 /proc/net/ip_masquerade -- 伪装连接 /proc/net/snmp -- 统计 参见 SEE ALSO route(8), ifconfig(8), ipchains(8), iptables(8), proc(5) BUGS 有时如果一个套接字在查看中发生了改变，会显示一些奇怪的信息。 一般不会发生这种情况。 作者 AUTHORS netstat 程序是 Fred Baumgarten 的作品。 手册页是Matt Welsh 写的。 Alan Cox 做了一些更新，但是还需要做更多工作。 Tuan Hoang 又做了一些更新。 Bernd Eckenfels 彻底重写了手册页和net-tools工具包中的命令。 [中文版维护人] meaculpa [中文版最新更新] 2000/12/08 《中国linux论坛man手册页翻译计划》: http://cmpp.linuxforum.net 跋 本页面中文版由中文 man 手册页计划提供。 中文 man 手册页计划：https://github.com/man-pages-zh/manpages-zh net-tools 19 December 2000 NETSTAT(8) win7x64 netstat /? 显示协议统计和当前 TCP/IP 网络连接。 NETSTAT [-a] [-b] [-e] [-f] [-n] [-o] [-p proto] [-r] [-s] [-t] [interval] -a 显示所有连接和侦听端口。 -b 显示在创建每个连接或侦听端口时涉及的可执行程序。 在某些情况下，已知可执行程序承载多个独立的 组件，这些情况下，显示创建连接或侦听端口时涉 及的组件序列。此情况下，可执行程序的名称 位于底部[]中，它调用的组件位于顶部，直至达 到 TCP/IP。注意，此选项可能很耗时，并且在您没有 足够权限时可能失败。 -e 显示以太网统计。此选项可以与 -s 选项结合使用。 -f 显示外部地址的完全限定域名(FQDN)。 -n 以数字形式显示地址和端口号。 -o 显示拥有的与每个连接关联的进程 ID。 -p proto 显示 proto 指定的协议的连接；proto 可以是下列任 何一个: TCP、UDP、TCPv6 或 UDPv6。如果与 -s 选 项一起用来显示每个协议的统计，proto 可以是下列任 何一个: IP、IPv6、ICMP、ICMPv6、TCP、TCPv6、UDP 或 UDPv6。 -r 显示路由表。 -s 显示每个协议的统计。默认情况下，显示 IP、IPv6、ICMP、ICMPv6、TCP、TCPv6、UDP 和 UDPv6 的统计；-p 选项可用于指定默认的子网。 -t 显示当前连接卸载状态。 interval 重新显示选定的统计，各个显示间暂停的间隔秒数。 按 CTRL+C 停止重新显示统计。如果省略，则 netstat 将打印当前的配置信息一次。 zander@zander-PC:~/Desktop$ netstat Active Internet connections (w/o servers) Proto Recv-Q Send-Q Local Address Foreign Address State tcp 1 0 zander-PC.lan:37370 tl-in-f188.1e100.n:5228 CLOSE_WAIT tcp 1 0 10.0.138.7:54389 210.22.245.XXX:http CLOSE_WAIT tcp 0 0 zander-PC.lan:56272 91.108.56.XXX:http TIME_WAIT tcp 1 0 zander-PC.lan:49763 223.166.151.XXX:http CLOSE_WAIT tcp 0 0 zander-PC.lan:37368 tl-in-f188.1e100.n:5228 ESTABLISHED tcp 1 0 zander-PC.lan:46351 223.166.151.XXX:http CLOSE_WAIT tcp 1 0 10.0.137.87:39785 223.166.151.XXX:http CLOSE_WAIT tcp 1 0 10.0.138.7:42099 223.167.87.XXX:http CLOSE_WAIT tcp 0 0 zander-PC.lan:58028 91.108.56.XXX:https ESTABLISHED tcp 1 0 zander-PC.lan:33347 180.97.117.XXX:http CLOSE_WAIT tcp 1 0 10.0.137.87:39795 223.166.151.XXX:http CLOSE_WAIT tcp 0 0 zander-PC.lan:40666 91.108.56.XXX:http TIME_WAIT tcp 0 0 zander-PC.lan:56292 91.108.56.XXX:http TIME_WAIT tcp 0 0 zander-PC.lan:47064 47.103.46.XXX:https ESTABLISHED tcp 0 0 zander-PC.lan:37918 138.197.56.XXX:https ESTABLISHED tcp 0 0 zander-PC.lan:48051 116.128.163.XXX:http TIME_WAIT tcp 0 0 zander-PC.lan:58960 47.111.15.XXX:https ESTABLISHED tcp 1 0 10.0.138.7:60505 223.166.151.XXX:http CLOSE_WAIT tcp 1 0 zander-PC.lan:43541 223.167.87.XXX:http CLOSE_WAIT tcp 1 0 zander-PC.lan:38405 210.22.245.XXX:http CLOSE_WAIT tcp 1 0 zander-PC.lan:40996 120.92.84.XXX:9002 CLOSE_WAIT tcp6 0 0 zander-PC.lan:44610 58.215.175.XXX:http ESTABLISHED Active UNIX domain sockets (w/o servers) Proto RefCnt Flags Type State I-Node Path unix 2 [ ] DGRAM 41275 /run/user/1000/systemd/notify unix 3 [ ] DGRAM 18980 /run/systemd/notify unix 2 [ ] DGRAM 18981 /run/systemd/cgroups-agent unix 2 [ ] DGRAM 30497 /var/lib/samba/private/msg.sock/3630 unix 2 [ ] DGRAM 36091 /var/lib/samba/private/msg.sock/3801 unix 2 [ ] DGRAM 36896 /var/lib/samba/private/msg.sock/3802 unix 74 [ ] DGRAM 18991 /run/systemd/journal/dev-log C:\\Users\\2017>netstat 活动连接 协议 本地地址 外部地址 状态 TCP 127.0.0.1:5939 ZS301-1:49167 ESTABLISHED TCP 127.0.0.1:49167 ZS301-1:5939 ESTABLISHED TCP 172.16.0.77:49166 RS-BEG-ANX-R004:5938 ESTABLISHED TCP 172.16.0.77:49263 180.163.235.XXX:http ESTABLISHED TCP 172.16.0.77:49337 172.16.63.11:ms-sql-s ESTABLISHED TCP 172.16.0.77:49375 123.125.82.XXX:http CLOSE_WAIT TCP 172.16.0.77:49862 hn:http ESTABLISHED TCP 172.16.0.77:50918 180.163.198.XXX:https TIME_WAIT TCP 172.16.0.77:50919 tsa01s07-in-f14:https SYN_SENT TCP 172.16.0.77:50920 tsa01s07-in-f14:https SYN_SENT TCP 172.16.0.77:50921 33:https TIME_WAIT TCP 172.16.0.77:50924 58.222.53.XXX:https TIME_WAIT TCP 172.16.0.77:50925 58.222.53.XXX:https TIME_WAIT TCP 172.16.0.77:50926 33:https TIME_WAIT TCP 172.16.0.77:50927 58.222.53.XXX:https TIME_WAIT TCP 172.16.0.77:50928 58.222.53.XXX:https TIME_WAIT TCP 172.16.0.77:50929 33:https TIME_WAIT TCP 172.16.0.77:50937 117.18.237.XXX:http ESTABLISHED TCP 172.16.0.77:50938 172.16.12.XXX:9100 SYN_SENT TCP 172.16.0.77:50939 185.199.108.XXX:https ESTABLISHED TCP 172.16.0.77:50942 185.199.108.XXX:https ESTABLISHED TCP 172.16.0.77:50947 185.199.110.XXX:https ESTABLISHED TCP 172.16.0.77:50953 tsa01s07-in-f14:https SYN_SENT TCP 172.16.0.77:50954 203.208.40.XXX:https ESTABLISHED TCP 172.16.0.77:50955 203.208.50.XXX:https ESTABLISHED TCP 172.16.0.77:50956 ec2-34-193-127-114:https ESTABLISHED TCP 172.16.0.77:50958 ec2-34-193-127-114:https ESTABLISHED C:\\Users\\2017> 应用（类UNIX系统） 命令 说明[4][9] netstat -a 显示所有端口（无论被监听或不被监听）、所有网络协议的连接。 netstat -at 仅显示TCP连接。 netstat -au 仅显示UDP连接。 netstat -ant 显示所有TCP连接，但不进行域名解析（即显示IP地址而不显示主机名）。 netstat -al 显示所有被监听的端口。 sudo netstat -aep 同时显示每个端口相关的进程和进程ID（需要root权限以运行此命令）。 netstat -s > wiki.txt 输出当前计算机网络统计信息到文本文件wiki.txt。 netstat -r 显示路由表。与route -e的输出结果相同。 netstat -i 显示所有网络接口。netstat -i -e与ipconfig的输出结果类似。 netstat -ct 显示TCP连接（持续更新）。 netstat -g 显示多播组信息。 netstat -lntu 显示所有监听端口的守护进程和本地计算机上所有空闲的开放端口。 `netstat -atnp grep ESTA` 显示所有状态为ESTABLISHED的TCP连接。 通配符 在netstat命令的输出结果中，星号（*）为通配符，表示“所有”。[33][34] 例如： ....Local Address Foreign Address State ... *:smtp *:* LISTEN 在输出结果中，*:smtp表示该进程正在本地计算机的所有网络接口上监听所有映射为SMTP的端口，此处的星号有时会被0.0.0.0代替，意义不改变。*:*中的第一个星号表示连接可以来自任何IP地址，第二个星号表示连接可以来自远程计算机上的任何端口。[25][33][34][35] 外部链接 netstat(8) – Linux程序员手册页 – 管理及特权命令（Administration and Privileged Commands） netstat(1) – FreeBSD通用命令（General Commands）手册页 netstat(1M) – Solaris 10)系统管理命令（System Administration Commands）参考手册页 参考 https://zh.wikipedia.org/wiki/Netstat "},"page/1091.html":{"url":"page/1091.html","title":"ping","keywords":"","body":"ping（win/linux） ICMP的应用举例--连通性测试程序ping PING 用来测试两个主机之间的连通性。 PING 使用了 ICMP 回送请求与回送回答报文。 PING 是应用层直接使用网络层 ICMP 的例子，它没有通过运输层的 TCP 或UDP。 一、功能 该实用程序验证配置、测试两台计算机之间的IP连接。Ping从源计算机上发送ICMP请求，目的计算机用一个ICMP回答作为响应。 二、格式 Usage: ping [-t] [-a] [-n count] [-l size] [-f] [-i TTL] [-v TOS] [-r count] [-s count] [[-j host-list] | [-k host-list]] [-w timeout] destination-list Options: -t Ping the specified host until stopped. To see statistics and continue - type Control-Break;To stop - type Control-C. -a Resolve addresses to hostnames. -n count Number of echo requests to send. -l size Send buffer size. -f Set Don't Fragment flag in packet. -i TTL Time To Live. -v TOS Type Of Service. -r count Record route for count hops. -s count Timestamp for count hops. -j host-list Loose source route along host-list. -k host-list Strict source route along host-list. -w timeout Timeout in milliseconds to wait for each reply. 三、举例 ping 127.0.0.1 ping 192.168.0.18 ping –t 192.168.0.10 ping –t -a 192.168.0.10 ping是一种电脑网络工具，用来测试数据包能否透过IP协议到达特定主机。ping的运作原理是向目标主机传出一个ICMP的请求回显数据包，并等待接收回显回应数据包。程序会按时间和成功响应的次数估算丢失数据包率（丢包率）和数据包往返时间（网络时延，Round-trip delay time）。 在1983年12月，Mike Muuss编写了首个这样的程序，用于在IP网络出现问题时方便探查其根源。因为这个程序的运作原理与潜水艇的主动声纳相似，他便用声纳的声音来为程序取名。David L. Mills曾提出另一个取名：Packet Internet Grouper/Gopher（后者指地鼠）。 网络管理员之间也常将ping用作动词，如“ping一下计算机XXX，看它是否开着。” 例子 Linux系统下的示例 具有iputils的Linux系统内的ping： root@localhost:~# ping www.wikipedia.org PING www.wikipedia.org (198.35.26.96): 56(84) data bytes 64 bytes from text-lb.ulsfo.wikimedia.org (198.35.26.96): seq=1 ttl=53 time=198.6 ms 64 bytes from text-lb.ulsfo.wikimedia.org (198.35.26.96): seq=2 ttl=53 time=199.2 ms 64 bytes from text-lb.ulsfo.wikimedia.org (198.35.26.96): seq=3 ttl=53 time=198.5 ms 64 bytes from text-lb.ulsfo.wikimedia.org (198.35.26.96): seq=4 ttl=53 time=199.2 ms 64 bytes from text-lb.ulsfo.wikimedia.org (198.35.26.96): seq=5 ttl=53 time=198.5 ms 64 bytes from text-lb.ulsfo.wikimedia.org (198.35.26.96): seq=6 ttl=53 time=199.2 ms 64 bytes from text-lb.ulsfo.wikimedia.org (198.35.26.96): seq=7 ttl=53 time=198.6 ms 64 bytes from text-lb.ulsfo.wikimedia.org (198.35.26.96): seq=8 ttl=53 time=199.3 ms 64 bytes from text-lb.ulsfo.wikimedia.org (198.35.26.96): seq=9 ttl=53 time=198.7 ms 64 bytes from text-lb.ulsfo.wikimedia.org (198.35.26.96): seq=10 ttl=53 time=198.4 ms ^C --- www.wikipedia.org ping statistics --- 10 packets transmitted, 10 received, 0% packet loss, time 9021ms rtt min/avg/max/mdev = 198.402/198.866/199.334/1.536 ms 有时在ping的返回信息里面会显示“DUP!”，表明存在环路，例如： 64 bytes from 10.0.0.1: icmp_seq=10 ttl=62 time=10.2 ms 64 bytes from 10.0.0.1: icmp_seq=10 ttl=62 time=11.8 ms (DUP!) 64 bytes from 10.0.0.1: icmp_seq=10 ttl=62 time=12.6 ms (DUP!) 64 bytes from 10.0.0.1: icmp_seq=10 ttl=62 time=13.2 ms (DUP!) 64 bytes from 10.0.0.1: icmp_seq=11 ttl=62 time=11.9 ms 64 bytes from 10.0.0.1: icmp_seq=11 ttl=62 time=13.3 ms (DUP!) 64 bytes from 10.0.0.1: icmp_seq=11 ttl=62 time=14.3 ms (DUP!) 64 bytes from 10.0.0.1: icmp_seq=12 ttl=62 time=12.1 ms Windows系统下的示例 Windows XP内置的ping： C:\\> ping www.google.com Pinging www.l.google.com [64.233.183.103] with 32 bytes of data: Reply from 64.233.183.103: bytes=32 time=25ms TTL=245 Reply from 64.233.183.103: bytes=32 time=22ms TTL=245 Reply from 64.233.183.103: bytes=32 time=25ms TTL=246 Reply from 64.233.183.103: bytes=32 time=22ms TTL=246 Ping statistics for 64.233.183.103: Packets: Sent = 4, Received = 4, Lost = 0 (0% loss), Approximate round trip times in milli-seconds: Minimum = 22ms, Maximum = 25ms, Average = 23ms 其中 Pinging www.l.google.com [64.233.183.103] with 32 bytes of data: www.google.com是www.l.google.com DNS别名，IP地址是64.233.183.103。以32 bytes大小测试，可以以-l（Windows）参数更改，大小是1-65500 Reply from 64.233.183.103: bytes=32 time=25ms TTL=245 Reply from 64.233.183.103: bytes=32 time=22ms TTL=245 Reply from 64.233.183.103: bytes=32 time=25ms TTL=246 Reply from 64.233.183.103: bytes=32 time=22ms TTL=246 反应时间25毫秒，TTL（Time To Live）值为245 由上来看，到google通过255-245 = 10个路由 Ping statistics for 64.233.183.103: Packets: Sent = 4, Received = 4, Lost = 0 (0% loss), Approximate round trip times in milli-seconds: Minimum = 22ms, Maximum = 25ms, Average = 23ms 总计，最小22ms，最大25ms，平均23ms 命令 win-win7x32 ping -? 用法: ping [-t] [-a] [-n count] [-l size] [-f] [-i TTL] [-v TOS] [-r count] [-s count] [[-j host-list] | [-k host-list]] [-w timeout] [-R] [-S srcaddr] [-4] [-6] target_name 选项: -t Ping 指定的主机，直到停止。 若要查看统计信息并继续操作 - 请键入 Control-Break； 若要停止 - 请键入 Control-C。 -a 将地址解析成主机名。 -n count 要发送的回显请求数。 -l size 发送缓冲区大小。 -f 在数据包中设置“不分段”标志(仅适用于 IPv4)。 -i TTL 生存时间。 -v TOS 服务类型(仅适用于 IPv4。该设置已不赞成使用，且 对 IP 标头中的服务字段类型没有任何影响)。 -r count 记录计数跃点的路由(仅适用于 IPv4)。 -s count 计数跃点的时间戳(仅适用于 IPv4)。 -j host-list 与主机列表一起的松散源路由(仅适用于 IPv4)。 -k host-list 与主机列表一起的严格源路由(仅适用于 IPv4)。 -w timeout 等待每次回复的超时时间(毫秒)。 -R 同样使用路由标头测试反向路由(仅适用于 IPv6)。 -S srcaddr 要使用的源地址。 -4 强制使用 IPv4。 -6 强制使用 IPv6。 linux-deepin15.11 man ping PING(8) System Manager's Manual: iputils PING(8) NAME ping - send ICMP ECHO_REQUEST to network hosts SYNOPSIS ping [-aAbBdDfhLnOqrRUvV46] [-c count] [-F flowlabel] [-i interval] [-I interface] [-l preload] [-m mark] [-M pmtudisc_option] [-N nodeinfo_option] [-w deadline] [-W timeout] [-p pattern] [-Q tos] [-s packetsize] [-S sndbuf] [-t ttl] [-T timestamp option] [hop ...] destination DESCRIPTION ping uses the ICMP protocol's mandatory ECHO_REQUEST datagram to elicit an ICMP ECHO_RESPONSE from a host or gateway. ECHO_REQUEST datagrams (``pings'') have an IP and ICMP header, followed by a struct timeval and then an arbitrary number of ``pad'' bytes used to fill out the packet. ping works with both IPv4 and IPv6. Using only one of them explicitly can be enforced by speci‐ fying -4 or -6. ping can also send IPv6 Node Information Queries (RFC4620). Intermediate hops may not be allowed, because IPv6 source routing was deprecated (RFC5095). OPTIONS -4 Use IPv4 only. -6 Use IPv6 only. -a Audible ping. -A Adaptive ping. Interpacket interval adapts to round-trip time, so that effectively not more than one (or more, if preload is set) unanswered probe is present in the network. Minimal interval is 200msec for not super-user. On networks with low rtt this mode is essentially equivalent to flood mode. -b Allow pinging a broadcast address. -B Do not allow ping to change source address of probes. The address is bound to one selected when ping starts. -c count Stop after sending count ECHO_REQUEST packets. With deadline opt ion, ping waits for count ECHO_REPLY packets, until the timeout expires. -d Set the SO_DEBUG option on the socket being used. Essentially, this socket option is not used by Linux kernel. -D Print timestamp (unix time + microseconds as in gettimeofday) before each line. -f Flood ping. For every ECHO_REQUEST sent a period ``.'' is printed, while for ever ECHO_REPLY received a backspace is printed. This provides a rapid display of how many packets are being dropped. If interval is not given, it sets interval to zero and out‐ puts packets as fast as they come back or one hundred times per second, whichever is more. Only the super-user may use this option with zero interval. -F flow label IPv6 only. Allocate and set 20 bit flow label (in hex) on echo request packets. If value is zero, kernel allocates random flow label. -h Show help. -i interval Wait interval seconds between sending each packet. The default is to wait for one second between each packet normally, or not to wait in flood mode. Only super-user may set interval to values less than 0.2 seconds. -I interface interface is either an address, or an interface name. If interface is an address, it sets source address to specified interface address. If interface in an interface name, it sets source interface to specified interface. For IPv6, when doing ping to a link- local scope address, link specification (by the '%'-notation in destination, or by this option) is required. -l preload If preload is specified, ping sends that many packets not waiting for reply. Only the super-user may select preload more than 3. -L Suppress loopback of multicast packets. This flag only applies if the ping destination is a multicast address. -m mark use mark to tag the packets going out. This is useful for variety of reasons within the kernel such as using policy routing to select specific outbound processing. -M pmtudisc_opt Select Path MTU Discovery strategy. pmtudisc_option may be either do (prohibit fragmen‐ tation, even local one), want (do PMTU discovery, fragment locally when packet size is large), or dont (do not set DF flag). -N nodeinfo_option IPv6 only. Send ICMPv6 Node Information Queries (RFC4620), instead of Echo Request. CAP_NET_RAW capability is required. help Show help for NI support. name Queries for Node Names. ipv6 Queries for IPv6 Addresses. There are several IPv6 specific flags. ipv6-global Request IPv6 global-scope addresses. ipv6-sitelocal Request IPv6 site-local addresses. ipv6-linklocal Request IPv6 link-local addresses. ipv6-all Request IPv6 addresses on other interfaces. ipv4 Queries for IPv4 Addresses. There is one IPv4 specific flag. ipv4-all Request IPv4 addresses on other interfaces. subject-ipv6=ipv6addr IPv6 subject address. subject-ipv4=ipv4addr IPv4 subject address. subject-name=nodename Subject name. If it contains more than one dot, fully-qualified domain name is assumed. subject-fqdn=nodename Subject name. Fully-qualified domain name is always assumed. -n Numeric output only. No attempt will be made to lookup symbolic names for host addresses. -O Report outstanding ICMP ECHO reply before sending next packet. This is useful together with the timestamp -D to log output to a diagnostic file and search for missing answers. -p pattern You may specify up to 16 ``pad'' bytes to fill out the packet you send. This is useful for diagnosing data-dependent problems in a network. For example, -p ff will cause the sent packet to be filled with all ones. -q Quiet output. Nothing is displayed except the summary lines at startup time and when finished. -Q tos Set Quality of Service -related bits in ICMP datagrams. tos can be decimal (ping only) or hex number. In RFC2474, these fields are interpreted as 8-bit Differentiated Services (DS), consist‐ ing of: bits 0-1 (2 lowest bits) of separate data, and bits 2-7 (highest 6 bits) of Dif‐ ferentiated Services Codepoint (DSCP). In RFC2481 and RFC3168, bits 0-1 are used for ECN. Historically (RFC1349, obsoleted by RFC2474), these were interpreted as: bit 0 (lowest bit) for reserved (currently being redefined as congestion control), 1-4 for Type of Ser‐ vice and bits 5-7 (highest bits) for Precedence. -r Bypass the normal routing tables and send directly to a host on an attached interface. If the host is not on a directly-attached network, an error is returned. This option can be used to ping a local host through an interface that has no route through it provided the option -I is also used. -R ping only. Record route. Includes the RECORD_ROUTE option in the ECHO_REQUEST packet and displays the route buffer on returned packets. Note that the IP header is only large enough for nine such routes. Many hosts ignore or discard this option. -s packetsize Specifies the number of data bytes to be sent. The default is 56, which translates into 64 ICMP data bytes when combined with the 8 bytes of ICMP header data. -S sndbuf Set socket sndbuf. If not specified, it is selected to buffer not more than one packet. -t ttl ping only. Set the IP Time to Live. -T timestamp option Set special IP timestamp options. timestamp option may be eit her tsonly (only time‐ stamps), tsandaddr (timestamps and addresses) or tsprespec host1 [host2 [host3 [host4]]] (timestamp prespecified hops). -U Print full user-to-user latency (the old behaviour). Normally ping prints network round trip time, which can be different f.e. due to DNS failures. -v Verbose output. -V Show version and exit. -w deadline Specify a timeout, in seconds, before ping exits regardless of how many packets have been sent or received. In this case ping does not stop after count packet are sent, it waits either for deadline expire or until count probes are answered or for some error notifica‐ tion from network. -W timeout Time to wait for a response, in seconds. The option affects only timeout in absence of any responses, otherwise ping waits for two RTTs. When using ping for fault isolation, it should first be run on the local host, to verify that the local network interface is up and running. Then, hosts and gateways further and further away should be ``pinged''. Round-trip times and packet loss statistics are computed. If duplicate packets are received, they are not included in the packet loss calculation, although the round trip time of these packets is used in calculating the minimum/average/maximum round-trip time numbers. When the specified number of packets have been sent (and received) or if the program is terminated with a SIGINT, a brief summary is displayed. Shorter current statistics can be obtained without termination of process with signal SIGQUIT. If ping does not receive any reply packets at all it will exit with code 1. If a packet count and deadline are both specified, and fewer than count packets are received by the time the dead‐ line has arrived, it will also exit with code 1. On other error it exits with code 2. Otherwise it exits with code 0. This makes it possible to use the exit code to see if a host is alive or not. This program is intended for use in network testing, measurement and management. Because of the load it can impose on the network, it is unwise to use ping during normal operations or from automated scripts. ICMP PACKET DETAILS An IP header without options is 20 bytes. An ICMP ECHO_REQUEST packet contains an additional 8 bytes worth of ICMP header followed by an arbitrary amount of data. When a packetsize is given, this indicated the size of this extra piece of data (the default is 56). Thus the amount of data received inside of an IP packet of type ICMP ECHO_REPLY will always be 8 bytes more than the requested data space (the ICMP header). If the data space is at least of size of struct timeval ping uses the beginning bytes of this space to include a timestamp which it uses in the computation of round trip times. If the data space is shorter, no round trip times are given. DUPLICATE AND DAMAGED PACKETS ping will report duplicate and damaged packets. Duplicate packets should never occur, and seem to be caused by inappropriate link-level retransmissions. Duplicates may occur in many situa‐ tions and are rarely (if ever) a good sign, although the presence of low levels of duplicates may not always be cause for alarm. Damaged packets are obviously serious cause for alarm and often indicate broken hardware some‐ where in the ping packet's path (in the network or in the hosts). TRYING DIFFERENT DATA PATTERNS The (inter)network layer should never treat packets differently depending on the data contained in the data portion. Unfortunately, data-dependent problems have been known to sneak into net‐ works and remain undetected for long periods of time. In many cases the particular pattern that will have problems is something that doesn't have sufficient ``transitions'', such as all ones or all zeros, or a pattern right at the edge, such as almost all zeros. It isn't necessarily enough to specify a data pattern of all zeros (for example) on the command line because the pat‐ tern that is of interest is at the data link level, and the relationship between what you type and what the controllers transmit can be complicated. This means that if you have a data-dependent problem you will probably have to do a lot of test‐ ing to find it. If you are lucky, you may manage to find a file that either can't be sent across your network or that takes much longer to transfer than other similar length files. You can then examine this file for repeated patterns that you can test using the -p option of ping. TTL DETAILS The TTL value of an IP packet represents the maximum number of IP routers that the packet can go through before being thrown away. In current practice you can expect each router in the Inter‐ net to decrement the TTL field by exactly one. The TCP/IP specification states that the TTL field for TCP packets should be set to 60, but many systems use smaller values (4.3 BSD uses 30, 4.2 used 15). The maximum possible value of this field is 255, and most Unix systems set the TTL field of ICMP ECHO_REQUEST packets to 255. This is why you will find you can ``ping'' some hosts, but not reach them with telnet(1) or ftp(1). In normal operation ping prints the TTL value from the packet it receives. When a remote system receives a ping packet, it can do one of three things with the TTL field in its response: · Not change it; this is what Berkeley Unix systems did before the 4.3BSD Tahoe release. In this case the TTL value in the received packet will be 255 minus the number of routers in the round-trip path. · Set it to 255; this is what current Berkeley Unix systems do. In this case the TTL value in the received packet will be 255 minus the number of routers in the path from the remote system to the pinging host. · Set it to some other value. Some machines use the same value for ICMP packets that they use for TCP packets, for example either 30 or 60. Others may use completely wild values. BUGS · Many Hosts and Gateways ignore the RECORD_ROUTE option. · The maximum IP header length is too small for options like RECORD_ROUTE to be completely use‐ ful. There's not much that can be done about this, however. · Flood pinging is not recommended in general, and flood pinging the broadcast address should only be done under very controlled conditions. SEE ALSO netstat(1), ifconfig(8). HISTORY The ping command appeared in 4.3BSD. The version described here is its descendant specific to Linux. As of version s20150815, the ping6 binary doesn't exist anymore. It has been merged into ping. Creating a symlink named ping6 pointing to ping will result in the same funcionality as before. SECURITY ping requires CAP_NET_RAW capability to be executed 1) if the program is used for non-echo queries (See -N option), or 2) if kernel does not support non-raw ICMP sockets, or 3) if the user is not allowed to create an ICMP echo socket. The program may be used as set-uid root. AVAILABILITY ping is part of iputils package and the latest versions are available in source form at http://www.skbuff.net/iputils/iputils-current.tar.bz2. iputils-161105 10 November 2016 PING(8) ping(8) 系统管理员手册：iptuils ping(8) 名称 ping - 向网络主机发送 ICMP 回显请求（ECHO_REQUEST）分组 概要 ping [-aAbBdDfhLnOqrRUvV46] [-c count] [-F flowlabel] [-i interval] [-I interface] [-l preload] [-m mark] [-M pmtudisc_option] [-N nodeinfo_option] [-w deadline] [-W timeout] [-p pattern] [-Q tos] [-s packetsize] [-S sndbuf] [-t ttl] [-T timestamp option] [hop ...] destination 描述 ping 使用 ICMP 协议规定的 ECHO_REQUEST 数据报引发一个来自主机或网管的 ICMP ECHO_RESPONSE 回应。ECHO_REQUEST 数据报（“ping”信息）有一个 IP 和 ICMP 头部， 其后跟随了一个结构，包含一个时间相关的值以及一个任意的“pad” 字节的随机数用以填充数据包。 ping可以同时在 IPv4 和 IPv6 下工作。 如需明确强制指定使用其中某个，可以使用 -4 或者 -6。 ping 还可以发送 IPv6 节点信息查询（Node Information Quries, RFC4620）。 中间节点（hop）可能不被允许，因为 IPv6 源路由已不赞成使用（RFC5095）。 选项 -4 仅使用 IPv4。 -6 仅使用 IPv6。 -a Audible ping. -A 自适应 ping。 -b 允许对一个广播地址进行 ping。 -t ttl 仅进行ping。 设置 IP 的 TTL（Time to Live）。 -T timestamp option 设置特殊的 IP 时间戳选项。 timestamp option 可以是 tsonly（仅时间戳）、 tsandaddr（时间戳和地址）或者 tsprespec host1 [host2 [host3 [host4]]]（预先指定跳数的时间戳）。 -U 打印完整的用户到用户的延迟（旧行为）。通常情况下 ping 打印网络往返延时，它们可能不同，例 如在 DNS 解析出现失败时。 -v 输出详细信息。 -V 显示版本并退出。 -c count 在发送(和接收)了正好数量为 count 的回显应答分组后停止操作。在发送了 count 个分组后没有收到任何分组的特别情况是发送导致了终止(选程主机或网关不可达)。 -d 在所用的套接字上使用 SO_DEBUG 选项。 实际上，这个套接字选项没有被 Linux 内核所使用。 -D 在每行之前打印时间戳（UNIX 时间 + gettimeofday 中的毫秒）。 -f 以高速（洪水）方式进行 ping。 以分组返回的速度来输出其它分组或每秒输出百次。当收到每个回 显应答并打印一个退格符时，对每个回显请求都打印一个句点``.''。这可以快速显示出丢弃了多少个 分组，只有超级用户可以用这个选项。这（操作）对网络要求非常苛刻，应该慎重使用。 -i wait 在发送每个分组时等待 wait 个秒数。缺省值为每个分组等待一秒。此选项与-f选项不能同时使用。 -l preload 如果指定 preload ，那么 ping 程序在开始正常运行模式前尽可能快地发送分组。同样只有超级用户可以用这个选项。 -n 只以数字形式输出信息。这样就不尝试去查找主机名了。 -p pattern 可以指定最多16个填充字节用于保持分组长度为16的整数倍。在网络上诊断与数据相关问题 时此选项很有用。例如``-p ff''将使发出的分组都用全1填充数据区。 -q 静态输出。在程序启动和结束时只显示摘要行。 -R 记录路由。在回显请求分组中包含记录路由选项并在相应的分组返回时显示路由缓冲区。注意IP首部 的容量只能存放9条这样的路由。很多主机 忽略或禁用此选项。 -r 在所连接的网络上旁路正常的选路表，直接向主机发送分组。如果主机未处于直接相连的网络上，那 么返回一个错误。此选项可用来通过无路由接口对一台主机进行检测(例如当接口已被 routed 程序丢 弃后)。 -s packetsize 指定要发送数据的字节量。缺省值为 56 ，这正好在添加了 8 字节的 ICMP 首部后组装 成 64 字节的 ICMP 数据报。 -w waitsecs 在 waitsecs 秒后停止 ping 程序的执行。当试图检测不可达主机时此选项很有用。 当用ping来隔离故障时，应首先在本地主机上运行，以检查本地网络接口有效 运行。然后，应该进一步检查 主机和网关。计算出往返时间和分组丢失率。如 果收到重复的分组，虽然这些分组的往返时间要用于计算往 返时间的最小/平均 /最大值，但是它们不应该算在刚才计算的丢失的分组中。当指定数量的分组已 经发 送(和接收)时或如果程序被SIGINT信号终止，会显示一份简短的摘要。 如果ping程序根本没有收到任何返回分组，那它将以返回码1退出。出错时返回 2。否则返回0。这些值可能用 于查看主机存在与否。 此程序专用于网络测试，度量和管理。因为它会使用网络的流量，在正常操作或 自动的脚本中使用它并不明 智。 ICMP分组细节 一个无选项的IP首部长为20字节。一个ICMP回显请求分组包含了额外的8个字节 用于任意数量的数据。当给出 分组长度时，就同时指出了额外数据的长度(缺省为 56)。因此接收到的ICMP回显应答这样的一个IP分组内部 所含的数据量总是8个字 节从而超过了请求数据空间(ICMP首部)。 如果数据空间至少有8个字节大小，ping程序使用此空间的头8个字节来包含一个 用于计算往返时间的时间 戳。如果指定了填充字节小于8个字节，就不给定往返 时间了。 重复和受损的分组 ping程序会报告重复和受损的分组。分组重复不应该发生，不适当的链路层传输 可能会导致这样问题。分组 重复在很多情况下可能会发生，虽然存在少量重复并 不总会导致警告，但并不是个好信号。 分组受损很显然会引起严重警告，并通常会在检测分组的路径上某处指出受损的 硬件(在网络中或主机中)。 尝试不同的数据结构 互联网络并不会因为分组数据部分的内容不同而区别看待分组。不幸的是，与数据相关的问题都已知潜存于网 络中，并在一个较长时期内无法检测到。在很多情况下，引起问题的特殊结构是些未完全转换的内容如全1或 全0，接近临界的结构如几乎全0。在命令行上没有足够的必要去指定如全0这样的一个数据结构，因为有影响 的结构位于数据链路层，并且与指定的和控制器传输的复杂程度有关。 这说明如果你有一个与数据相关的问题，可能必须用很多测试来找出它。如果幸运的话，可以设法查找一个不 能在网上发送或发送时要花比同长度的文件更多时间的文件。然后检查此文件中用ping程序的-p选项来指定的 重复结构。 有效时间细节 一个IP分组的TTL值表示分组在被丢弃前穿越IP路由器的最大数据。在现有的实际中， 你可以认为互联网上每 个路由器都对TTL字段减1。 TCP/IP规定TCP分组的TTL字段应该设为60，但很多系统用较小的值(4.3 BSD 用30, 4.2用15)。 此字段可能的最大值为255，多数UNIX系统把ICMP回显请求分组的TTL字段设 为255。这就是为什么你可 以``ping''一些主机而不能用telnet(1)和ftp(1)到达。 在正常操作时ping打印它收到分组的TTL值。当选程系统收到一份ping的分组时， 在作出响应时可以用TTL字 段完成三件事： 不变； 4.3BSD-Tahoe release之前的Berkeley Unix系统是这样做的。 在此情况下，收到的分 组的TTL值为255减往返路径中的路由器数。 把它设为255； 当前的Berkeley Unix系统是这样做的。在此情况下，收到的 分组的TTL值为为255减选 程系统与执行ping主机之间的路由器数。 把它设为255； 当前的Berkeley Unix系统是这样做的。在此情况下，收到的 分组的TTL值为为255减选 程系统与执行ping主机之间的路由器数。 把它设为其它值。 有些主机对ICMP分组使用与TCP分组相同的值，例如30或 60。其它系统使用原始 值。(校对者请指教此句之确切含义：meaculpa@21cn.com) 缺陷 · 很多主机和网关忽略记录路由（RECORD_ROUTE）选项。 · 最大 IP 头部长度对如记录路由（RECORD_ROUTE)这样非常有用的选项来说长度太小。 但对这个问题也没什 么可做的了。 · 通常情况并不推荐以高速方式作 ping， 而且只应当在非常受限的条件下才可对广播地址这样做。 另见 netstat(1), ifconfig(8). 历史 ping 命令出现于 4.3BSD。 当前文档描述的版本是它在 Linux 平台上的后续版本。 从版本 s20160815 开始，ping6 二进制程序不再存在。 它已经被合并进了 ping 程序中。 创建一个名为 ping6 指向 ping 的符号链接可以提供原有的功能。 安全性 ping 在下述条件下运行时需要 CAP_NET_RAW 能力： 1) 如果程序被用于进行 non-echo 查询（请见 -N 选 项），或 2) 如果内核不支持 non-raw ICMP 套接字，或 3) 如果用户不被允许创建 ICMP echo 套接字。 本 程序设计可以用于在设置用户ID为 root 的情况下运行。 获取 ping 是 iputils 软件包的一部分。 其最新版本源代码可以从下述地址获取到： http://www.skbuff.net/iputils/iputils-current.tar.bz2. 跋 本页面中文版由中文 man 手册页计划提供。 中文 man 手册页计划：https://github.com/man-pages-zh/manpages-zh iputils-161105 2016年11月10日 ping(8) 命令 linux-deepin15.11 man ping ping(8) 系统管理员手册：iptuils ping(8) 名称 ping - 向网络主机发送 ICMP 回显请求（ECHO_REQUEST）分组 概要 ping [-aAbBdDfhLnOqrRUvV46] [-c count] [-F flowlabel] [-i interval] [-I interface] [-l preload] [-m mark] [-M pmtudisc_option] [-N nodeinfo_option] [-w deadline] [-W timeout] [-p pattern] [-Q tos] [-s packetsize] [-S sndbuf] [-t ttl] [-T timestamp option] [hop ...] destination 描述 ping 使用 ICMP 协议规定的 ECHO_REQUEST 数据报引发一个来自主机或网管的 ICMP ECHO_RESPONSE 回应。 ECHO_REQUEST 数据报（“ping”信息）有一个 IP 和 ICMP 头部， 其后跟随了一个结构，包含一个时间相关的值以及一个任意的“pad” 字节的随机数用以填充数据包。 ping可以同时在 IPv4 和 IPv6 下工作。 如需明确强制指定使用其中某个，可以 使用 -4 或者 -6。 ping 还可以发送 IPv6 节点信息查询（Node Information Quries, RFC4620）。 中间节点（hop）可能不被允许，因为 IPv6 源路由已不赞成使用（RFC5095）。 选项 -4 仅使用 IPv4。 -6 仅使用 IPv6。 -a Audible ping. -A 自适应 ping。 -b 允许对一个广播地址进行 ping。 -t ttl 仅进行ping。 设置 IP 的 TTL（Time to Live）。 -T timestamp option 设置特殊的 IP 时间戳选项。 timestamp option 可以是 tsonly（仅时间 戳）、 tsandaddr（时间戳和地址）或者 tsprespec host1 [host2 [host3 [host4]]]（预先指定跳数的时间戳）。 -U 打印完整的用户到用户的延迟（旧行为）。通常情况下 ping 打印网络往 返延时，它们可能不同，例如在 DNS 解析出现失败时。 -v 输出详细信息。 -V 显示版本并退出。 -c count 在发送(和接收)了正好数量为 count 的回显应答分组后停止操 作。在发送了 count 个分组后没有收到任何分组的特别情况是发送导致了 终止(选程主机或网关不可达)。 -d 在所用的套接字上使用 SO_DEBUG 选项。 实际上，这个套接字选项没有被 Linux 内核所使用。 -D 在每行之前打印时间戳（UNIX 时间 + gettimeofday 中的毫秒）。 -f 以高速（洪水）方式进行 ping。 以分组返回的速度来输出其它分组或每 秒输出百次。当收到每个回显应答并打印一个退格符时，对每个回显请求 都打印一个句点``.''。这可以快速显示出丢弃了多少个分组，只有超级用 户可以用这个选项。这（操作）对网络要求非常苛刻，应该慎重使用。 -i wait 在发送每个分组时等待 wait 个秒数。缺省值为每个分组等待一 秒。此选项与-f选项不能同时使用。 -l preload 如果指定 preload ，那么 ping 程序在开始正常运行模式前尽可 能快地发送分组。同样只有超级用户可以用这个选项。 -n 只以数字形式输出信息。这样就不尝试去查找主机名了。 -p pattern 可以指定最多16个填充字节用于保持分组长度为16的整数倍。在 网络上诊断与数据相关问题时此选项很有用。例如``-p ff''将使发出的分 组都用全1填充数据区。 -q 静态输出。在程序启动和结束时只显示摘要行。 -R 记录路由。在回显请求分组中包含记录路由选项并在相应的分组返回时显 示路由缓冲区。注意IP首部的容量只能存放9条这样的路由。很多主机 忽 略或禁用此选项。 -r 在所连接的网络上旁路正常的选路表，直接向主机发送分组。如果主机未 处于直接相连的网络上，那么返回一个错误。此选项可用来通过无路由接 口对一台主机进行检测(例如当接口已被 routed 程序丢弃后)。 -s packetsize 指定要发送数据的字节量。缺省值为 56 ，这正好在添加了 8 字节的 ICMP 首部后组装成 64 字节的 ICMP 数据报。 -w waitsecs 在 waitsecs 秒后停止 ping 程序的执行。当试图检测不可达主 机时此选项很有用。 当用ping来隔离故障时，应首先在本地主机上运行，以检查本地网络接口有效 运 行。然后，应该进一步检查主机和网关。计算出往返时间和分组丢失率。如 果收 到重复的分组，虽然这些分组的往返时间要用于计算往返时间的最小/平均 /最大 值，但是它们不应该算在刚才计算的丢失的分组中。当指定数量的分组已 经发 送(和接收)时或如果程序被SIGINT信号终止，会显示一份简短的摘要。 如果ping程序根本没有收到任何返回分组，那它将以返回码1退出。出错时返回 2。否则返回0。这些值可能用于查看主机存在与否。 此程序专用于网络测试，度量和管理。因为它会使用网络的流量，在正常操作或 自动的脚本中使用它并不明智。 ICMP分组细节 一个无选项的IP首部长为20字节。一个ICMP回显请求分组包含了额外的8个字节 用 于任意数量的数据。当给出分组长度时，就同时指出了额外数据的长度(缺省为 56)。因此接收到的ICMP回显应答这样的一个IP分组内部所含的数据量总是8个字 节从而超过了请求数据空间(ICMP首部)。 如果数据空间至少有8个字节大小，ping程序使用此空间的头8个字节来包含一个 用于计算往返时间的时间戳。如果指定了填充字节小于8个字节，就不给定往返 时 间了。 重复和受损的分组 ping程序会报告重复和受损的分组。分组重复不应该发生，不适当的链路层传输 可能会导致这样问题。分组重复在很多情况下可能会发生，虽然存在少量重复并 不总会导致警告，但并不是个好信号。 分组受损很显然会引起严重警告，并通常会在检测分组的路径上某处指出受损的 硬件(在网络中或主机中)。 尝试不同的数据结构 互联网络并不会因为分组数据部分的内容不同而区别看待分组。不幸的是，与数据 相关的问题都已知潜存于网络中，并在一个较长时期内无法检测到。在很多情况 下，引起问题的特殊结构是些未完全转换的内容如全1或全0，接近临界的结构如几 乎全0。在命令行上没有足够的必要去指定如全0这样的一个数据结构，因为有影响 的结构位于数据链路层，并且与指定的和控制器传输的复杂程度有关。 这说明如果你有一个与数据相关的问题，可能必须用很多测试来找出它。如果幸运 的话，可以设法查找一个不能在网上发送或发送时要花比同长度的文件更多时间的 文件。然后检查此文件中用ping程序的-p选项来指定的重复结构。 有效时间细节 一个IP分组的TTL值表示分组在被丢弃前穿越IP路由器的最大数据。在现有的实际 中， 你可以认为互联网上每个路由器都对TTL字段减1。 TCP/IP规定TCP分组的TTL字段应该设为60，但很多系统用较小的值(4.3 BSD 用30, 4.2用15)。 此字段可能的最大值为255，多数UNIX系统把ICMP回显请求分组的TTL字段设 为255。这就是为什么你可以``ping''一些主机而不能用telnet(1)和ftp(1)到达。 在正常操作时ping打印它收到分组的TTL值。当选程系统收到一份ping的分组时， 在作出响应时可以用TTL字段完成三件事： 不变； 4.3BSD-Tahoe release之前的Berkeley Unix系统是这样做 的。 在此情况下，收到的分组的TTL值为255减往返路径中 的路由器数。 把它设为255； 当前的Berkeley Unix系统是这样做的。在此情况下，收到 的 分组的TTL值为为255减选程系统与执行ping主机之间的 路由器数。 把它设为其它值。 有些主机对ICMP分组使用与TCP分组相同的值，例如30或 60。其它系统使用原始值。(校对者请指教此句之确切含 义：meaculpa@21cn.com) 缺陷 · 很多主机和网关忽略记录路由（RECORD_ROUTE）选项。 · 最大 IP 头部长度对如记录路由（RECORD_ROUTE)这样非常有用的选项来说长度 太小。 但对这个问题也没什么可做的了。 · 通常情况并不推荐以高速方式作 ping， 而且只应当在非常受限的条件下才可对 广播地址这样做。 另见 netstat(1), ifconfig(8). 历史 ping 命令出现于 4.3BSD。 当前文档描述的版本是它在 Linux 平台上的后续版本。 从版本 s20160815 开始，ping6 二进制程序不再存在。 它已经被合并进了 ping 程序中。 创建一个名为 ping6 指向 ping 的符号链接可以提供原有的功能。 安全性 ping 在下述条件下运行时需要 CAP_NET_RAW 能力： 1) 如果程序被用于进行 non-echo 查询（请见 -N 选项），或 2) 如果内核不支持 non-raw ICMP 套接 字，或 3) 如果用户不被允许创建 ICMP echo 套接字。 本程序设计可以用于在设 置用户ID为 root 的情况下运行。 获取 ping 是 iputils 软件包的一部分。 其最新版本源代码可以从下述地址获取到： http://www.skbuff.net/iputils/iputils-current.tar.bz2. 跋 本页面中文版由中文 man 手册页计划提供。 中文 man 手册页计划：https://github.com/man-pages-zh/manpages-zh iputils-161105 2016年11月10日 ping(8) zander@zander-PC:~/Desktop$ ping www.baidu.com PING www.a.shifen.com (180.101.49.12) 56(84) bytes of data. 64 bytes from 180.101.49.12 (180.101.49.12): icmp_seq=1 ttl=49 time=3.33 ms From OpenWrt.lan (172.16.0.2): icmp_seq=2 Redirect Host(New nexthop: 172.16.0.1 (172.16.0.1)) 64 bytes from 180.101.49.12 (180.101.49.12): icmp_seq=2 ttl=49 time=3.13 ms 64 bytes from 180.101.49.12 (180.101.49.12): icmp_seq=3 ttl=49 time=2.60 ms 64 bytes from 180.101.49.12 (180.101.49.12): icmp_seq=4 ttl=49 time=4.21 ms 64 bytes from 180.101.49.12 (180.101.49.12): icmp_seq=5 ttl=49 time=3.08 ms win7x64 ping /? 用法: ping [-t] [-a] [-n count] [-l size] [-f] [-i TTL] [-v TOS] [-r count] [-s count] [[-j host-list] | [-k host-list]] [-w timeout] [-R] [-S srcaddr] [-4] [-6] target_name 选项: -t Ping 指定的主机，直到停止。 若要查看统计信息并继续操作 - 请键入 Control-Break； 若要停止 - 请键入 Control-C。 -a 将地址解析成主机名。 -n count 要发送的回显请求数。 -l size 发送缓冲区大小。 -f 在数据包中设置“不分段”标志(仅适用于 IPv4)。 -i TTL 生存时间。 -v TOS 服务类型(仅适用于 IPv4。该设置已不赞成使用，且 对 IP 标头中的服务字段类型没有任何影响)。 -r count 记录计数跃点的路由(仅适用于 IPv4)。 -s count 计数跃点的时间戳(仅适用于 IPv4)。 -j host-list 与主机列表一起的松散源路由(仅适用于 IPv4)。 -k host-list 与主机列表一起的严格源路由(仅适用于 IPv4)。 -w timeout 等待每次回复的超时时间(毫秒)。 -R 同样使用路由标头测试反向路由(仅适用于 IPv6)。 -S srcaddr 要使用的源地址。 -4 强制使用 IPv4。 -6 强制使用 IPv6。 C:\\Users\\2017>ping github.com 正在 Ping github.com [13.229.188.59] 具有 32 字节的数据: 请求超时。 请求超时。 请求超时。 请求超时。 13.229.188.59 的 Ping 统计信息: 数据包: 已发送 = 4，已接收 = 0，丢失 = 4 (100% 丢失)， C:\\Users\\2017>ping www.baidu.com 正在 Ping www.a.shifen.com [180.101.49.12] 具有 32 字节的数据: 来自 180.101.49.12 的回复: 字节=32 时间=1ms TTL=49 来自 180.101.49.12 的回复: 字节=32 时间=1ms TTL=49 来自 180.101.49.12 的回复: 字节=32 时间=1ms TTL=49 来自 180.101.49.12 的回复: 字节=32 时间=1ms TTL=49 180.101.49.12 的 Ping 统计信息: 数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)， 往返行程的估计时间(以毫秒为单位): 最短 = 1ms，最长 = 1ms，平均 = 1ms C:\\Users\\2017> 参考 https://zh.wikipedia.org/wiki/Ping "},"page/1092.html":{"url":"page/1092.html","title":"route","keywords":"","body":"route(win/linux) 该实用程序显示或添加、修改、删除当前主机或其它主机的静态路由表信息。 一、功能 该实用程序显示或添加、修改、删除当前主机或其它主机的静态路由表信息。 二、格式 ROUTE [-f] [-p] [command [destination] [MASK netmask] [gateway] [METRIC metric] [IF interface] command One of these: PRINT Prints a route ADD Adds a route DELETE Deletes a route CHANGE Modifies an existing route 三、举例 route print 命令 win7x64 route /? 操作网络路由表。 ROUTE [-f] [-p] [-4|-6] command [destination] [MASK netmask] [gateway] [METRIC metric] [IF interface] -f 清除所有网关项的路由表。如果与某个 命令结合使用，在运行该命令前， 应清除路由表。 -p 与 ADD 命令结合使用时，将路由设置为 在系统引导期间保持不变。默认情况下，重新启动系统时， 不保存路由。忽略所有其他命令， 这始终会影响相应的永久路由。Windows 95 不支持此选项。 -4 强制使用 IPv4。 -6 强制使用 IPv6。 command 其中之一: PRINT 打印路由 ADD 添加路由 DELETE 删除路由 CHANGE 修改现有路由 destination 指定主机。 MASK 指定下一个参数为“网络掩码”值。 netmask 指定此路由项的子网掩码值。 如果未指定，其默认设置为 255.255.255.255。 gateway 指定网关。 interface 指定路由的接口号码。 METRIC 指定跃点数，例如目标的成本。 用于目标的所有符号名都可以在网络数据库 文件 NETWORKS 中进行查找。用于网关的符号名称都可以在主机名称 数据库文件 HOSTS 中进行查找。 如果命令为 PRINT 或 DELETE。目标或网关可以为通配符， (通配符指定为星号“*”)，否则可能会忽略网关参数。 如果 Dest 包含一个 * 或 ?，则会将其视为 Shell 模式，并且只 打印匹配目标路由。“*”匹配任意字符串， 而“?”匹配任意一个字符。示例: 157.*.1、157.*、127.*、*224*。 只有在 PRINT 命令中才允许模式匹配。 诊断信息注释: 无效的 MASK 产生错误，即当 (DEST & MASK) != DEST 时。 示例: > route ADD 157.0.0.0 MASK 155.0.0.0 157.55.80.1 IF 1 路由添加失败: 指定的掩码参数无效。 (Destination & Mask) != Destination。 示例: > route PRINT > route PRINT -4 > route PRINT -6 > route PRINT 157* .... 只打印那些匹配 157* 的项 > route ADD 157.0.0.0 MASK 255.0.0.0 157.55.80.1 METRIC 3 IF 2 destination^ ^mask ^gateway metric^ ^ Interface^ 如果未给出 IF，它将尝试查找给定网关的最佳 接口。 > route ADD 3ffe::/32 3ffe::1 > route CHANGE 157.0.0.0 MASK 255.0.0.0 157.55.80.5 METRIC 2 IF 2 CHANGE 只用于修改网关和/或跃点数。 > route DELETE 157.0.0.0 > route DELETE 3ffe::/32 C:\\Users\\2017>route print =========================================================================== 接口列表 11...00 1d 09 09 a2 93 ......Broadcom 440x 10/100 Integrated Controller 1...........................Software Loopback Interface 1 16...00 00 00 00 00 00 00 e0 Microsoft ISATAP Adapter 12...00 00 00 00 00 00 00 e0 Teredo Tunneling Pseudo-Interface =========================================================================== IPv4 路由表 =========================================================================== 活动路由: 网络目标 网络掩码 网关 接口 跃点数 0.0.0.0 0.0.0.0 172.16.0.1 172.16.0.77 276 127.0.0.0 255.0.0.0 在链路上 127.0.0.1 306 127.0.0.1 255.255.255.255 在链路上 127.0.0.1 306 127.255.255.255 255.255.255.255 在链路上 127.0.0.1 306 172.16.0.0 255.255.254.0 在链路上 172.16.0.77 276 172.16.0.77 255.255.255.255 在链路上 172.16.0.77 276 172.16.1.255 255.255.255.255 在链路上 172.16.0.77 276 224.0.0.0 240.0.0.0 在链路上 127.0.0.1 306 224.0.0.0 240.0.0.0 在链路上 172.16.0.77 276 255.255.255.255 255.255.255.255 在链路上 127.0.0.1 306 255.255.255.255 255.255.255.255 在链路上 172.16.0.77 276 =========================================================================== 永久路由: 网络地址 网络掩码 网关地址 跃点数 0.0.0.0 0.0.0.0 172.16.0.1 默认 =========================================================================== IPv6 路由表 =========================================================================== 活动路由: 如果跃点数网络目标 网关 1 306 ::1/128 在链路上 1 306 ff00::/8 在链路上 =========================================================================== 永久路由: 无 C:\\Users\\2017> deepin15.11 man route ROUTE(8) Linux Programmer's Manual ROUTE(8) NAME route - 显示 / 操作IP选路表 总览 SYNOPSIS route [-CFvnee] route [-v] [-A family] add [-net|-host] target [netmask Nm] [gw Gw] [metric N] [mss M] [window W] [irtt I][reject] [mod] [dyn] [reinstate] [[dev] If] route [-v] [-A family] del [-net|-host] target [gw Gw][netmask Nm] [metric N] [[dev] If] route [-V] [--version] [-h] [--help] 描述 DESCRIPTION route程序对内核的IP选路表进行操作。它主要用于通过已用ifconfig(8)程序配置 好的接口来指定的主机或网络设置静态路由。 选项 OPTIONS -v 选用细节操作模式 -A family 用指定的地址族(如`inet'，`inet6')。 -n 以数字形式代替解释主机名形式来显示地址。此项对试图检测对域名服务 器进行路由发生故障的原因非常有用。 -e 用netstat(8)的格式来显示选路表。-ee将产生包括选路表所有参数在内的 大量信息。 -net 路由目标为网络。 -host 路由目标为主机。 -F 显示内核的FIB选路表。其格式可以用-e 和 -ee选项改变。 -C 显示内核的路由缓存。 del 删除一条路由。 add 添加一条路由。 target 指定目标网络或主机。可以用点分十进制形式的IP地址或主机/网络名。 netmask Nm 为添加的路由指定网络掩码。 gw Gw 为发往目标网络/主机的任何分组指定网关。注意：指定的网关首先必须是 可达的。也就是说必须为该网关预先指定一条静态路由。如果你为本地接 口之一指定这个网关地址的话，那么此网关地址将用于决定此接口上的分 组将如何进行路由。这是BSD风格所兼容的。 metric M 把选路表中的路由值字段(由选路进程使用)设为M。 mss M 把基于此路由之上的连接的TCP最大报文段长度设为M字节。这通常只用于 优化选路设置。默认值为536。 window W 把基于此路由之上的连接的TCP窗口长度设为W字节。这通常只用于AX.25网 络和不能处理背对背形式的帧的设备。 irtt I 把基于此路由之上的TCP连接的初始往返时间设为I毫秒(1-12000)。这通常 也只用于AX.25网络。如果省略此选项，则使用RFC1122的缺省值300ms。 reject 设置一条阻塞路由以使一条路由查找失败。这用于在使用缺省路由前先屏 蔽掉一些网络。但这并不起到防火墙的作用。 mod, dyn, reinstate 设置一条动态的或更改过的路由。这些标志通常只由选路进程来设置。这 只用于诊断目的， dev If 强制使路由与指定的设备关联，因为否则内核会自己来试图检测相应的设 备(通常检查已存在的路由和加入路由的设备的规格)。在多数正常的网络 上无需使用。 如果dev If是命令行上最后一个指定的选项，那么可以省略关键字dev，因 为它是缺省值。否则路由修改对象(metric - netmask- gw - dev)无关紧 要。 范例 EXAMPLES route add -net 127.0.0.0 加入正常的环回接口项，它使用掩码255.0.0.0(由目标地址决定了它是A类 网络)并与设备\"lo\"相关联(假定该设备先前已由ifconfig(8)正确设置)。 route add -net 192.56.76.0 netmask 255.255.255.0 dev eth0 向\"eth0\"添加一条指向网络192.56.76.x的路由。其中的C类子网掩码并不 必须，因为192.*是个C类的IP地址。在此关键字\"dev\"可省略。 route add default gw mango-gw 加入一条缺省路由(如果无法匹配其它路由则用它)。使用此路由的所有分 组将通过网关\"mango-gw\"进行传输。实际使用此路由的设备取决于如何到 达\"mango-gw\" - 先前必须设好到\"mango-gw\"的静态路由。 route add ipx4 sl0 向SLIP接口添加一条指向\"ipx4\"的路由(假定\"ipx4\"是使用SLIP的主机)。 route add -net 192.57.66.0 netmask 255.255.255.0 gw ipx4 此命令为先前SLIP接口的网关ipx4添加到网络\"192.57.66.x\"的路由。 route add 224.0.0.0 netmask 240.0.0.0 dev eth0 此命令为\"eth0\"设定所有D类地址(用于组播)的路由。这是用于组播内核的 正确配置行。 route add 10.0.0.0 netmask 255.0.0.0 reject 此命令为私有网络\"10.x.x.x.\"设置一条阻塞路由。 输出信息 OUTPUT 内核选路表的输出信息由以下栏目组成： Destination 目标网络或目标主机。 Gateway 网关地址或'*'(如未设)。 Genmask 目标网络的子网掩码；'255.255.255.255'为主机，'0.0.0.0'为缺省路 由。 Flags 可能出现的标志有： U (route is up) 路由正常 H (target is a host) 主机路由 G (use gateway) 使用网关的间接路由 R (reinstate route for dynamic routing) 为动态选路恢复路由 D (dynamically installed by daemon or redirect) 该路由由选路进程 或重定向动态创建 M (modified from routing daemon or rederict) 该路由已由选路进程或 重定向修改 ! (reject route) 阻塞路由 Metric 通向目标的距离(通常以跳来计算)。新内核不使用此概念，而选路进程可 能会用。 Ref 使用此路由的活动进程个数(Linux内核并不使用)。 Use 查找此路由的次数。根据-F 和 -C的使用，此数值是路由缓存的损失数或 采样数。 Iface 使用此路由发送分组的接口。 MSS 基于此路由的TCP连接的缺省最大报文段长度。 Window 基于此路由的TCP连接的缺省窗口长度。 irtt 初始往返时间。内核用它来猜测最佳TCP协议参数而无须等待(可能很慢 的)应答。 HH (cached only) 为缓存过的路由而访问硬件报头缓存的ARP记录和缓存路由的数量。如果缓 存过路由的接口(如lo)无须硬件地址则值为-1。 Arp (cached only) 无论缓存路由所用的硬件地址情况如何都进行更新。 文件 FILES /proc/net/ipv6_route /proc/net/route /proc/net/rt_cache 参见SEE ALSO ifconfig(8), netstat(8), arp(8), rarp(8) 历史 HISTORY Linux所用的route程序最初由Fred N. van Kempen 开发，并由Johannes Stille 和Linus Torvalds对pl15进行修改。Alan Cox为Linux 1.1.22加入了mss 和 window选 项。对irtt的支持和与netstat的合并来自BerndEckenfels的工作。 作者 AUTHOR 当前由Phil Blundell 维护。 [中文版维护人] meaculpa [中文版最新更新] 2001/02/24 《中国linux论坛man手册页翻译计划》: http://cmpp.linuxforum.net 跋 本页面中文版由中文 man 手册页计划提供。 中文 man 手册页计划：https://github.com/man-pages-zh/manpages-zh net-tools 2 January 2000 ROUTE(8) zander@zander-PC:~/Desktop{% math_inline %} route Kernel IP routing table Destination Gateway Genmask Flags Metric Ref Use Iface default OpenWrt.lan 0.0.0.0 UG 600 0 0 wlp0s20f3 172.16.0.0 0.0.0.0 255.255.254.0 U 600 0 0 wlp0s20f3 zander@zander-PC:~/Desktop{% endmath_inline %} "},"page/1093.html":{"url":"page/1093.html","title":"tracert&tracerote","keywords":"","body":"Tracert&Traceroute(win/linux) ICMP的应用举例--路径追踪程序traceroute traceroute程序是ICMP的另一种非常有用的应用。 该程序允许跟踪从一个主机或一台路由器到世界上其他任意一个主机或路由器之间的路由。 为了判断源主机和目的主机之间所有路由器的数量和标识（名字和IP地址），源主机中的traceroute向目的主机发送ICMP报文序列。这些报文关键在于IP数据报的TTL字段中进行特殊设置。 traceroute，现代也有Linux系统称为tracepath，Windows系统称为tracert，是一种电脑网络工具。它可显示数据包在IP网络经过的路由器的IP地址。 //win为例 一、功能 tracert 命令跟踪 TCP/IP 数据包从该计算机到其他远程计算机所采用的路径。tracert 命令使用 ICMP 响应请求并答复消息（和 ping 命令类似），产生关于经过的每个路由器及每个跃点的往返时间 (RTT) 的命令行报告输出。 二、格式 键入 tracert host_name 或者键入 tracert ip_address 三、举例 tracert www.microsoft.com Tracert 192.168.0.100 原理 程序是利用增加存活时间（TTL）值来实现其功能的。每当数据包经过一个路由器，其存活时间就会减1。当其存活时间是0时，主机便取消数据包，并发送一个ICMP TTL数据包给原数据包的发出者。 程序发出的首3个数据包TTL值是1，之后3个是2，如此类推，它便得到一连串数据包路径。注意IP不保证每个数据包走的路径都一样。 实现 主叫方首先发出 TTL=1 的数据包，第一个路由器将 TTL 减1得0后就不再继续转发此数据包，而是返回一个 ICMP 逾时报文，主叫方从逾时报文中即可提取出数据包所经过的第一个网关地址。然后又发出一个 TTL=2 的 ICMP 数据包，可获得第二个网关地址，依次递增 TTL 便获取了沿途所有网关地址。 需要注意的是，并不是所有网关都会如实返回 ICMP 超时报文。出于安全性考虑，大多数防火墙以及启用了防火墙功能的路由器缺省配置为不返回各种 ICMP 报文，其余路由器或交换机也可被管理员主动修改配置变为不返回 ICMP 报文。因此 Traceroute 程序不一定能拿全所有的沿途网关地址。所以，当某个 TTL 值的数据包得不到响应时，并不能停止这一追踪过程，程序仍然会把 TTL 递增而发出下一个数据包。一直达到默认或用参数指定的追踪限制（maximum_hops）才结束追踪。 依据上述原理，利用了 UDP 数据包的 Traceroute 程序在数据包到达真正的目的主机时，就可能因为该主机没有提供 UDP 服务而简单将数据包抛弃，并不返回任何信息。为了解决这个问题，Traceroute 故意使用了一个大于 30000 的端口号，因 UDP 协议规定端口号必须小于 30000 ，所以目标主机收到数据包后唯一能做的事就是返回一个“端口不可达”的 ICMP 报文，于是主叫方就将端口不可达报文当作跟踪结束的标志。 历史 根据traceroute的man page：1987年，Steve Deering建议Van Jacobson写一个这样的程序。C. Philip Wood、Tim Seaver和Ken Adelman为这个程序提供一些意见或改动。 Windows NT系统有结合ping和traceroute的pathping工具。 命令 win7x64 tracert \\? 用法: tracert [-d] [-h maximum_hops] [-j host-list] [-w timeout] [-R] [-S srcaddr] [-4] [-6] target_name 选项: -d 不将地址解析成主机名。 -h maximum_hops 搜索目标的最大跃点数。 -j host-list 与主机列表一起的松散源路由(仅适用于 IPv4)。 -w timeout 等待每个回复的超时时间(以毫秒为单位)。 -R 跟踪往返行程路径(仅适用于 IPv6)。 -S srcaddr 要使用的源地址(仅适用于 IPv6)。 -4 强制使用 IPv4。 -6 强制使用 IPv6。 linux-deepin15.11 sudo apt install strace traceroute man traceroute TRACEROUTE(1) Traceroute For Linux TRACEROUTE(1) NAME traceroute - print the route packets trace to network host SYNOPSIS traceroute [-46dFITUnreAV] [-f first_ttl] [-g gate,...] [-i device] [-m max_ttl] [-p port] [-s src_addr] [-q nqueries] [-N squeries] [-t tos] [-l flow_label] [-w waittimes] [-z sendwait] [-UL] [-D] [-P proto] [--sport=port] [-M method] [-O mod_options] [--mtu] [--back] host [packet_len] traceroute6 [options] tcptraceroute [options] lft [options] DESCRIPTION traceroute tracks the route packets taken from an IP network on their way to a given host. It utilizes the IP protocol's time to live (TTL) field and attempts to elicit an ICMP TIME_EXCEEDED response from each gateway along the path to the host. traceroute6 is equivalent to traceroute -6 tcptraceroute is equivalent to traceroute -T lft , the Layer Four Traceroute, performs a TCP traceroute, like traceroute -T , but attempts to provide compatibility with the origi‐ nal such implementation, also called \"lft\". The only required parameter is the name or IP address of the destina‐ tion host . The optional packet_len`gth is the total size of the probing packet (default 60 bytes for IPv4 and 80 for IPv6). The spec‐ ified size can be ignored in some situations or increased up to a minimal value. This program attempts to trace the route an IP packet would follow to some internet host by launching probe packets with a small ttl (time to live) then listening for an ICMP \"time exceeded\" reply from a gateway. We start our probes with a ttl of one and increase by one until we get an ICMP \"port unreachable\" (or TCP reset), which means we got to the \"host\", or hit a max (which defaults to 30 hops). Three probes (by default) are sent at each ttl setting and a line is printed showing the ttl, address of the gateway and round trip time of each probe. The address can be followed by additional information when requested. If the probe answers come from different gateways, the address of each responding system will be printed. If there is no response within a certain timeout, an \"*\" (asterisk) is printed for that probe. After the trip time, some additional annotation can be printed: !H, !N, or !P (host, network or protocol unreachable), !S (source route failed), !F (fragmentation needed), !X (communication administra‐ tively prohibited), !V (host precedence violation), !C (precedence cutoff in effect), or ! (ICMP unreachable code ). If almost all the probes result in some kind of unreachable, traceroute will give up and exit. We don't want the destination host to process the UDP probe packets, so the destination port is set to an unlikely value (you can change it with the -p flag). There is no such a problem for ICMP or TCP tracerouting (for TCP we use half-open technique, which prevents our probes to be seen by applications on the destination host). In the modern network environment the traditional traceroute methods can not be always applicable, because of widespread use of firewalls. Such firewalls filter the \"unlikely\" UDP ports, or even ICMP echoes. To solve this, some additional tracerouting methods are implemented (including tcp), see LIST OF AVAILABLE METHODS below. Such methods try to use particular protocol and source/destination port, in order to bypass firewalls (to be seen by firewalls just as a start of allowed type of a network session). OPTIONS --help Print help info and exit. -4, -6 Explicitly force IPv4 or IPv6 tracerouting. By default, the program will try to resolve the name given, and choose the appropriate protocol automatically. If resolving a host name returns both IPv4 and IPv6 addresses, traceroute will use IPv4. -I, --icmp Use ICMP ECHO for probes -T, --tcp Use TCP SYN for probes -d, --debug Enable socket level debugging (when the Linux kernel supports it) -F, --dont-fragment Do not fragment probe packets. (For IPv4 it also sets DF bit, which tells intermediate routers not to fragment remotely as well). Varying the size of the probing packet by the packet_len com‐ mand line parameter, you can manually obtain information about the MTU of individual network hops. The --mtu option (see below) tries to do this automatically. Note, that non-fragmented features (like -F or --mtu) work properly since the Linux kernel 2.6.22 only. Before that ver‐ sion, IPv6 was always fragmented, IPv4 could use the once the discovered final mtu only (from the route cache), which can be less than the actual mtu of a device. -f first_ttl, --first=first_ttl Specifies with what TTL to start. Defaults to 1. -g gateway, --gateway=gateway Tells traceroute to add an IP source routing option to the outgoing packet that tells the network to route the packet through the specified gateway (most routers have disabled source routing for security reasons). In general, several gateway's is allowed (comma separated). For IPv6, the form of num,addr,addr... is allowed, where num is a route header type (default is type 2). Note the type 0 route header is now dep‐ recated (rfc5095). -i interface, --interface=interface Specifies the interface through which traceroute should send packets. By default, the interface is selected according to the routing table. -m max_ttl, --max-hops=max_ttl Specifies the maximum number of hops (max time-to-live value) traceroute will probe. The default is 30. -N squeries, --sim-queries=squeries Specifies the number of probe packets sent out simultaneously. Sending several probes concurrently can speed up traceroute considerably. The default value is 16. Note that some routers and hosts can use ICMP rate throttling. In such a situation specifying too large number can lead to loss of some responses. -n Do not try to map IP addresses to host names when displaying them. -p port, --port=port For UDP tracing, specifies the destination port base tracer‐ oute will use (the destination port number will be incremented by each probe). For ICMP tracing, specifies the initial ICMP sequence value (incremented by each probe too). For TCP and others specifies just the (constant) destination port to connect. When using the tcptraceroute wrapper, -p specifies the source port. -t tos, --tos=tos For IPv4, set the Type of Service (TOS) and Precedence value. Useful values are 16 (low delay) and 8 (high throughput). Note that in order to use some TOS precedence values, you have to be super user. For IPv6, set the Traffic Control value. -l flow_label, --flowlabel=flow_label Use specified flow_label for IPv6 packets. -w max[,here,near], --wait=max[,here,near] Determines how long to wait for a response to a probe. There are three (in general) float values separated by a comma (or a slash). Max specifies the maximum time (in seconds, default 5.0) to wait, in any case. Traditional traceroute implementation always waited whole max seconds for any probe. But if we already have some replies from the same hop, or even from some next hop, we can use the round trip time of such a reply as a hint to determine the actual reasonable amount of time to wait. The optional here (default 3.0) specifies a factor to multiply the round trip time of an already received response from the same hop. The resulting value is used as a timeout for the probe, instead of (but no more than) max. The optional near (default 10.0) specifies a similar factor for a response from some next hop. (The time of the first found result is used in both cases). First, we look for the same hop (of the probe which will be printed first from now). If nothing found, then look for some next hop. If nothing found, use max. If here and/or near have zero values, the corresponding computation is skipped. Here and near are always set to zero if only max is specified (for compatibility with previous versions). -q nqueries, --queries=nqueries Sets the number of probe packets per hop. The default is 3. -r Bypass the normal routing tables and send directly to a host on an attached network. If the host is not on a directly- attached network, an error is returned. This option can be used to ping a local host through an interface that has no route through it. -s source_addr, --source=source_addr Chooses an alternative source address. Note that you must select the address of one of the interfaces. By default, the address of the outgoing interface is used. -z sendwait, --sendwait=sendwait Minimal time interval between probes (default 0). If the value is more than 10, then it specifies a number in millisec‐ onds, else it is a number of seconds (float point values allowed too). Useful when some routers use rate-limit for ICMP messages. -e, --extensions Show ICMP extensions (rfc4884). The general form is CLASS/TYPE: followed by a hexadecimal dump. The MPLS (rfc4950) is shown parsed, in a form: MPLS:L=label,E=exp_use,S=stack_bottom,T=TTL (more objects sep‐ arated by / ). -A, --as-path-lookups Perform AS path lookups in routing registries and print results directly after the corresponding addresses. -V, --version Print the version and exit. There are additional options intended for advanced usage (such as alternate trace methods etc.): --sport=port Chooses the source port to use. Implies -N 1 -w 5 . Normally source ports (if applicable) are chosen by the system. --fwmark=mark Set the firewall mark for outgoing packets (since the Linux kernel 2.6.25). -M method, --module=name Use specified method for traceroute operations. Default tradi‐ tional udp method has name default, icmp (-I) and tcp (-T) have names icmp and tcp respectively. Method-specific options can be passed by -O . Most methods have their simple shortcuts, (-I means -M icmp, etc). -O option, --options=options Specifies some method-specific option. Several options are separated by comma (or use several -O on cmdline). Each method may have its own specific options, or many not have them at all. To print information about available options, use -O help. -U, --udp Use UDP to particular destination port for tracerouting (instead of increasing the port per each probe). Default port is 53 (dns). -UL Use UDPLITE for tracerouting (default port is 53). -D, --dccp Use DCCP Requests for probes. -P protocol, --protocol=protocol Use raw packet of specified protocol for tracerouting. Default protocol is 253 (rfc3692). --mtu Discover MTU along the path being traced. Implies -F -N 1. New mtu is printed once in a form of F=NUM at the first probe of a hop which requires such mtu to be reached. (Actually, the correspond \"frag needed\" icmp message normally is sent by the previous hop). Note, that some routers might cache once the seen information on a fragmentation. Thus you can receive the final mtu from a closer hop. Try to specify an unusual tos by -t , this can help for one attempt (then it can be cached there as well). See -F option for more info. --back Print the number of backward hops when it seems different with the forward direction. This number is guessed in assumption that remote hops send reply packets with initial ttl set to either 64, or 128 or 255 (which seems a common practice). It is printed as a negate value in a form of '-NUM' . LIST OF AVAILABLE METHODS In general, a particular traceroute method may have to be chosen by -M name, but most of the methods have their simple cmdline switches (you can see them after the method name, if present). default The traditional, ancient method of tracerouting. Used by default. Probe packets are udp datagrams with so-called \"unlikely\" destination ports. The \"unlikely\" port of the first probe is 33434, then for each next probe it is incremented by one. Since the ports are expected to be unused, the destination host normally returns \"icmp unreach port\" as a final response. (Nobody knows what happens when some application listens for such ports, though). This method is allowed for unprivileged users. icmp -I Most usual method for now, which uses icmp echo packets for probes. If you can ping(8) the destination host, icmp tracerouting is appli‐ cable as well. This method may be allowed for unprivileged users since the kernel 3.0 (IPv4, for IPv6 since 3.11), which supports new dgram icmp (or \"ping\") sockets. To allow such sockets, sysadmin should provide net/ipv4/ping_group_range sysctl range to match any group of the user. Options: raw Use only raw sockets (the traditional way). This way is tried first by default (for compatibility rea‐ sons), then new dgram icmp sockets as fallback. dgram Use only dgram icmp sockets. tcp -T Well-known modern method, intended to bypass firewalls. Uses the constant destination port (default is 80, http). If some filters are present in the network path, then most probably any \"unlikely\" udp ports (as for default method) or even icmp echoes (as for icmp) are filtered, and whole tracerouting will just stop at such a firewall. To bypass a network filter, we have to use only allowed protocol/port combinations. If we trace for some, say, mailserver, then more likely -T -p 25 can reach it, even when -I can not. This method uses well-known \"half-open technique\", which prevents applications on the destination host from seeing our probes at all. Normally, a tcp syn is sent. For non-listened ports we receive tcp reset, and all is done. For active listening ports we receive tcp syn+ack, but answer by tcp reset (instead of expected tcp ack), this way the remote tcp session is dropped even without the application ever taking notice. There is a couple of options for tcp method: syn,ack,fin,rst,psh,urg,ece,cwr Sets specified tcp flags for probe packet, in any combination. flags=num Sets the flags field in the tcp header exactly to num. ecn Send syn packet with tcp flags ECE and CWR (for Explicit Con‐ gestion Notification, rfc3168). sack,timestamps,window_scaling Use the corresponding tcp header option in the outgoing probe packet. sysctl Use current sysctl (/proc/sys/net/*) setting for the tcp header options above and ecn. Always set by default, if noth‐ ing else specified. mss=num Use value of num for maxseg tcp header option (when syn). info Print tcp flags of final tcp replies when the target host is reached. Allows to determine whether an application listens the port and other useful things. Default options is syn,sysctl. tcpconn An initial implementation of tcp method, simple using connect(2) call, which does full tcp session opening. Not recommended for normal use, because a destination application is always affected (and can be confused). udp -U Use udp datagram with constant destination port (default 53, dns). Intended to bypass firewall as well. Note, that unlike in tcp method, the correspond application on the destination host always receive our probes (with random data), and most can easily be confused by them. Most cases it will not respond to our packets though, so we will never see the final hop in the trace. (Fortunately, it seems that at least dns servers replies with something angry). This method is allowed for unprivileged users. udplite -UL Use udplite datagram for probes (with constant destination port, default 53). This method is allowed for unprivileged users. Options: coverage=num Set udplite send coverage to num. dccp -D Use DCCP Request packets for probes (rfc4340). This method uses the same \"half-open technique\" as used for TCP. The default destination port is 33434. Options: service=num Set DCCP service code to num (default is 1885957735). raw -P proto Send raw packet of protocol proto. No protocol-specific headers are used, just IP header only. Implies -N 1 -w 5 . Options: protocol=proto Use IP protocol proto (default 253). NOTES To speed up work, normally several probes are sent simultaneously. On the other hand, it creates a \"storm of packages\", especially in the reply direction. Routers can throttle the rate of icmp responses, and some of replies can be lost. To avoid this, decrease the number of simultaneous probes, or even set it to 1 (like in initial tracer‐ oute implementation), i.e. -N 1 The final (target) host can drop some of the simultaneous probes, and might even answer only the latest ones. It can lead to extra \"looks like expired\" hops near the final hop. We use a smart algorithm to auto-detect such a situation, but if it cannot help in your case, just use -N 1 too. For even greater stability you can slow down the program's work by -z option, for example use -z 0.5 for half-second pause between probes. To avoid an extra waiting, we use adaptive algorithm for timeouts (see -w option for more info). It can lead to premature expiry (espe‐ cially when response times differ at times) and printing \"*\" instead of a time. In such a case, switch this algorithm off, by specifying -w with the desired timeout only (for example, -w 5). If some hops report nothing for every method, the last chance to obtain something is to use ping -R command (IPv4, and for nearest 8 hops only). SEE ALSO ping(8), ping6(8), tcpdump(8), netstat(8) Traceroute 11 October 2006 TRACEROUTE(1) traceroute Usage: traceroute [ -46dFITnreAUDV ] [ -f first_ttl ] [ -g gate,... ] [ -i device ] [ -m max_ttl ] [ -N squeries ] [ -p port ] [ -t tos ] [ -l flow_label ] [ -w MAX,HERE,NEAR ] [ -q nqueries ] [ -s src_addr ] [ -z sendwait ] [ --fwmark=num ] host [ packetlen ] Options: -4 Use IPv4 -6 Use IPv6 -d --debug Enable socket level debugging -F --dont-fragment Do not fragment packets -f first_ttl --first=first_ttl Start from the first_ttl hop (instead from 1) -g gate,... --gateway=gate,... Route packets through the specified gateway (maximum 8 for IPv4 and 127 for IPv6) -I --icmp Use ICMP ECHO for tracerouting -T --tcp Use TCP SYN for tracerouting (default port is 80) -i device --interface=device Specify a network interface to operate with -m max_ttl --max-hops=max_ttl Set the max number of hops (max TTL to be reached). Default is 30 -N squeries --sim-queries=squeries Set the number of probes to be tried simultaneously (default is 16) -n Do not resolve IP addresses to their domain names -p port --port=port Set the destination port to use. It is either initial udp port value for \"default\" method (incremented by each probe, default is 33434), or initial seq for \"icmp\" (incremented as well, default from 1), or some constant destination port for other methods (with default of 80 for \"tcp\", 53 for \"udp\", etc.) -t tos --tos=tos Set the TOS (IPv4 type of service) or TC (IPv6 traffic class) value for outgoing packets -l flow_label --flowlabel=flow_label Use specified flow_label for IPv6 packets -w MAX,HERE,NEAR --wait=MAX,HERE,NEAR Wait for a probe no more than HERE (default 3) times longer than a response from the same hop, or no more than NEAR (default 10) times than some next hop, or MAX (default 5.0) seconds (float point values allowed too) -q nqueries --queries=nqueries Set the number of probes per each hop. Default is 3 -r Bypass the normal routing and send directly to a host on an attached network -s src_addr --source=src_addr Use source src_addr for outgoing packets -z sendwait --sendwait=sendwait Minimal time interval between probes (default 0). If the value is more than 10, then it specifies a number in milliseconds, else it is a number of seconds (float point values allowed too) -e --extensions Show ICMP extensions (if present), including MPLS -A --as-path-lookups Perform AS path lookups in routing registries and print results directly after the corresponding addresses -M name --module=name Use specified module (either builtin or external) for traceroute operations. Most methods have their shortcuts (`-I' means `-M icmp' etc.) -O OPTS,... --options=OPTS,... Use module-specific option OPTS for the traceroute module. Several OPTS allowed, separated by comma. If OPTS is \"help\", print info about available options --sport=num Use source port num for outgoing packets. Implies `-N 1' --fwmark=num Set firewall mark for outgoing packets -U --udp Use UDP to particular port for tracerouting (instead of increasing the port per each probe), default port is 53 -UL Use UDPLITE for tracerouting (default dest port is 53) -D --dccp Use DCCP Request for tracerouting (default port is 33434) -P prot --protocol=prot Use raw packet of protocol prot for tracerouting --mtu Discover MTU along the path being traced. Implies `-F -N 1' --back Guess the number of hops in the backward path and print if it differs -V --version Print version info and exit --help Read this help and exit Arguments: + host The host to traceroute to packetlen The full packet length (default is the length of an IP header plus 40). Can be ignored or increased to a minimal allowed value //NUIST tracerouteXXX.net//成功traceroutetoXXX.net(172.XXX.XXX.XXX),30hopsmax,60bytepackets110.0.255.254(10.0.255.254)12.236ms12.466ms12.842ms2172.255.0.17(172.255.0.17)1.383ms1.703ms1.828ms3∗∗∗4211.65.207.77(211.65.207.77)6.093ms211.65.207.21(211.65.207.21)6.319ms211.65.207.77(211.65.207.77)6.721ms5101.4.116.222(101.4.116.222)5.298ms101.4.116.218(101.4.116.218)5.399ms101.4.116.105(101.4.116.105)5.960ms6101.4.112.42(101.4.112.42)12.967ms101.4.117.25(101.4.117.25)7.938ms101.4.112.42(101.4.112.42)11.507ms7101.4.117.30(101.4.117.30)42.283ms39.939ms39.886ms8101.4.117.38(101.4.117.38)37.393ms101.4.116.118(101.4.116.118)39.181ms101.4.117.38(101.4.117.38)37.123ms9101.4.112.69(101.4.112.69)38.658ms36.523ms101.4.112.1(101.4.112.1)34.868ms10101.4.114.194(101.4.114.194)33.799ms101.4.113.109(101.4.113.109)32.864ms33.260ms11101.4.118.26(101.4.118.26)37.468ms101.4.114.174(101.4.114.174)37.397ms101.4.118.26(101.4.118.26)37.665ms12101.4.117.150(101.4.117.150)175.256ms101.4.118.26(101.4.118.26)37.406ms37.406ms1361.8.59.37(61.8.59.37)185.770ms185.778ms101.4.117.150(101.4.117.150)172.632ms14i−91.hkth−core02.telstraglobal.net(202.84.153.25)216.492ms61.8.59.37(61.8.59.37)198.159ms198.539ms15i−92.hkth12.telstraglobal.net(202.84.153.38)231.299msi−0−5−0−5.hkth12.telstraglobal.net(202.84.173.22)231.696ms232.120ms16i−0−5−0−5.hkth12.telstraglobal.net(202.84.173.22)229.983msae1−125.cr1−hkg1.ip4.gtt.net(183.182.80.121)270.571ms271.064ms17et−0−0−59.cr3−lax2.ip4.gtt.net(89.149.130.94)247.926msae1−125.cr1−hkg1.ip4.gtt.net(183.182.80.121)266.960mset−0−0−47.cr3−lax2.ip4.gtt.net(89.149.141.125)247.520ms18ip4.gtt.net(69.174.6.174)279.924mset−0−0−47.cr3−lax2.ip4.gtt.net(89.149.141.125)246.325msip4.ceranetworks.com(69.174.2.154)282.185ms1923.225.225.221(23.225.225.221)249.050msip4.gtt.net(69.174.6.174)276.411ms23.225.225.221(23.225.225.221)247.393ms2023.225.225.1(23.225.225.1)278.334ms∗192.168.206.25(192.168.206.25)254.390ms21900gbps−a.suite101−1200street(23.224.58.2)287.459ms∗287.883ms22900gbps−a.suite101−1200street(23.224.58.2)285.432ms286.349ms286.115ms2323.225.225.22(23.225.225.22)288.666ms289.286ms∗24n21.sexpay.top(172.XXX.XXX.XXX)359.110ms!X360.694ms!X360.689ms!X traceroute XXX.net //成功\r traceroute to XXX.net (172.XXX.XXX.XXX), 30 hops max, 60 byte packets\r 1 10.0.255.254 (10.0.255.254) 12.236 ms 12.466 ms 12.842 ms\r 2 172.255.0.17 (172.255.0.17) 1.383 ms 1.703 ms 1.828 ms\r 3 * * *\r 4 211.65.207.77 (211.65.207.77) 6.093 ms 211.65.207.21 (211.65.207.21) 6.319 ms 211.65.207.77 (211.65.207.77) 6.721 ms\r 5 101.4.116.222 (101.4.116.222) 5.298 ms 101.4.116.218 (101.4.116.218) 5.399 ms 101.4.116.105 (101.4.116.105) 5.960 ms\r 6 101.4.112.42 (101.4.112.42) 12.967 ms 101.4.117.25 (101.4.117.25) 7.938 ms 101.4.112.42 (101.4.112.42) 11.507 ms\r 7 101.4.117.30 (101.4.117.30) 42.283 ms 39.939 ms 39.886 ms\r 8 101.4.117.38 (101.4.117.38) 37.393 ms 101.4.116.118 (101.4.116.118) 39.181 ms 101.4.117.38 (101.4.117.38) 37.123 ms\r 9 101.4.112.69 (101.4.112.69) 38.658 ms 36.523 ms 101.4.112.1 (101.4.112.1) 34.868 ms\r 10 101.4.114.194 (101.4.114.194) 33.799 ms 101.4.113.109 (101.4.113.109) 32.864 ms 33.260 ms\r 11 101.4.118.26 (101.4.118.26) 37.468 ms 101.4.114.174 (101.4.114.174) 37.397 ms 101.4.118.26 (101.4.118.26) 37.665 ms\r 12 101.4.117.150 (101.4.117.150) 175.256 ms 101.4.118.26 (101.4.118.26) 37.406 ms 37.406 ms\r 13 61.8.59.37 (61.8.59.37) 185.770 ms 185.778 ms 101.4.117.150 (101.4.117.150) 172.632 ms\r 14 i-91.hkth-core02.telstraglobal.net (202.84.153.25) 216.492 ms 61.8.59.37 (61.8.59.37) 198.159 ms 198.539 ms\r 15 i-92.hkth12.telstraglobal.net (202.84.153.38) 231.299 ms i-0-5-0-5.hkth12.telstraglobal.net (202.84.173.22) 231.696 ms 232.120 ms\r 16 i-0-5-0-5.hkth12.telstraglobal.net (202.84.173.22) 229.983 ms ae1-125.cr1-hkg1.ip4.gtt.net (183.182.80.121) 270.571 ms 271.064 ms\r 17 et-0-0-59.cr3-lax2.ip4.gtt.net (89.149.130.94) 247.926 ms ae1-125.cr1-hkg1.ip4.gtt.net (183.182.80.121) 266.960 ms et-0-0-47.cr3-lax2.ip4.gtt.net (89.149.141.125) 247.520 ms\r 18 ip4.gtt.net (69.174.6.174) 279.924 ms et-0-0-47.cr3-lax2.ip4.gtt.net (89.149.141.125) 246.325 ms ip4.ceranetworks.com (69.174.2.154) 282.185 ms\r 19 23.225.225.221 (23.225.225.221) 249.050 ms ip4.gtt.net (69.174.6.174) 276.411 ms 23.225.225.221 (23.225.225.221) 247.393 ms\r 20 23.225.225.1 (23.225.225.1) 278.334 ms * 192.168.206.25 (192.168.206.25) 254.390 ms\r 21 900gbps-a.suite101-1200street (23.224.58.2) 287.459 ms * 287.883 ms\r 22 900gbps-a.suite101-1200street (23.224.58.2) 285.432 ms 286.349 ms 286.115 ms\r 23 23.225.225.22 (23.225.225.22) 288.666 ms 289.286 ms *\r 24 n21.sexpay.top (172.XXX.XXX.XXX) 359.110 ms !X 360.694 ms !X 360.689 ms !X\r \r \r tracerouteXXX.net//成功traceroutetoXXX.net(172.XXX.XXX.XXX),30hopsmax,60bytepackets110.0.255.254(10.0.255.254)12.236ms12.466ms12.842ms2172.255.0.17(172.255.0.17)1.383ms1.703ms1.828ms3∗∗∗4211.65.207.77(211.65.207.77)6.093ms211.65.207.21(211.65.207.21)6.319ms211.65.207.77(211.65.207.77)6.721ms5101.4.116.222(101.4.116.222)5.298ms101.4.116.218(101.4.116.218)5.399ms101.4.116.105(101.4.116.105)5.960ms6101.4.112.42(101.4.112.42)12.967ms101.4.117.25(101.4.117.25)7.938ms101.4.112.42(101.4.112.42)11.507ms7101.4.117.30(101.4.117.30)42.283ms39.939ms39.886ms8101.4.117.38(101.4.117.38)37.393ms101.4.116.118(101.4.116.118)39.181ms101.4.117.38(101.4.117.38)37.123ms9101.4.112.69(101.4.112.69)38.658ms36.523ms101.4.112.1(101.4.112.1)34.868ms10101.4.114.194(101.4.114.194)33.799ms101.4.113.109(101.4.113.109)32.864ms33.260ms11101.4.118.26(101.4.118.26)37.468ms101.4.114.174(101.4.114.174)37.397ms101.4.118.26(101.4.118.26)37.665ms12101.4.117.150(101.4.117.150)175.256ms101.4.118.26(101.4.118.26)37.406ms37.406ms1361.8.59.37(61.8.59.37)185.770ms185.778ms101.4.117.150(101.4.117.150)172.632ms14i−91.hkth−core02.telstraglobal.net(202.84.153.25)216.492ms61.8.59.37(61.8.59.37)198.159ms198.539ms15i−92.hkth12.telstraglobal.net(202.84.153.38)231.299msi−0−5−0−5.hkth12.telstraglobal.net(202.84.173.22)231.696ms232.120ms16i−0−5−0−5.hkth12.telstraglobal.net(202.84.173.22)229.983msae1−125.cr1−hkg1.ip4.gtt.net(183.182.80.121)270.571ms271.064ms17et−0−0−59.cr3−lax2.ip4.gtt.net(89.149.130.94)247.926msae1−125.cr1−hkg1.ip4.gtt.net(183.182.80.121)266.960mset−0−0−47.cr3−lax2.ip4.gtt.net(89.149.141.125)247.520ms18ip4.gtt.net(69.174.6.174)279.924mset−0−0−47.cr3−lax2.ip4.gtt.net(89.149.141.125)246.325msip4.ceranetworks.com(69.174.2.154)282.185ms1923.225.225.221(23.225.225.221)249.050msip4.gtt.net(69.174.6.174)276.411ms23.225.225.221(23.225.225.221)247.393ms2023.225.225.1(23.225.225.1)278.334ms∗192.168.206.25(192.168.206.25)254.390ms21900gbps−a.suite101−1200street(23.224.58.2)287.459ms∗287.883ms22900gbps−a.suite101−1200street(23.224.58.2)285.432ms286.349ms286.115ms2323.225.225.22(23.225.225.22)288.666ms289.286ms∗24n21.sexpay.top(172.XXX.XXX.XXX)359.110ms!X360.694ms!X360.689ms!X traceroute XXX.net //成功 traceroute to XXX.net (172.XXX.XXX.XXX), 30 hops max, 60 byte packets 1 10.0.255.254 (10.0.255.254) 2.077 ms 2.953 ms 3.639 ms 2 172.255.0.17 (172.255.0.17) 3.182 ms 4.127 ms 4.279 ms 3 * * * 4 202.112.53.133 (202.112.53.133) 8.110 ms 211.65.207.73 (211.65.207.73) 8.274 ms 15.675 ms 5 101.4.116.222 (101.4.116.222) 10.929 ms 101.4.116.105 (101.4.116.105) 10.724 ms 101.4.112.65 (101.4.112.65) 11.089 ms 6 101.4.112.42 (101.4.112.42) 15.537 ms 26.035 ms 101.4.117.25 (101.4.117.25) 13.354 ms 7 101.4.112.61 (101.4.112.61) 12.266 ms 12.624 ms 101.4.117.30 (101.4.117.30) 30.635 ms 8 101.4.116.118 (101.4.116.118) 35.910 ms 101.4.117.38 (101.4.117.38) 24.159 ms 101.4.116.118 (101.4.116.118) 35.911 ms 9 101.4.112.69 (101.4.112.69) 35.914 ms 36.042 ms 36.662 ms 10 * 101.4.115.253 (101.4.115.253) 35.988 ms * 11 101.4.114.170 (101.4.114.170) 33.722 ms 101.4.115.253 (101.4.115.253) 63.113 ms 101.4.114.57 (101.4.114.57) 35.252 ms 12 101.4.118.122 (101.4.118.122) 37.591 ms 101.4.114.57 (101.4.114.57) 33.045 ms 101.4.118.122 (101.4.118.122) 37.458 ms 13 101.4.118.122 (101.4.118.122) 33.419 ms 101.4.117.150 (101.4.117.150) 170.866 ms 171.085 ms 14 101.4.117.150 (101.4.117.150) 168.668 ms 61.8.59.37 (61.8.59.37) 256.320 ms 256.146 ms 15 i-91.hkth-core02.telstraglobal.net (202.84.153.25) 258.749 ms i-96.hkck-core01.telstraglobal.net (202.84.157.38) 259.077 ms 61.8.59.37 (61.8.59.37) 254.176 ms 16 i-0-5-0-5.hkth12.telstraglobal.net (202.84.173.22) 233.984 ms i-91.hkth-core02.telstraglobal.net (202.84.153.25) 256.536 ms i-92.hkth12.telstraglobal.net (202.84.153.38) 234.256 ms 17 ae1-125.cr1-hkg1.ip4.gtt.net (183.182.80.121) 259.715 ms 259.947 ms 260.199 ms 18 et-0-0-47.cr3-lax2.ip4.gtt.net (89.149.141.125) 256.856 ms ae1-125.cr1-hkg1.ip4.gtt.net (183.182.80.121) 274.929 ms 275.043 ms 19 et-0-0-47.cr3-lax2.ip4.gtt.net (89.149.141.125) 254.755 ms 255.707 ms 255.303 ms 20 ip4.gtt.net (69.174.6.174) 403.640 ms 23.225.225.221 (23.225.225.221) 290.821 ms 290.699 ms 21 192.168.206.13 (192.168.206.13) 293.049 ms 23.225.225.221 (23.225.225.221) 289.242 ms 288.700 ms 22 900gbps-a.suite101-1200street (23.224.58.2) 291.423 ms 289.208 ms 289.749 ms 23 23.225.225.22 (23.225.225.22) 293.897 ms 900gbps-a.suite101-1200street (23.224.58.2) 287.697 ms 286.963 ms 24 n21.sexpay.top (172.XXX.XXX.XXX) 283.936 ms !X 23.225.225.22 (23.225.225.22) 290.057 ms n21.sexpay.top (172.XXX.XXX.XXX) 283.006 ms !X tracerouteXXX.nettraceroutetoXXX.net(172.XXX.XXX.XXX),30hopsmax,60bytepackets110.0.255.254(10.0.255.254)1.127ms1.540ms1.840ms2172.255.0.17(172.255.0.17)2.264ms2.700ms4.001ms3∗∗∗4211.65.207.21(211.65.207.21)5.491ms7.085ms202.112.53.133(202.112.53.133)6.896ms5101.4.112.65(101.4.112.65)5.623ms101.4.116.218(101.4.116.218)6.330ms101.4.116.105(101.4.116.105)6.712ms6101.4.112.42(101.4.112.42)29.750ms101.4.117.25(101.4.117.25)6.450ms101.4.112.42(101.4.112.42)21.406ms7101.4.117.30(101.4.117.30)30.840ms101.4.112.61(101.4.112.61)12.511ms101.4.117.30(101.4.117.30)30.835ms8101.4.117.38(101.4.117.38)24.490ms24.508ms∗9∗∗∗10∗∗∗..................30∗∗∗‘‘‘‘‘‘//NUIST traceroute XXX.net\r traceroute to XXX.net (172.XXX.XXX.XXX), 30 hops max, 60 byte packets\r 1 10.0.255.254 (10.0.255.254) 1.127 ms 1.540 ms 1.840 ms\r 2 172.255.0.17 (172.255.0.17) 2.264 ms 2.700 ms 4.001 ms\r 3 * * *\r 4 211.65.207.21 (211.65.207.21) 5.491 ms 7.085 ms 202.112.53.133 (202.112.53.133) 6.896 ms\r 5 101.4.112.65 (101.4.112.65) 5.623 ms 101.4.116.218 (101.4.116.218) 6.330 ms 101.4.116.105 (101.4.116.105) 6.712 ms\r 6 101.4.112.42 (101.4.112.42) 29.750 ms 101.4.117.25 (101.4.117.25) 6.450 ms 101.4.112.42 (101.4.112.42) 21.406 ms\r 7 101.4.117.30 (101.4.117.30) 30.840 ms 101.4.112.61 (101.4.112.61) 12.511 ms 101.4.117.30 (101.4.117.30) 30.835 ms\r 8 101.4.117.38 (101.4.117.38) 24.490 ms 24.508 ms *\r 9 * * *\r 10 * * *\r ..................\r 30 * * *\r \r \r ```\r \r \r \r ```\r //NUIST\r tracerouteXXX.nettraceroutetoXXX.net(172.XXX.XXX.XXX),30hopsmax,60bytepackets110.0.255.254(10.0.255.254)1.127ms1.540ms1.840ms2172.255.0.17(172.255.0.17)2.264ms2.700ms4.001ms3∗∗∗4211.65.207.21(211.65.207.21)5.491ms7.085ms202.112.53.133(202.112.53.133)6.896ms5101.4.112.65(101.4.112.65)5.623ms101.4.116.218(101.4.116.218)6.330ms101.4.116.105(101.4.116.105)6.712ms6101.4.112.42(101.4.112.42)29.750ms101.4.117.25(101.4.117.25)6.450ms101.4.112.42(101.4.112.42)21.406ms7101.4.117.30(101.4.117.30)30.840ms101.4.112.61(101.4.112.61)12.511ms101.4.117.30(101.4.117.30)30.835ms8101.4.117.38(101.4.117.38)24.490ms24.508ms∗9∗∗∗10∗∗∗..................30∗∗∗‘‘‘‘‘‘//NUIST traceroute -m 50 github.com traceroute to github.com (13.250.177.223), 50 hops max, 60 byte packets 1 10.0.255.254 (10.0.255.254) 1.790 ms 2.212 ms 5.093 ms 2 172.255.0.17 (172.255.0.17) 2.386 ms 3.116 ms 4.686 ms 3 * * * 4 211.65.207.73 (211.65.207.73) 8.703 ms 211.65.207.21 (211.65.207.21) 8.146 ms 211.65.207.77 (211.65.207.77) 8.589 ms 5 101.4.116.222 (101.4.116.222) 7.459 ms 101.4.112.65 (101.4.112.65) 7.668 ms 101.4.116.105 (101.4.116.105) 7.908 ms 6 101.4.112.42 (101.4.112.42) 18.028 ms 101.4.117.25 (101.4.117.25) 6.887 ms 10.031 ms 7 101.4.117.30 (101.4.117.30) 31.468 ms 31.480 ms 101.4.112.61 (101.4.112.61) 12.882 ms 8 101.4.117.38 (101.4.117.38) 24.354 ms 101.4.116.118 (101.4.116.118) 36.079 ms 36.093 ms 9 101.4.112.1 (101.4.112.1) 36.852 ms 101.4.112.69 (101.4.112.69) 34.687 ms 101.4.112.1 (101.4.112.1) 37.050 ms 10 101.4.113.109 (101.4.113.109) 32.694 ms 101.4.114.170 (101.4.114.170) 36.337 ms 101.4.113.109 (101.4.113.109) 31.580 ms 11 101.4.118.26 (101.4.118.26) 36.731 ms 101.4.114.222 (101.4.114.222) 33.830 ms 101.4.118.26 (101.4.118.26) 34.181 ms 12 101.4.118.26 (101.4.118.26) 35.503 ms 35.486 ms 34.245 ms 13 101.4.117.150 (101.4.117.150) 171.352 ms 61.8.59.37 (61.8.59.37) 223.191 ms 101.4.117.150 (101.4.117.150) 171.015 ms 14 i-96.hkck-core01.telstraglobal.net (202.84.157.38) 228.246 ms i-91.hkth-core02.telstraglobal.net (202.84.153.25) 224.999 ms 61.8.59.37 (61.8.59.37) 252.529 ms 15 i-14252.jtha-core02.telstraglobal.net (202.84.141.130) 278.579 ms i-96.hkck-core01.telstraglobal.net (202.84.157.38) 225.226 ms 225.207 ms 16 i-0-7-0-7.siko11.telstraglobal.net (202.47.216.250) 259.852 ms i-14252.jtha-core02.telstraglobal.net (202.84.141.130) 276.108 ms i-0-7-0-7.siko11.telstraglobal.net (202.47.216.250) 260.654 ms 17 i-0-7-0-7.siko11.telstraglobal.net (202.47.216.250) 254.919 ms 260.544 ms 258.137 ms 18 unknown.telstraglobal.net (134.159.98.79) 263.527 ms * * 19 * * * 20 * 54.239.52.101 (54.239.52.101) 255.514 ms * 21 52.95.30.38 (52.95.30.38) 258.148 ms 52.95.30.54 (52.95.30.54) 263.417 ms * 22 * * 52.95.30.52 (52.95.30.52) 258.378 ms 23 * * * 24 * * 54.239.43.114 (54.239.43.114) 283.270 ms 25 52.93.8.176 (52.93.8.176) 322.379 ms * 54.239.43.114 (54.239.43.114) 292.128 ms 26 52.93.8.84 (52.93.8.84) 281.424 ms 52.93.8.88 (52.93.8.88) 330.969 ms * 27 52.93.11.42 (52.93.11.42) 250.639 ms 52.93.8.152 (52.93.8.152) 356.757 ms 52.93.11.54 (52.93.11.54) 282.197 ms 28 52.93.11.8 (52.93.11.8) 289.046 ms 52.93.11.20 (52.93.11.20) 276.373 ms 52.93.8.108 (52.93.8.108) 360.213 ms 29 52.93.11.28 (52.93.11.28) 297.627 ms 203.83.223.196 (203.83.223.196) 278.878 ms 52.93.11.30 (52.93.11.30) 286.366 ms 30 * * 52.93.11.14 (52.93.11.14) 286.796 ms 31 * 52.93.8.27 (52.93.8.27) 279.885 ms * 32 * * * 33 * * * .................. 50 * * * traceroutegithub.comtraceroutetogithub.com(13.250.177.223),30hopsmax,60bytepackets110.0.255.254(10.0.255.254)0.906ms1.156ms1.792ms2172.255.0.17(172.255.0.17)2.470ms2.773ms2.909ms3∗∗∗4211.65.207.73(211.65.207.73)21.279ms211.65.207.77(211.65.207.77)7.326ms211.65.207.73(211.65.207.73)21.498ms5101.4.116.105(101.4.116.105)6.131ms101.4.112.65(101.4.112.65)6.565ms6.766ms6101.4.112.42(101.4.112.42)13.960ms9.961ms101.4.117.25(101.4.117.25)6.175ms7101.4.117.30(101.4.117.30)29.086ms101.4.112.61(101.4.112.61)12.784ms101.4.117.30(101.4.117.30)29.095ms8101.4.116.118(101.4.116.118)34.816ms34.835ms34.833ms9101.4.112.1(101.4.112.1)31.861ms31.967ms∗10∗∗∗11∗∗∗.............30∗∗∗ traceroute github.com\r traceroute to github.com (13.250.177.223), 30 hops max, 60 byte packets\r 1 10.0.255.254 (10.0.255.254) 0.906 ms 1.156 ms 1.792 ms\r 2 172.255.0.17 (172.255.0.17) 2.470 ms 2.773 ms 2.909 ms\r 3 * * *\r 4 211.65.207.73 (211.65.207.73) 21.279 ms 211.65.207.77 (211.65.207.77) 7.326 ms 211.65.207.73 (211.65.207.73) 21.498 ms\r 5 101.4.116.105 (101.4.116.105) 6.131 ms 101.4.112.65 (101.4.112.65) 6.565 ms 6.766 ms\r 6 101.4.112.42 (101.4.112.42) 13.960 ms 9.961 ms 101.4.117.25 (101.4.117.25) 6.175 ms\r 7 101.4.117.30 (101.4.117.30) 29.086 ms 101.4.112.61 (101.4.112.61) 12.784 ms 101.4.117.30 (101.4.117.30) 29.095 ms\r 8 101.4.116.118 (101.4.116.118) 34.816 ms 34.835 ms 34.833 ms\r 9 101.4.112.1 (101.4.112.1) 31.861 ms 31.967 ms *\r 10 * * *\r 11 * * *\r .............\r 30 * * *\r \r \r traceroutegithub.comtraceroutetogithub.com(13.250.177.223),30hopsmax,60bytepackets110.0.255.254(10.0.255.254)0.906ms1.156ms1.792ms2172.255.0.17(172.255.0.17)2.470ms2.773ms2.909ms3∗∗∗4211.65.207.73(211.65.207.73)21.279ms211.65.207.77(211.65.207.77)7.326ms211.65.207.73(211.65.207.73)21.498ms5101.4.116.105(101.4.116.105)6.131ms101.4.112.65(101.4.112.65)6.565ms6.766ms6101.4.112.42(101.4.112.42)13.960ms9.961ms101.4.117.25(101.4.117.25)6.175ms7101.4.117.30(101.4.117.30)29.086ms101.4.112.61(101.4.112.61)12.784ms101.4.117.30(101.4.117.30)29.095ms8101.4.116.118(101.4.116.118)34.816ms34.835ms34.833ms9101.4.112.1(101.4.112.1)31.861ms31.967ms∗10∗∗∗11∗∗∗.............30∗∗∗ traceroute google.com traceroute to google.com (172.217.160.78), 30 hops max, 60 byte packets 1 10.0.255.254 (10.0.255.254) 3.414 ms 4.809 ms 4.970 ms 2 172.255.0.17 (172.255.0.17) 2.365 ms 2.595 ms 2.814 ms 3 * * * 4 211.65.207.77 (211.65.207.77) 8.438 ms 211.65.207.21 (211.65.207.21) 8.882 ms 211.65.207.77 (211.65.207.77) 9.025 ms 5 101.4.112.65 (101.4.112.65) 7.023 ms 101.4.116.105 (101.4.116.105) 7.835 ms 101.4.112.65 (101.4.112.65) 8.159 ms 6 101.4.112.42 (101.4.112.42) 16.272 ms 101.4.117.25 (101.4.117.25) 7.986 ms 101.4.112.42 (101.4.112.42) 13.853 ms 7 * * * 8 101.4.116.118 (101.4.116.118) 37.327 ms 101.4.117.38 (101.4.117.38) 22.157 ms 22.171 ms 9 101.4.112.1 (101.4.112.1) 32.538 ms 101.4.112.69 (101.4.112.69) 45.525 ms * 10 * * * 11 * * * .............. 30 * * * traceroutewww.baidu.comtraceroutetowww.baidu.com(180.101.49.12),30hopsmax,60bytepackets110.0.255.254(10.0.255.254)17.464ms17.593ms18.029ms2172.255.0.17(172.255.0.17)2.088ms2.398ms2.729ms3192.168.5.1(192.168.5.1)12.960ms13.118ms13.532ms4221.231.175.41(221.231.175.41)20.339ms20.346ms24.389ms5∗∗∗658.213.94.54(58.213.94.54)5.743ms6.250ms9.080ms7∗∗58.213.94.126(58.213.94.126)7.901ms858.213.96.106(58.213.96.106)5.543ms58.213.96.102(58.213.96.102)5.269ms58.213.96.98(58.213.96.98)5.283ms9∗∗∗10∗∗∗.............30∗∗∗‘‘‘‘‘‘//ZS301 traceroute www.baidu.com\r traceroute to www.baidu.com (180.101.49.12), 30 hops max, 60 byte packets\r 1 10.0.255.254 (10.0.255.254) 17.464 ms 17.593 ms 18.029 ms\r 2 172.255.0.17 (172.255.0.17) 2.088 ms 2.398 ms 2.729 ms\r 3 192.168.5.1 (192.168.5.1) 12.960 ms 13.118 ms 13.532 ms\r 4 221.231.175.41 (221.231.175.41) 20.339 ms 20.346 ms 24.389 ms\r 5 * * *\r 6 58.213.94.54 (58.213.94.54) 5.743 ms 6.250 ms 9.080 ms\r 7 * * 58.213.94.126 (58.213.94.126) 7.901 ms\r 8 58.213.96.106 (58.213.96.106) 5.543 ms 58.213.96.102 (58.213.96.102) 5.269 ms 58.213.96.98 (58.213.96.98) 5.283 ms\r 9 * * *\r 10 * * *\r .............\r 30 * * *\r \r \r ```\r \r \r \r ```\r //ZS301\r traceroutewww.baidu.comtraceroutetowww.baidu.com(180.101.49.12),30hopsmax,60bytepackets110.0.255.254(10.0.255.254)17.464ms17.593ms18.029ms2172.255.0.17(172.255.0.17)2.088ms2.398ms2.729ms3192.168.5.1(192.168.5.1)12.960ms13.118ms13.532ms4221.231.175.41(221.231.175.41)20.339ms20.346ms24.389ms5∗∗∗658.213.94.54(58.213.94.54)5.743ms6.250ms9.080ms7∗∗58.213.94.126(58.213.94.126)7.901ms858.213.96.106(58.213.96.106)5.543ms58.213.96.102(58.213.96.102)5.269ms58.213.96.98(58.213.96.98)5.283ms9∗∗∗10∗∗∗.............30∗∗∗‘‘‘‘‘‘//ZS301 traceroute github.com traceroute to github.com (13.250.177.223), 30 hops max, 60 byte packets 1 * * * 2 * * * 3 * * * 4 * * * 5 * * * ............ 30 * * * $ traceroute www.baidu.com traceroute to www.baidu.com (180.101.49.12), 30 hops max, 60 byte packets 1 OpenWrt.lan (172.16.0.2) 2.362 ms 2.357 ms * 2 172.16.0.1 (172.16.0.1) 2.340 ms 2.336 ms 3.151 ms 3 * * * 4 * * * ............. 30 * * * 参考 https://zh.wikipedia.org/wiki/Traceroute https://blog.csdn.net/fsdev/article/details/7884162 外部链接 在线traceroute工具 TRACEROUTE6.net: 在亚洲区含IPv4 和 IPv6 的在线traceroute工具 （英文） Traceroute test 在线Traceroute路由器追踪工具 "},"page/1094.html":{"url":"page/1094.html","title":"test","keywords":"","body":"1.使用Ping实用程序来测试计算机上的TCP/IP配置。 登录到Windows2000中。单击开始，然后将鼠标指针移到程序上，再移到附件上，然后单击命令提示符。\u000b在命令提示窗口键入ping x.x.x.x（实际主机的IP地址）。\u000b C:\\Users\\2017>ipconfig Windows IP 配置 以太网适配器 本地连接: 连接特定的 DNS 后缀 . . . . . . . : IPv4 地址 . . . . . . . . . . . . : 172.16.0.77 子网掩码 . . . . . . . . . . . . : 255.255.254.0 默认网关. . . . . . . . . . . . . : 172.16.0.1 隧道适配器 isatap.{6A2BF15D-4FCF-4362-BBC5-D36854A7768D}: 媒体状态 . . . . . . . . . . . . : 媒体已断开 连接特定的 DNS 后缀 . . . . . . . : 隧道适配器 Teredo Tunneling Pseudo-Interface: 媒体状态 . . . . . . . . . . . . : 媒体已断开 连接特定的 DNS 后缀 . . . . . . . : C:\\Users\\2017>ping 172.16.0.77 正在 Ping 172.16.0.77 具有 32 字节的数据: 来自 172.16.0.77 的回复: 字节=32 时间 问题1：发送了多少数据包？接受了多少数据包？丢失了多少数据包？\u000b 发送了32字节数据包，接受了32字节数据包，丢失了0字节数据包 问题2：TCP/IP工作正常吗？\u000b 正常 2.获得计算机的名称和IP地址。 在命令提示窗口键入hostname（获取计算机名）。\u000b在命令提示窗口键入ping 计算机（其中计算机是用hostname获得的主机名称）。\u000b C:\\Users\\2017>hostname ZS301-1 C:\\Users\\2017>ping ZS301-1 正在 Ping ZS301-1 [::1] 具有 32 字节的数据: 来自 ::1 的回复: 时间ipconfig /all Windows IP 配置 主机名 . . . . . . . . . . . . . : ZS301-1 主 DNS 后缀 . . . . . . . . . . . : 节点类型 . . . . . . . . . . . . : 混合 IP 路由已启用 . . . . . . . . . . : 否 WINS 代理已启用 . . . . . . . . . : 否 以太网适配器 本地连接: 连接特定的 DNS 后缀 . . . . . . . : 描述. . . . . . . . . . . . . . . : Broadcom 440x 10/100 Integrated Controlle r 物理地址. . . . . . . . . . . . . : 00-1D-09-09-A2-93 DHCP 已启用 . . . . . . . . . . . : 否 自动配置已启用. . . . . . . . . . : 是 IPv4 地址 . . . . . . . . . . . . : 172.16.0.77(首选) 子网掩码 . . . . . . . . . . . . : 255.255.254.0 默认网关. . . . . . . . . . . . . : 172.16.0.1 DNS 服务器 . . . . . . . . . . . : 202.195.224.100 TCPIP 上的 NetBIOS . . . . . . . : 已启用 隧道适配器 isatap.{6A2BF15D-4FCF-4362-BBC5-D36854A7768D}: 媒体状态 . . . . . . . . . . . . : 媒体已断开 连接特定的 DNS 后缀 . . . . . . . : 描述. . . . . . . . . . . . . . . : Microsoft ISATAP Adapter 物理地址. . . . . . . . . . . . . : 00-00-00-00-00-00-00-E0 DHCP 已启用 . . . . . . . . . . . : 否 自动配置已启用. . . . . . . . . . : 是 隧道适配器 Teredo Tunneling Pseudo-Interface: 媒体状态 . . . . . . . . . . . . : 媒体已断开 连接特定的 DNS 后缀 . . . . . . . : 描述. . . . . . . . . . . . . . . : Teredo Tunneling Pseudo-Interface 物理地址. . . . . . . . . . . . . : 00-00-00-00-00-00-00-E0 DHCP 已启用 . . . . . . . . . . . : 否 自动配置已启用. . . . . . . . . . : 是 C:\\Users\\2017> 问题3：你的计算机的主机名称是什么？\u000b ZS301-1 问题4：你的计算机的IP地址是什么？ localhost这个主机名称一般会解析为IPv4本地环回地址127.0.0.1和IPv6本地环回地址[::1] 问题5：还有别的方法或命令获得计算机的名称和IP地址吗？\u000b ipconfig /all 3. 使用Ping实用程序测试本计算机与其它计算机的连接性能 在命令提示窗口键入ping 其他计算机（其中其他计算机代表其他同学的计算机主机名称）。\u000b C:\\Users\\2017>ping 172.16.01.55 正在 Ping 172.16.1.55 具有 32 字节的数据: 来自 172.16.1.55 的回复: 字节=32 时间 问题6：你所键入的“其他计算机”的主机名称是什么？\u000b 172.16.1.55 问题7：你如何知道你和此“其他计算机”可以通讯？ 可以ping通，且已接受为100% 4. 考察计算机上的TCP/IP配置\u000b最小化命令提示窗口。 单击开始，然后将鼠标指针移到设置上，再移到网络和拨号连接上，然后右击本地连接。单击属性。单击Internet协议（TCP/IP）。\u000b单击属性。\u000b 问题8：你能说出你的计算机是否分配了IP地址？是如何分配的？\u000b 已分配 手动分配 问题9：配置IP地址的2种方法是什么？\u000b DHCP 手动配置 5. 使用Ipconfig实用程序验证计算机上的TCP/IP配置选项 \u000b关闭所有打开的窗口。重新打开命令提示窗口。在命令提示窗口键入ipconfig。\u000b C:\\Users\\2017>ipconfig Windows IP 配置 以太网适配器 本地连接: 连接特定的 DNS 后缀 . . . . . . . : IPv4 地址 . . . . . . . . . . . . : 172.16.0.77 子网掩码 . . . . . . . . . . . . : 255.255.254.0 默认网关. . . . . . . . . . . . . : 172.16.0.1 隧道适配器 isatap.{6A2BF15D-4FCF-4362-BBC5-D36854A7768D}: 媒体状态 . . . . . . . . . . . . : 媒体已断开 连接特定的 DNS 后缀 . . . . . . . : 隧道适配器 Teredo Tunneling Pseudo-Interface: 媒体状态 . . . . . . . . . . . . : 媒体已断开 连接特定的 DNS 后缀 . . . . . . . : 问题10：能察看你的计算机的IP地址吗？如果能，是多少？\u000b 能 172.16.0.77 问题11：显示了什么额外的配置信息？\u000b 子网掩码、默认网关等信息 问题12：能用ipconfig人工设置IP地址吗？如果能，如何设置？ 可以 先用ping查看是否存在想要设置的ip，若没有则通过ipconfig /release和ipconfig /renew配置 在命令提示窗口键入ipconfig/all。\u000b C:\\Users\\2017>ipconfig /all Windows IP 配置 主机名 . . . . . . . . . . . . . : ZS301-1 主 DNS 后缀 . . . . . . . . . . . : 节点类型 . . . . . . . . . . . . : 混合 IP 路由已启用 . . . . . . . . . . : 否 WINS 代理已启用 . . . . . . . . . : 否 以太网适配器 本地连接: 连接特定的 DNS 后缀 . . . . . . . : 描述. . . . . . . . . . . . . . . : Broadcom 440x 10/100 Integrated Controlle r 物理地址. . . . . . . . . . . . . : 00-1D-09-09-A2-93 DHCP 已启用 . . . . . . . . . . . : 否 自动配置已启用. . . . . . . . . . : 是 IPv4 地址 . . . . . . . . . . . . : 172.16.0.77(首选) 子网掩码 . . . . . . . . . . . . : 255.255.254.0 默认网关. . . . . . . . . . . . . : 172.16.0.1 DNS 服务器 . . . . . . . . . . . : 202.195.224.100 TCPIP 上的 NetBIOS . . . . . . . : 已启用 隧道适配器 isatap.{6A2BF15D-4FCF-4362-BBC5-D36854A7768D}: 媒体状态 . . . . . . . . . . . . : 媒体已断开 连接特定的 DNS 后缀 . . . . . . . : 描述. . . . . . . . . . . . . . . : Microsoft ISATAP Adapter 物理地址. . . . . . . . . . . . . : 00-00-00-00-00-00-00-E0 DHCP 已启用 . . . . . . . . . . . : 否 自动配置已启用. . . . . . . . . . : 是 隧道适配器 Teredo Tunneling Pseudo-Interface: 媒体状态 . . . . . . . . . . . . : 媒体已断开 连接特定的 DNS 后缀 . . . . . . . : 描述. . . . . . . . . . . . . . . : Teredo Tunneling Pseudo-Interface 物理地址. . . . . . . . . . . . . : 00-00-00-00-00-00-00-E0 DHCP 已启用 . . . . . . . . . . . : 否 自动配置已启用. . . . . . . . . . : 是 C:\\Users\\2017> 问题13： 与步骤ipconfig的结果相比较，ipconfig/all显示了什么额外的配置信息？\u000b 主机名、DNS服务器等 问题14：你的网卡的MAC地址（physical Address）是多少？\u000b 00-1D-09-09-A2-93 问题15：你的计算机拥有的是哪一类地址？你的网络ID是多少？\u000b B类 172.16.0.77 问题16： 缺省网关（Default Gateway）与你的计算机拥有相同的网络ID吗？ 不是，本主机的默认网关为路由器地址172.16.0.1 6.发送网络信息。 在命令提示窗口键入net send * hello everyone。 C:\\Users\\2017>net send * hello everyone 此命令的语法是: NET [ ACCOUNTS | COMPUTER | CONFIG | CONTINUE | FILE | GROUP | HELP | HELPMSG | LOCALGROUP | PAUSE | SESSION | SHARE | START | STATISTICS | STOP | TIME | USE | USER | VIEW ] C:\\Users\\2017> 问题17：信息是否发送成功？该命令是否可以定制消息的接收者？如何定制？ 输出提示语法，平台为win7x64不支持 参考 https://zh.wikipedia.org/wiki/Localhost "},"page/1095.html":{"url":"page/1095.html","title":"tcpdump","keywords":"","body":"tcpdump 安装 sudo apt install tcpdump 查询网卡 ifconfig lo: flags=73 mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10 loop txqueuelen 1000 (Local Loopback) RX packets 3560 bytes 1279092 (1.2 MiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 3560 bytes 1279092 (1.2 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 wlp0s20f3: flags=4163 mtu 1500 inet 172.16.1.234 netmask 255.255.254.0 broadcast 172.16.1.255 inet6 2001:da8:1035:1::3:5489 prefixlen 128 scopeid 0x0 inet6 fe80::6a77:c6c0:9895:37d0 prefixlen 64 scopeid 0x20 ether a4:c3:f0:8f:3e:7d txqueuelen 1000 (Ethernet) RX packets 345320 bytes 351317224 (335.0 MiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 180111 bytes 42930055 (40.9 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 使用 sudo tcpdump -i wlp0s20f3 tcpdump: verbose output suppressed, use -v or -vv for full protocol decode listening on wlp0s20f3, link-type EN10MB (Ethernet), capture size 262144 bytes 21:07:35.288385 IP6 fe80::224e:71ff:fe61:97c1 > ip6-allnodes: ICMP6, router advertisement, length 24 21:07:35.288828 IP zander-PC.lan.48968 > OpenWrt.lan.domain: 40971+ PTR? 1.c.7.9.1.6.e.f.f.f.1.7.e.4.2.2.0.0.0.0.0.0.0.0.0.0.0.0.0.8.e.f.ip6.arpa. (90) 21:07:35.290920 IP OpenWrt.lan.domain > zander-PC.lan.48968: 40971 NXDomain* 0/0/0 (90) 21:07:35.291114 IP zander-PC.lan.56166 > OpenWrt.lan.domain: 15208+ PTR? 2.0.16.172.in-addr.arpa. (41) 21:07:35.292306 IP OpenWrt.lan.domain > zander-PC.lan.56166: 15208* 1/0/0 PTR OpenWrt.lan. (66) 21:07:35.292437 IP zander-PC.lan.35328 > OpenWrt.lan.domain: 37913+ PTR? 234.1.16.172.in-addr.arpa. (43) 21:07:35.293556 IP OpenWrt.lan.domain > zander-PC.lan.35328: 37913* 1/0/0 PTR zander-PC.lan. (70) 21:07:35.455045 IP zander-PC.lan.4010 > ..8000: UDP, length 47 21:07:35.455254 IP zander-PC.lan.34966 > OpenWrt.lan.domain: 1238+ PTR? 123.17.204.120.in-addr.arpa. (45) 21:07:35.467703 IP ..8000 > zander-PC.lan.4010: UDP, length 647 21:07:35.468572 IP OpenWrt.lan.domain > zander-PC.lan.34966: 1238 1/0/0 PTR . (58) 21:07:35.470941 IP zander-PC.lan.4010 > ..8000: UDP, length 47 21:07:35.493284 IP6 fe80::224e:71ff:fe61:97c1 > ip6-allnodes: ICMP6, router advertisement, length 24 21:07:35.509763 IP ..8000 > zander-PC.lan.4010: UDP, length 55 21:07:35.971455 IP zander-PC.lan.4010 > ..8000: UDP, length 47 21:07:35.984438 IP ..8000 > zander-PC.lan.4010: UDP, length 647 21:07:35.988951 IP zander-PC.lan.4010 > ..8000: UDP, length 47 21:07:36.027513 IP ..8000 > zander-PC.lan.4010: UDP, length 55 21:07:36.489206 IP zander-PC.lan.4010 > ..8000: UDP, length 47 21:07:36.504189 IP ..8000 > zander-PC.lan.4010: UDP, length 647 21:07:36.509174 IP zander-PC.lan.4010 > ..8000: UDP, length 47 21:07:36.547912 IP ..8000 > zander-PC.lan.4010: UDP, length 55 21:07:37.008934 IP zander-PC.lan.4010 > ..8000: UDP, length 47 21:07:37.024561 IP ..8000 > zander-PC.lan.4010: UDP, length 647 21:07:37.028825 IP zander-PC.lan.4010 > ..8000: UDP, length 47 21:07:37.068110 IP ..8000 > zander-PC.lan.4010: UDP, length 55 21:07:37.527946 IP zander-PC.lan.4010 > ..8000: UDP, length 47 21:07:37.542613 IP ..8000 > zander-PC.lan.4010: UDP, length 647 21:07:37.547135 IP zander-PC.lan.4010 > ..8000: UDP, length 39 21:07:37.548857 IP zander-PC.lan.4010 > ..8000: UDP, length 47 21:07:37.561614 IP ..8000 > zander-PC.lan.4010: UDP, length 47 21:07:37.587280 IP ..8000 > zander-PC.lan.4010: UDP, length 55 21:07:38.047007 IP zander-PC.lan.4010 > ..8000: UDP, length 47 21:07:38.063038 IP ..8000 > zander-PC.lan.4010: UDP, length 647 21:07:38.066354 IP zander-PC.lan.4010 > ..8000: UDP, length 47 21:07:38.106906 IP ..8000 > zander-PC.lan.4010: UDP, length 55 21:07:38.329082 IP tg-in-f189.1e100.net.https > zander-PC.lan.51238: Flags [P.], seq 4227167278:4227167331, ack 239248662, win 1018, options [nop,nop,TS val 27349132 ecr 1508861170], length 53 21:07:38.329135 IP zander-PC.lan.51238 > tg-in-f189.1e100.net.https: Flags [.], ack 53, win 386, options [nop,nop,TS val 1508885768 ecr 27349132], length 0 强行停止 ctrl + C "},"page/1999.html":{"url":"page/1999.html","title":"end1130","keywords":"","body":"end1056 "}}